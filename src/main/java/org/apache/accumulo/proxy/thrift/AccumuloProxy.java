/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.accumulo.proxy.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings("all") public class AccumuloProxy {

  public interface Iface {

    public boolean ping(UserPass userpass) throws org.apache.thrift.TException;

    public int tableOperations_addConstraint(UserPass userpass, String tableName, String constraintClassName) throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException;

    public void tableOperations_addSplits(UserPass userpass, String tableName, Set<String> splits) throws TableNotFoundException, AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public void tableOperations_clearLocatorCache(UserPass userpass, String tableName) throws TableNotFoundException, org.apache.thrift.TException;

    public void tableOperations_compact(UserPass userpass, String tableName, String startRow, String endRow, boolean flush, boolean wait) throws AccumuloSecurityException, TableNotFoundException, AccumuloException, org.apache.thrift.TException;

    public void tableOperations_create(UserPass userpass, String tableName) throws AccumuloException, AccumuloSecurityException, TableExistsException, org.apache.thrift.TException;

    public void tableOperations_delete(UserPass userpass, String tableName) throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException;

    public void tableOperations_deleteRows(UserPass userpass, String tableName, String startRow, String endRow) throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException;

    public boolean tableOperations_exists(UserPass userpass, String tableName) throws org.apache.thrift.TException;

    public void tableOperations_flush(UserPass userpass, String tableName) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public Map<String,Set<String>> tableOperations_getLocalityGroups(UserPass userpass, String tableName) throws AccumuloException, TableNotFoundException, org.apache.thrift.TException;

    public String tableOperations_getMaxRow(UserPass userpass, String tableName, List<ByteBuffer> auths, String startRow, boolean startInclusive, String endRow, boolean endInclusive) throws TableNotFoundException, AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public Map<String,String> tableOperations_getProperties(UserPass userpass, String tableName) throws AccumuloException, TableNotFoundException, org.apache.thrift.TException;

    public List<String> tableOperations_getSplits(UserPass userpass, String tableName, int maxSplits) throws TableNotFoundException, org.apache.thrift.TException;

    public Set<String> tableOperations_list(UserPass userpass) throws org.apache.thrift.TException;

    public Map<String,Integer> tableOperations_listConstraints(UserPass userpass, String tableName) throws AccumuloException, TableNotFoundException, org.apache.thrift.TException;

    public void tableOperations_merge(UserPass userpass, String tableName, String startRow, String endRow) throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException;

    public void tableOperations_offline(UserPass userpass, String tableName) throws AccumuloSecurityException, AccumuloException, TableNotFoundException, org.apache.thrift.TException;

    public void tableOperations_online(UserPass userpass, String tableName) throws AccumuloSecurityException, AccumuloException, TableNotFoundException, org.apache.thrift.TException;

    public void tableOperations_removeConstraint(UserPass userpass, String tableName, int constraint) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public void tableOperations_removeProperty(UserPass userpass, String tableName, String property) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public void tableOperations_rename(UserPass userpass, String oldTableName, String newTableName) throws AccumuloSecurityException, TableNotFoundException, AccumuloException, TableExistsException, org.apache.thrift.TException;

    public void tableOperations_setLocalityGroups(UserPass userpass, String tableName, Map<String,Set<String>> groups) throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException;

    public void tableOperations_setProperty(UserPass userpass, String tableName, String property, String value) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public Map<String,String> tableOperations_tableIdMap(UserPass userpass) throws org.apache.thrift.TException;

    public Map<String,String> instanceOperations_getSiteConfiguration(UserPass userpass) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public Map<String,String> instanceOperations_getSystemConfiguration(UserPass userpass) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public List<String> instanceOperations_getTabletServers(UserPass userpass) throws org.apache.thrift.TException;

    public void instanceOperations_removeProperty(UserPass userpass, String property) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public void instanceOperations_setProperty(UserPass userpass, String property, String value) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public boolean instanceOperations_testClassLoad(UserPass userpass, String className, String asTypeName) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public boolean securityOperations_authenticateUser(UserPass userpass, String user, ByteBuffer password) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public void securityOperations_changeUserAuthorizations(UserPass userpass, String user, Set<String> authorizations) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public void securityOperations_changeUserPassword(UserPass userpass, String user, ByteBuffer password) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public void securityOperations_createUser(UserPass userpass, String user, ByteBuffer password, Set<String> authorizations) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public void securityOperations_dropUser(UserPass userpass, String user) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public List<ByteBuffer> securityOperations_getUserAuthorizations(UserPass userpass, String user) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public void securityOperations_grantSystemPermission(UserPass userpass, String user, PSystemPermission perm) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public void securityOperations_grantTablePermission(UserPass userpass, String user, String table, PTablePermission perm) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public boolean securityOperations_hasSystemPermission(UserPass userpass, String user, PSystemPermission perm) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public boolean securityOperations_hasTablePermission(UserPass userpass, String user, String table, PTablePermission perm) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public Set<String> securityOperations_listUsers(UserPass userpass) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public void securityOperations_revokeSystemPermission(UserPass userpass, String user, PSystemPermission perm) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public void securityOperations_revokeTablePermission(UserPass userpass, String user, String table, PTablePermission perm) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException;

    public String createBatchScanner(UserPass userpass, String tableName, Set<String> authorizations, PIteratorSetting iteratorSetting, List<PRange> range) throws org.apache.thrift.TException;

    public String createScanner(UserPass userpass, String tableName, Set<String> authorizations, PIteratorSetting iteratorSetting, PRange range) throws org.apache.thrift.TException;

    public boolean scanner_hasnext(String scanner) throws org.apache.thrift.TException;

    public KeyValueAndPeek scanner_next(String scanner) throws org.apache.thrift.TException;

    public PScanResult scanner_next_k(String scanner, int k) throws org.apache.thrift.TException;

    public void close_scanner(String scanner) throws org.apache.thrift.TException;

    public void updateAndFlush(UserPass userpass, String tableName, Map<ByteBuffer,List<PColumnUpdate>> cells, Map<ByteBuffer,List<PColumn>> deletedCells) throws org.apache.thrift.TException;

    public String createWriter(UserPass userpass, String tableName) throws org.apache.thrift.TException;

    public void writer_update(String writer, Map<ByteBuffer,List<PColumnUpdate>> cells, Map<ByteBuffer,List<PColumn>> deletedCells) throws org.apache.thrift.TException;

    public void writer_flush(String writer) throws org.apache.thrift.TException;

    public void writer_close(String writer) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ping_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_addConstraint(UserPass userpass, String tableName, String constraintClassName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_addConstraint_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_addSplits(UserPass userpass, String tableName, Set<String> splits, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_addSplits_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_clearLocatorCache(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_clearLocatorCache_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_compact(UserPass userpass, String tableName, String startRow, String endRow, boolean flush, boolean wait, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_compact_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_create(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_create_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_delete(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_delete_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_deleteRows(UserPass userpass, String tableName, String startRow, String endRow, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_deleteRows_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_exists(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_exists_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_flush(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_flush_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_getLocalityGroups(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_getLocalityGroups_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_getMaxRow(UserPass userpass, String tableName, List<ByteBuffer> auths, String startRow, boolean startInclusive, String endRow, boolean endInclusive, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_getMaxRow_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_getProperties(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_getProperties_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_getSplits(UserPass userpass, String tableName, int maxSplits, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_getSplits_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_list(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_list_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_listConstraints(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_listConstraints_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_merge(UserPass userpass, String tableName, String startRow, String endRow, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_merge_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_offline(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_offline_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_online(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_online_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_removeConstraint(UserPass userpass, String tableName, int constraint, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_removeConstraint_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_removeProperty(UserPass userpass, String tableName, String property, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_removeProperty_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_rename(UserPass userpass, String oldTableName, String newTableName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_rename_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_setLocalityGroups(UserPass userpass, String tableName, Map<String,Set<String>> groups, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_setLocalityGroups_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_setProperty(UserPass userpass, String tableName, String property, String value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_setProperty_call> resultHandler) throws org.apache.thrift.TException;

    public void tableOperations_tableIdMap(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tableOperations_tableIdMap_call> resultHandler) throws org.apache.thrift.TException;

    public void instanceOperations_getSiteConfiguration(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.instanceOperations_getSiteConfiguration_call> resultHandler) throws org.apache.thrift.TException;

    public void instanceOperations_getSystemConfiguration(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.instanceOperations_getSystemConfiguration_call> resultHandler) throws org.apache.thrift.TException;

    public void instanceOperations_getTabletServers(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.instanceOperations_getTabletServers_call> resultHandler) throws org.apache.thrift.TException;

    public void instanceOperations_removeProperty(UserPass userpass, String property, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.instanceOperations_removeProperty_call> resultHandler) throws org.apache.thrift.TException;

    public void instanceOperations_setProperty(UserPass userpass, String property, String value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.instanceOperations_setProperty_call> resultHandler) throws org.apache.thrift.TException;

    public void instanceOperations_testClassLoad(UserPass userpass, String className, String asTypeName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.instanceOperations_testClassLoad_call> resultHandler) throws org.apache.thrift.TException;

    public void securityOperations_authenticateUser(UserPass userpass, String user, ByteBuffer password, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.securityOperations_authenticateUser_call> resultHandler) throws org.apache.thrift.TException;

    public void securityOperations_changeUserAuthorizations(UserPass userpass, String user, Set<String> authorizations, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.securityOperations_changeUserAuthorizations_call> resultHandler) throws org.apache.thrift.TException;

    public void securityOperations_changeUserPassword(UserPass userpass, String user, ByteBuffer password, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.securityOperations_changeUserPassword_call> resultHandler) throws org.apache.thrift.TException;

    public void securityOperations_createUser(UserPass userpass, String user, ByteBuffer password, Set<String> authorizations, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.securityOperations_createUser_call> resultHandler) throws org.apache.thrift.TException;

    public void securityOperations_dropUser(UserPass userpass, String user, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.securityOperations_dropUser_call> resultHandler) throws org.apache.thrift.TException;

    public void securityOperations_getUserAuthorizations(UserPass userpass, String user, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.securityOperations_getUserAuthorizations_call> resultHandler) throws org.apache.thrift.TException;

    public void securityOperations_grantSystemPermission(UserPass userpass, String user, PSystemPermission perm, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.securityOperations_grantSystemPermission_call> resultHandler) throws org.apache.thrift.TException;

    public void securityOperations_grantTablePermission(UserPass userpass, String user, String table, PTablePermission perm, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.securityOperations_grantTablePermission_call> resultHandler) throws org.apache.thrift.TException;

    public void securityOperations_hasSystemPermission(UserPass userpass, String user, PSystemPermission perm, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.securityOperations_hasSystemPermission_call> resultHandler) throws org.apache.thrift.TException;

    public void securityOperations_hasTablePermission(UserPass userpass, String user, String table, PTablePermission perm, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.securityOperations_hasTablePermission_call> resultHandler) throws org.apache.thrift.TException;

    public void securityOperations_listUsers(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.securityOperations_listUsers_call> resultHandler) throws org.apache.thrift.TException;

    public void securityOperations_revokeSystemPermission(UserPass userpass, String user, PSystemPermission perm, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.securityOperations_revokeSystemPermission_call> resultHandler) throws org.apache.thrift.TException;

    public void securityOperations_revokeTablePermission(UserPass userpass, String user, String table, PTablePermission perm, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.securityOperations_revokeTablePermission_call> resultHandler) throws org.apache.thrift.TException;

    public void createBatchScanner(UserPass userpass, String tableName, Set<String> authorizations, PIteratorSetting iteratorSetting, List<PRange> range, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createBatchScanner_call> resultHandler) throws org.apache.thrift.TException;

    public void createScanner(UserPass userpass, String tableName, Set<String> authorizations, PIteratorSetting iteratorSetting, PRange range, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createScanner_call> resultHandler) throws org.apache.thrift.TException;

    public void scanner_hasnext(String scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scanner_hasnext_call> resultHandler) throws org.apache.thrift.TException;

    public void scanner_next(String scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scanner_next_call> resultHandler) throws org.apache.thrift.TException;

    public void scanner_next_k(String scanner, int k, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scanner_next_k_call> resultHandler) throws org.apache.thrift.TException;

    public void close_scanner(String scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.close_scanner_call> resultHandler) throws org.apache.thrift.TException;

    public void updateAndFlush(UserPass userpass, String tableName, Map<ByteBuffer,List<PColumnUpdate>> cells, Map<ByteBuffer,List<PColumn>> deletedCells, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateAndFlush_call> resultHandler) throws org.apache.thrift.TException;

    public void createWriter(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createWriter_call> resultHandler) throws org.apache.thrift.TException;

    public void writer_update(String writer, Map<ByteBuffer,List<PColumnUpdate>> cells, Map<ByteBuffer,List<PColumn>> deletedCells, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.writer_update_call> resultHandler) throws org.apache.thrift.TException;

    public void writer_flush(String writer, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.writer_flush_call> resultHandler) throws org.apache.thrift.TException;

    public void writer_close(String writer, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.writer_close_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean ping(UserPass userpass) throws org.apache.thrift.TException
    {
      send_ping(userpass);
      return recv_ping();
    }

    public void send_ping(UserPass userpass) throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      args.setUserpass(userpass);
      sendBase("ping", args);
    }

    public boolean recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public int tableOperations_addConstraint(UserPass userpass, String tableName, String constraintClassName) throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException
    {
      send_tableOperations_addConstraint(userpass, tableName, constraintClassName);
      return recv_tableOperations_addConstraint();
    }

    public void send_tableOperations_addConstraint(UserPass userpass, String tableName, String constraintClassName) throws org.apache.thrift.TException
    {
      tableOperations_addConstraint_args args = new tableOperations_addConstraint_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      args.setConstraintClassName(constraintClassName);
      sendBase("tableOperations_addConstraint", args);
    }

    public int recv_tableOperations_addConstraint() throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException
    {
      tableOperations_addConstraint_result result = new tableOperations_addConstraint_result();
      receiveBase(result, "tableOperations_addConstraint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      if (result.ouch3 != null) {
        throw result.ouch3;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "tableOperations_addConstraint failed: unknown result");
    }

    public void tableOperations_addSplits(UserPass userpass, String tableName, Set<String> splits) throws TableNotFoundException, AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_tableOperations_addSplits(userpass, tableName, splits);
      recv_tableOperations_addSplits();
    }

    public void send_tableOperations_addSplits(UserPass userpass, String tableName, Set<String> splits) throws org.apache.thrift.TException
    {
      tableOperations_addSplits_args args = new tableOperations_addSplits_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      args.setSplits(splits);
      sendBase("tableOperations_addSplits", args);
    }

    public void recv_tableOperations_addSplits() throws TableNotFoundException, AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      tableOperations_addSplits_result result = new tableOperations_addSplits_result();
      receiveBase(result, "tableOperations_addSplits");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      if (result.ouch3 != null) {
        throw result.ouch3;
      }
      return;
    }

    public void tableOperations_clearLocatorCache(UserPass userpass, String tableName) throws TableNotFoundException, org.apache.thrift.TException
    {
      send_tableOperations_clearLocatorCache(userpass, tableName);
      recv_tableOperations_clearLocatorCache();
    }

    public void send_tableOperations_clearLocatorCache(UserPass userpass, String tableName) throws org.apache.thrift.TException
    {
      tableOperations_clearLocatorCache_args args = new tableOperations_clearLocatorCache_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      sendBase("tableOperations_clearLocatorCache", args);
    }

    public void recv_tableOperations_clearLocatorCache() throws TableNotFoundException, org.apache.thrift.TException
    {
      tableOperations_clearLocatorCache_result result = new tableOperations_clearLocatorCache_result();
      receiveBase(result, "tableOperations_clearLocatorCache");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      return;
    }

    public void tableOperations_compact(UserPass userpass, String tableName, String startRow, String endRow, boolean flush, boolean wait) throws AccumuloSecurityException, TableNotFoundException, AccumuloException, org.apache.thrift.TException
    {
      send_tableOperations_compact(userpass, tableName, startRow, endRow, flush, wait);
      recv_tableOperations_compact();
    }

    public void send_tableOperations_compact(UserPass userpass, String tableName, String startRow, String endRow, boolean flush, boolean wait) throws org.apache.thrift.TException
    {
      tableOperations_compact_args args = new tableOperations_compact_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      args.setStartRow(startRow);
      args.setEndRow(endRow);
      args.setFlush(flush);
      args.setWait(wait);
      sendBase("tableOperations_compact", args);
    }

    public void recv_tableOperations_compact() throws AccumuloSecurityException, TableNotFoundException, AccumuloException, org.apache.thrift.TException
    {
      tableOperations_compact_result result = new tableOperations_compact_result();
      receiveBase(result, "tableOperations_compact");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      if (result.ouch3 != null) {
        throw result.ouch3;
      }
      return;
    }

    public void tableOperations_create(UserPass userpass, String tableName) throws AccumuloException, AccumuloSecurityException, TableExistsException, org.apache.thrift.TException
    {
      send_tableOperations_create(userpass, tableName);
      recv_tableOperations_create();
    }

    public void send_tableOperations_create(UserPass userpass, String tableName) throws org.apache.thrift.TException
    {
      tableOperations_create_args args = new tableOperations_create_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      sendBase("tableOperations_create", args);
    }

    public void recv_tableOperations_create() throws AccumuloException, AccumuloSecurityException, TableExistsException, org.apache.thrift.TException
    {
      tableOperations_create_result result = new tableOperations_create_result();
      receiveBase(result, "tableOperations_create");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      if (result.ouch3 != null) {
        throw result.ouch3;
      }
      return;
    }

    public void tableOperations_delete(UserPass userpass, String tableName) throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException
    {
      send_tableOperations_delete(userpass, tableName);
      recv_tableOperations_delete();
    }

    public void send_tableOperations_delete(UserPass userpass, String tableName) throws org.apache.thrift.TException
    {
      tableOperations_delete_args args = new tableOperations_delete_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      sendBase("tableOperations_delete", args);
    }

    public void recv_tableOperations_delete() throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException
    {
      tableOperations_delete_result result = new tableOperations_delete_result();
      receiveBase(result, "tableOperations_delete");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      if (result.ouch3 != null) {
        throw result.ouch3;
      }
      return;
    }

    public void tableOperations_deleteRows(UserPass userpass, String tableName, String startRow, String endRow) throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException
    {
      send_tableOperations_deleteRows(userpass, tableName, startRow, endRow);
      recv_tableOperations_deleteRows();
    }

    public void send_tableOperations_deleteRows(UserPass userpass, String tableName, String startRow, String endRow) throws org.apache.thrift.TException
    {
      tableOperations_deleteRows_args args = new tableOperations_deleteRows_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      args.setStartRow(startRow);
      args.setEndRow(endRow);
      sendBase("tableOperations_deleteRows", args);
    }

    public void recv_tableOperations_deleteRows() throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException
    {
      tableOperations_deleteRows_result result = new tableOperations_deleteRows_result();
      receiveBase(result, "tableOperations_deleteRows");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      if (result.ouch3 != null) {
        throw result.ouch3;
      }
      return;
    }

    public boolean tableOperations_exists(UserPass userpass, String tableName) throws org.apache.thrift.TException
    {
      send_tableOperations_exists(userpass, tableName);
      return recv_tableOperations_exists();
    }

    public void send_tableOperations_exists(UserPass userpass, String tableName) throws org.apache.thrift.TException
    {
      tableOperations_exists_args args = new tableOperations_exists_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      sendBase("tableOperations_exists", args);
    }

    public boolean recv_tableOperations_exists() throws org.apache.thrift.TException
    {
      tableOperations_exists_result result = new tableOperations_exists_result();
      receiveBase(result, "tableOperations_exists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "tableOperations_exists failed: unknown result");
    }

    public void tableOperations_flush(UserPass userpass, String tableName) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_tableOperations_flush(userpass, tableName);
      recv_tableOperations_flush();
    }

    public void send_tableOperations_flush(UserPass userpass, String tableName) throws org.apache.thrift.TException
    {
      tableOperations_flush_args args = new tableOperations_flush_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      sendBase("tableOperations_flush", args);
    }

    public void recv_tableOperations_flush() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      tableOperations_flush_result result = new tableOperations_flush_result();
      receiveBase(result, "tableOperations_flush");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      return;
    }

    public Map<String,Set<String>> tableOperations_getLocalityGroups(UserPass userpass, String tableName) throws AccumuloException, TableNotFoundException, org.apache.thrift.TException
    {
      send_tableOperations_getLocalityGroups(userpass, tableName);
      return recv_tableOperations_getLocalityGroups();
    }

    public void send_tableOperations_getLocalityGroups(UserPass userpass, String tableName) throws org.apache.thrift.TException
    {
      tableOperations_getLocalityGroups_args args = new tableOperations_getLocalityGroups_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      sendBase("tableOperations_getLocalityGroups", args);
    }

    public Map<String,Set<String>> recv_tableOperations_getLocalityGroups() throws AccumuloException, TableNotFoundException, org.apache.thrift.TException
    {
      tableOperations_getLocalityGroups_result result = new tableOperations_getLocalityGroups_result();
      receiveBase(result, "tableOperations_getLocalityGroups");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "tableOperations_getLocalityGroups failed: unknown result");
    }

    public String tableOperations_getMaxRow(UserPass userpass, String tableName, List<ByteBuffer> auths, String startRow, boolean startInclusive, String endRow, boolean endInclusive) throws TableNotFoundException, AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_tableOperations_getMaxRow(userpass, tableName, auths, startRow, startInclusive, endRow, endInclusive);
      return recv_tableOperations_getMaxRow();
    }

    public void send_tableOperations_getMaxRow(UserPass userpass, String tableName, List<ByteBuffer> auths, String startRow, boolean startInclusive, String endRow, boolean endInclusive) throws org.apache.thrift.TException
    {
      tableOperations_getMaxRow_args args = new tableOperations_getMaxRow_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      args.setAuths(auths);
      args.setStartRow(startRow);
      args.setStartInclusive(startInclusive);
      args.setEndRow(endRow);
      args.setEndInclusive(endInclusive);
      sendBase("tableOperations_getMaxRow", args);
    }

    public String recv_tableOperations_getMaxRow() throws TableNotFoundException, AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      tableOperations_getMaxRow_result result = new tableOperations_getMaxRow_result();
      receiveBase(result, "tableOperations_getMaxRow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      if (result.ouch3 != null) {
        throw result.ouch3;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "tableOperations_getMaxRow failed: unknown result");
    }

    public Map<String,String> tableOperations_getProperties(UserPass userpass, String tableName) throws AccumuloException, TableNotFoundException, org.apache.thrift.TException
    {
      send_tableOperations_getProperties(userpass, tableName);
      return recv_tableOperations_getProperties();
    }

    public void send_tableOperations_getProperties(UserPass userpass, String tableName) throws org.apache.thrift.TException
    {
      tableOperations_getProperties_args args = new tableOperations_getProperties_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      sendBase("tableOperations_getProperties", args);
    }

    public Map<String,String> recv_tableOperations_getProperties() throws AccumuloException, TableNotFoundException, org.apache.thrift.TException
    {
      tableOperations_getProperties_result result = new tableOperations_getProperties_result();
      receiveBase(result, "tableOperations_getProperties");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "tableOperations_getProperties failed: unknown result");
    }

    public List<String> tableOperations_getSplits(UserPass userpass, String tableName, int maxSplits) throws TableNotFoundException, org.apache.thrift.TException
    {
      send_tableOperations_getSplits(userpass, tableName, maxSplits);
      return recv_tableOperations_getSplits();
    }

    public void send_tableOperations_getSplits(UserPass userpass, String tableName, int maxSplits) throws org.apache.thrift.TException
    {
      tableOperations_getSplits_args args = new tableOperations_getSplits_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      args.setMaxSplits(maxSplits);
      sendBase("tableOperations_getSplits", args);
    }

    public List<String> recv_tableOperations_getSplits() throws TableNotFoundException, org.apache.thrift.TException
    {
      tableOperations_getSplits_result result = new tableOperations_getSplits_result();
      receiveBase(result, "tableOperations_getSplits");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "tableOperations_getSplits failed: unknown result");
    }

    public Set<String> tableOperations_list(UserPass userpass) throws org.apache.thrift.TException
    {
      send_tableOperations_list(userpass);
      return recv_tableOperations_list();
    }

    public void send_tableOperations_list(UserPass userpass) throws org.apache.thrift.TException
    {
      tableOperations_list_args args = new tableOperations_list_args();
      args.setUserpass(userpass);
      sendBase("tableOperations_list", args);
    }

    public Set<String> recv_tableOperations_list() throws org.apache.thrift.TException
    {
      tableOperations_list_result result = new tableOperations_list_result();
      receiveBase(result, "tableOperations_list");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "tableOperations_list failed: unknown result");
    }

    public Map<String,Integer> tableOperations_listConstraints(UserPass userpass, String tableName) throws AccumuloException, TableNotFoundException, org.apache.thrift.TException
    {
      send_tableOperations_listConstraints(userpass, tableName);
      return recv_tableOperations_listConstraints();
    }

    public void send_tableOperations_listConstraints(UserPass userpass, String tableName) throws org.apache.thrift.TException
    {
      tableOperations_listConstraints_args args = new tableOperations_listConstraints_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      sendBase("tableOperations_listConstraints", args);
    }

    public Map<String,Integer> recv_tableOperations_listConstraints() throws AccumuloException, TableNotFoundException, org.apache.thrift.TException
    {
      tableOperations_listConstraints_result result = new tableOperations_listConstraints_result();
      receiveBase(result, "tableOperations_listConstraints");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "tableOperations_listConstraints failed: unknown result");
    }

    public void tableOperations_merge(UserPass userpass, String tableName, String startRow, String endRow) throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException
    {
      send_tableOperations_merge(userpass, tableName, startRow, endRow);
      recv_tableOperations_merge();
    }

    public void send_tableOperations_merge(UserPass userpass, String tableName, String startRow, String endRow) throws org.apache.thrift.TException
    {
      tableOperations_merge_args args = new tableOperations_merge_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      args.setStartRow(startRow);
      args.setEndRow(endRow);
      sendBase("tableOperations_merge", args);
    }

    public void recv_tableOperations_merge() throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException
    {
      tableOperations_merge_result result = new tableOperations_merge_result();
      receiveBase(result, "tableOperations_merge");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      if (result.ouch3 != null) {
        throw result.ouch3;
      }
      return;
    }

    public void tableOperations_offline(UserPass userpass, String tableName) throws AccumuloSecurityException, AccumuloException, TableNotFoundException, org.apache.thrift.TException
    {
      send_tableOperations_offline(userpass, tableName);
      recv_tableOperations_offline();
    }

    public void send_tableOperations_offline(UserPass userpass, String tableName) throws org.apache.thrift.TException
    {
      tableOperations_offline_args args = new tableOperations_offline_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      sendBase("tableOperations_offline", args);
    }

    public void recv_tableOperations_offline() throws AccumuloSecurityException, AccumuloException, TableNotFoundException, org.apache.thrift.TException
    {
      tableOperations_offline_result result = new tableOperations_offline_result();
      receiveBase(result, "tableOperations_offline");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      if (result.ouch3 != null) {
        throw result.ouch3;
      }
      return;
    }

    public void tableOperations_online(UserPass userpass, String tableName) throws AccumuloSecurityException, AccumuloException, TableNotFoundException, org.apache.thrift.TException
    {
      send_tableOperations_online(userpass, tableName);
      recv_tableOperations_online();
    }

    public void send_tableOperations_online(UserPass userpass, String tableName) throws org.apache.thrift.TException
    {
      tableOperations_online_args args = new tableOperations_online_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      sendBase("tableOperations_online", args);
    }

    public void recv_tableOperations_online() throws AccumuloSecurityException, AccumuloException, TableNotFoundException, org.apache.thrift.TException
    {
      tableOperations_online_result result = new tableOperations_online_result();
      receiveBase(result, "tableOperations_online");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      if (result.ouch3 != null) {
        throw result.ouch3;
      }
      return;
    }

    public void tableOperations_removeConstraint(UserPass userpass, String tableName, int constraint) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_tableOperations_removeConstraint(userpass, tableName, constraint);
      recv_tableOperations_removeConstraint();
    }

    public void send_tableOperations_removeConstraint(UserPass userpass, String tableName, int constraint) throws org.apache.thrift.TException
    {
      tableOperations_removeConstraint_args args = new tableOperations_removeConstraint_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      args.setConstraint(constraint);
      sendBase("tableOperations_removeConstraint", args);
    }

    public void recv_tableOperations_removeConstraint() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      tableOperations_removeConstraint_result result = new tableOperations_removeConstraint_result();
      receiveBase(result, "tableOperations_removeConstraint");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      return;
    }

    public void tableOperations_removeProperty(UserPass userpass, String tableName, String property) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_tableOperations_removeProperty(userpass, tableName, property);
      recv_tableOperations_removeProperty();
    }

    public void send_tableOperations_removeProperty(UserPass userpass, String tableName, String property) throws org.apache.thrift.TException
    {
      tableOperations_removeProperty_args args = new tableOperations_removeProperty_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      args.setProperty(property);
      sendBase("tableOperations_removeProperty", args);
    }

    public void recv_tableOperations_removeProperty() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      tableOperations_removeProperty_result result = new tableOperations_removeProperty_result();
      receiveBase(result, "tableOperations_removeProperty");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      return;
    }

    public void tableOperations_rename(UserPass userpass, String oldTableName, String newTableName) throws AccumuloSecurityException, TableNotFoundException, AccumuloException, TableExistsException, org.apache.thrift.TException
    {
      send_tableOperations_rename(userpass, oldTableName, newTableName);
      recv_tableOperations_rename();
    }

    public void send_tableOperations_rename(UserPass userpass, String oldTableName, String newTableName) throws org.apache.thrift.TException
    {
      tableOperations_rename_args args = new tableOperations_rename_args();
      args.setUserpass(userpass);
      args.setOldTableName(oldTableName);
      args.setNewTableName(newTableName);
      sendBase("tableOperations_rename", args);
    }

    public void recv_tableOperations_rename() throws AccumuloSecurityException, TableNotFoundException, AccumuloException, TableExistsException, org.apache.thrift.TException
    {
      tableOperations_rename_result result = new tableOperations_rename_result();
      receiveBase(result, "tableOperations_rename");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      if (result.ouch3 != null) {
        throw result.ouch3;
      }
      if (result.ouch4 != null) {
        throw result.ouch4;
      }
      return;
    }

    public void tableOperations_setLocalityGroups(UserPass userpass, String tableName, Map<String,Set<String>> groups) throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException
    {
      send_tableOperations_setLocalityGroups(userpass, tableName, groups);
      recv_tableOperations_setLocalityGroups();
    }

    public void send_tableOperations_setLocalityGroups(UserPass userpass, String tableName, Map<String,Set<String>> groups) throws org.apache.thrift.TException
    {
      tableOperations_setLocalityGroups_args args = new tableOperations_setLocalityGroups_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      args.setGroups(groups);
      sendBase("tableOperations_setLocalityGroups", args);
    }

    public void recv_tableOperations_setLocalityGroups() throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException
    {
      tableOperations_setLocalityGroups_result result = new tableOperations_setLocalityGroups_result();
      receiveBase(result, "tableOperations_setLocalityGroups");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      if (result.ouch3 != null) {
        throw result.ouch3;
      }
      return;
    }

    public void tableOperations_setProperty(UserPass userpass, String tableName, String property, String value) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_tableOperations_setProperty(userpass, tableName, property, value);
      recv_tableOperations_setProperty();
    }

    public void send_tableOperations_setProperty(UserPass userpass, String tableName, String property, String value) throws org.apache.thrift.TException
    {
      tableOperations_setProperty_args args = new tableOperations_setProperty_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      args.setProperty(property);
      args.setValue(value);
      sendBase("tableOperations_setProperty", args);
    }

    public void recv_tableOperations_setProperty() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      tableOperations_setProperty_result result = new tableOperations_setProperty_result();
      receiveBase(result, "tableOperations_setProperty");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      return;
    }

    public Map<String,String> tableOperations_tableIdMap(UserPass userpass) throws org.apache.thrift.TException
    {
      send_tableOperations_tableIdMap(userpass);
      return recv_tableOperations_tableIdMap();
    }

    public void send_tableOperations_tableIdMap(UserPass userpass) throws org.apache.thrift.TException
    {
      tableOperations_tableIdMap_args args = new tableOperations_tableIdMap_args();
      args.setUserpass(userpass);
      sendBase("tableOperations_tableIdMap", args);
    }

    public Map<String,String> recv_tableOperations_tableIdMap() throws org.apache.thrift.TException
    {
      tableOperations_tableIdMap_result result = new tableOperations_tableIdMap_result();
      receiveBase(result, "tableOperations_tableIdMap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "tableOperations_tableIdMap failed: unknown result");
    }

    public Map<String,String> instanceOperations_getSiteConfiguration(UserPass userpass) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_instanceOperations_getSiteConfiguration(userpass);
      return recv_instanceOperations_getSiteConfiguration();
    }

    public void send_instanceOperations_getSiteConfiguration(UserPass userpass) throws org.apache.thrift.TException
    {
      instanceOperations_getSiteConfiguration_args args = new instanceOperations_getSiteConfiguration_args();
      args.setUserpass(userpass);
      sendBase("instanceOperations_getSiteConfiguration", args);
    }

    public Map<String,String> recv_instanceOperations_getSiteConfiguration() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      instanceOperations_getSiteConfiguration_result result = new instanceOperations_getSiteConfiguration_result();
      receiveBase(result, "instanceOperations_getSiteConfiguration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "instanceOperations_getSiteConfiguration failed: unknown result");
    }

    public Map<String,String> instanceOperations_getSystemConfiguration(UserPass userpass) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_instanceOperations_getSystemConfiguration(userpass);
      return recv_instanceOperations_getSystemConfiguration();
    }

    public void send_instanceOperations_getSystemConfiguration(UserPass userpass) throws org.apache.thrift.TException
    {
      instanceOperations_getSystemConfiguration_args args = new instanceOperations_getSystemConfiguration_args();
      args.setUserpass(userpass);
      sendBase("instanceOperations_getSystemConfiguration", args);
    }

    public Map<String,String> recv_instanceOperations_getSystemConfiguration() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      instanceOperations_getSystemConfiguration_result result = new instanceOperations_getSystemConfiguration_result();
      receiveBase(result, "instanceOperations_getSystemConfiguration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "instanceOperations_getSystemConfiguration failed: unknown result");
    }

    public List<String> instanceOperations_getTabletServers(UserPass userpass) throws org.apache.thrift.TException
    {
      send_instanceOperations_getTabletServers(userpass);
      return recv_instanceOperations_getTabletServers();
    }

    public void send_instanceOperations_getTabletServers(UserPass userpass) throws org.apache.thrift.TException
    {
      instanceOperations_getTabletServers_args args = new instanceOperations_getTabletServers_args();
      args.setUserpass(userpass);
      sendBase("instanceOperations_getTabletServers", args);
    }

    public List<String> recv_instanceOperations_getTabletServers() throws org.apache.thrift.TException
    {
      instanceOperations_getTabletServers_result result = new instanceOperations_getTabletServers_result();
      receiveBase(result, "instanceOperations_getTabletServers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "instanceOperations_getTabletServers failed: unknown result");
    }

    public void instanceOperations_removeProperty(UserPass userpass, String property) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_instanceOperations_removeProperty(userpass, property);
      recv_instanceOperations_removeProperty();
    }

    public void send_instanceOperations_removeProperty(UserPass userpass, String property) throws org.apache.thrift.TException
    {
      instanceOperations_removeProperty_args args = new instanceOperations_removeProperty_args();
      args.setUserpass(userpass);
      args.setProperty(property);
      sendBase("instanceOperations_removeProperty", args);
    }

    public void recv_instanceOperations_removeProperty() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      instanceOperations_removeProperty_result result = new instanceOperations_removeProperty_result();
      receiveBase(result, "instanceOperations_removeProperty");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      return;
    }

    public void instanceOperations_setProperty(UserPass userpass, String property, String value) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_instanceOperations_setProperty(userpass, property, value);
      recv_instanceOperations_setProperty();
    }

    public void send_instanceOperations_setProperty(UserPass userpass, String property, String value) throws org.apache.thrift.TException
    {
      instanceOperations_setProperty_args args = new instanceOperations_setProperty_args();
      args.setUserpass(userpass);
      args.setProperty(property);
      args.setValue(value);
      sendBase("instanceOperations_setProperty", args);
    }

    public void recv_instanceOperations_setProperty() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      instanceOperations_setProperty_result result = new instanceOperations_setProperty_result();
      receiveBase(result, "instanceOperations_setProperty");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      return;
    }

    public boolean instanceOperations_testClassLoad(UserPass userpass, String className, String asTypeName) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_instanceOperations_testClassLoad(userpass, className, asTypeName);
      return recv_instanceOperations_testClassLoad();
    }

    public void send_instanceOperations_testClassLoad(UserPass userpass, String className, String asTypeName) throws org.apache.thrift.TException
    {
      instanceOperations_testClassLoad_args args = new instanceOperations_testClassLoad_args();
      args.setUserpass(userpass);
      args.setClassName(className);
      args.setAsTypeName(asTypeName);
      sendBase("instanceOperations_testClassLoad", args);
    }

    public boolean recv_instanceOperations_testClassLoad() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      instanceOperations_testClassLoad_result result = new instanceOperations_testClassLoad_result();
      receiveBase(result, "instanceOperations_testClassLoad");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "instanceOperations_testClassLoad failed: unknown result");
    }

    public boolean securityOperations_authenticateUser(UserPass userpass, String user, ByteBuffer password) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_securityOperations_authenticateUser(userpass, user, password);
      return recv_securityOperations_authenticateUser();
    }

    public void send_securityOperations_authenticateUser(UserPass userpass, String user, ByteBuffer password) throws org.apache.thrift.TException
    {
      securityOperations_authenticateUser_args args = new securityOperations_authenticateUser_args();
      args.setUserpass(userpass);
      args.setUser(user);
      args.setPassword(password);
      sendBase("securityOperations_authenticateUser", args);
    }

    public boolean recv_securityOperations_authenticateUser() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      securityOperations_authenticateUser_result result = new securityOperations_authenticateUser_result();
      receiveBase(result, "securityOperations_authenticateUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "securityOperations_authenticateUser failed: unknown result");
    }

    public void securityOperations_changeUserAuthorizations(UserPass userpass, String user, Set<String> authorizations) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_securityOperations_changeUserAuthorizations(userpass, user, authorizations);
      recv_securityOperations_changeUserAuthorizations();
    }

    public void send_securityOperations_changeUserAuthorizations(UserPass userpass, String user, Set<String> authorizations) throws org.apache.thrift.TException
    {
      securityOperations_changeUserAuthorizations_args args = new securityOperations_changeUserAuthorizations_args();
      args.setUserpass(userpass);
      args.setUser(user);
      args.setAuthorizations(authorizations);
      sendBase("securityOperations_changeUserAuthorizations", args);
    }

    public void recv_securityOperations_changeUserAuthorizations() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      securityOperations_changeUserAuthorizations_result result = new securityOperations_changeUserAuthorizations_result();
      receiveBase(result, "securityOperations_changeUserAuthorizations");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      return;
    }

    public void securityOperations_changeUserPassword(UserPass userpass, String user, ByteBuffer password) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_securityOperations_changeUserPassword(userpass, user, password);
      recv_securityOperations_changeUserPassword();
    }

    public void send_securityOperations_changeUserPassword(UserPass userpass, String user, ByteBuffer password) throws org.apache.thrift.TException
    {
      securityOperations_changeUserPassword_args args = new securityOperations_changeUserPassword_args();
      args.setUserpass(userpass);
      args.setUser(user);
      args.setPassword(password);
      sendBase("securityOperations_changeUserPassword", args);
    }

    public void recv_securityOperations_changeUserPassword() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      securityOperations_changeUserPassword_result result = new securityOperations_changeUserPassword_result();
      receiveBase(result, "securityOperations_changeUserPassword");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      return;
    }

    public void securityOperations_createUser(UserPass userpass, String user, ByteBuffer password, Set<String> authorizations) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_securityOperations_createUser(userpass, user, password, authorizations);
      recv_securityOperations_createUser();
    }

    public void send_securityOperations_createUser(UserPass userpass, String user, ByteBuffer password, Set<String> authorizations) throws org.apache.thrift.TException
    {
      securityOperations_createUser_args args = new securityOperations_createUser_args();
      args.setUserpass(userpass);
      args.setUser(user);
      args.setPassword(password);
      args.setAuthorizations(authorizations);
      sendBase("securityOperations_createUser", args);
    }

    public void recv_securityOperations_createUser() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      securityOperations_createUser_result result = new securityOperations_createUser_result();
      receiveBase(result, "securityOperations_createUser");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      return;
    }

    public void securityOperations_dropUser(UserPass userpass, String user) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_securityOperations_dropUser(userpass, user);
      recv_securityOperations_dropUser();
    }

    public void send_securityOperations_dropUser(UserPass userpass, String user) throws org.apache.thrift.TException
    {
      securityOperations_dropUser_args args = new securityOperations_dropUser_args();
      args.setUserpass(userpass);
      args.setUser(user);
      sendBase("securityOperations_dropUser", args);
    }

    public void recv_securityOperations_dropUser() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      securityOperations_dropUser_result result = new securityOperations_dropUser_result();
      receiveBase(result, "securityOperations_dropUser");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      return;
    }

    public List<ByteBuffer> securityOperations_getUserAuthorizations(UserPass userpass, String user) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_securityOperations_getUserAuthorizations(userpass, user);
      return recv_securityOperations_getUserAuthorizations();
    }

    public void send_securityOperations_getUserAuthorizations(UserPass userpass, String user) throws org.apache.thrift.TException
    {
      securityOperations_getUserAuthorizations_args args = new securityOperations_getUserAuthorizations_args();
      args.setUserpass(userpass);
      args.setUser(user);
      sendBase("securityOperations_getUserAuthorizations", args);
    }

    public List<ByteBuffer> recv_securityOperations_getUserAuthorizations() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      securityOperations_getUserAuthorizations_result result = new securityOperations_getUserAuthorizations_result();
      receiveBase(result, "securityOperations_getUserAuthorizations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "securityOperations_getUserAuthorizations failed: unknown result");
    }

    public void securityOperations_grantSystemPermission(UserPass userpass, String user, PSystemPermission perm) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_securityOperations_grantSystemPermission(userpass, user, perm);
      recv_securityOperations_grantSystemPermission();
    }

    public void send_securityOperations_grantSystemPermission(UserPass userpass, String user, PSystemPermission perm) throws org.apache.thrift.TException
    {
      securityOperations_grantSystemPermission_args args = new securityOperations_grantSystemPermission_args();
      args.setUserpass(userpass);
      args.setUser(user);
      args.setPerm(perm);
      sendBase("securityOperations_grantSystemPermission", args);
    }

    public void recv_securityOperations_grantSystemPermission() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      securityOperations_grantSystemPermission_result result = new securityOperations_grantSystemPermission_result();
      receiveBase(result, "securityOperations_grantSystemPermission");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      return;
    }

    public void securityOperations_grantTablePermission(UserPass userpass, String user, String table, PTablePermission perm) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_securityOperations_grantTablePermission(userpass, user, table, perm);
      recv_securityOperations_grantTablePermission();
    }

    public void send_securityOperations_grantTablePermission(UserPass userpass, String user, String table, PTablePermission perm) throws org.apache.thrift.TException
    {
      securityOperations_grantTablePermission_args args = new securityOperations_grantTablePermission_args();
      args.setUserpass(userpass);
      args.setUser(user);
      args.setTable(table);
      args.setPerm(perm);
      sendBase("securityOperations_grantTablePermission", args);
    }

    public void recv_securityOperations_grantTablePermission() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      securityOperations_grantTablePermission_result result = new securityOperations_grantTablePermission_result();
      receiveBase(result, "securityOperations_grantTablePermission");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      return;
    }

    public boolean securityOperations_hasSystemPermission(UserPass userpass, String user, PSystemPermission perm) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_securityOperations_hasSystemPermission(userpass, user, perm);
      return recv_securityOperations_hasSystemPermission();
    }

    public void send_securityOperations_hasSystemPermission(UserPass userpass, String user, PSystemPermission perm) throws org.apache.thrift.TException
    {
      securityOperations_hasSystemPermission_args args = new securityOperations_hasSystemPermission_args();
      args.setUserpass(userpass);
      args.setUser(user);
      args.setPerm(perm);
      sendBase("securityOperations_hasSystemPermission", args);
    }

    public boolean recv_securityOperations_hasSystemPermission() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      securityOperations_hasSystemPermission_result result = new securityOperations_hasSystemPermission_result();
      receiveBase(result, "securityOperations_hasSystemPermission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "securityOperations_hasSystemPermission failed: unknown result");
    }

    public boolean securityOperations_hasTablePermission(UserPass userpass, String user, String table, PTablePermission perm) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_securityOperations_hasTablePermission(userpass, user, table, perm);
      return recv_securityOperations_hasTablePermission();
    }

    public void send_securityOperations_hasTablePermission(UserPass userpass, String user, String table, PTablePermission perm) throws org.apache.thrift.TException
    {
      securityOperations_hasTablePermission_args args = new securityOperations_hasTablePermission_args();
      args.setUserpass(userpass);
      args.setUser(user);
      args.setTable(table);
      args.setPerm(perm);
      sendBase("securityOperations_hasTablePermission", args);
    }

    public boolean recv_securityOperations_hasTablePermission() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      securityOperations_hasTablePermission_result result = new securityOperations_hasTablePermission_result();
      receiveBase(result, "securityOperations_hasTablePermission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "securityOperations_hasTablePermission failed: unknown result");
    }

    public Set<String> securityOperations_listUsers(UserPass userpass) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_securityOperations_listUsers(userpass);
      return recv_securityOperations_listUsers();
    }

    public void send_securityOperations_listUsers(UserPass userpass) throws org.apache.thrift.TException
    {
      securityOperations_listUsers_args args = new securityOperations_listUsers_args();
      args.setUserpass(userpass);
      sendBase("securityOperations_listUsers", args);
    }

    public Set<String> recv_securityOperations_listUsers() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      securityOperations_listUsers_result result = new securityOperations_listUsers_result();
      receiveBase(result, "securityOperations_listUsers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "securityOperations_listUsers failed: unknown result");
    }

    public void securityOperations_revokeSystemPermission(UserPass userpass, String user, PSystemPermission perm) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_securityOperations_revokeSystemPermission(userpass, user, perm);
      recv_securityOperations_revokeSystemPermission();
    }

    public void send_securityOperations_revokeSystemPermission(UserPass userpass, String user, PSystemPermission perm) throws org.apache.thrift.TException
    {
      securityOperations_revokeSystemPermission_args args = new securityOperations_revokeSystemPermission_args();
      args.setUserpass(userpass);
      args.setUser(user);
      args.setPerm(perm);
      sendBase("securityOperations_revokeSystemPermission", args);
    }

    public void recv_securityOperations_revokeSystemPermission() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      securityOperations_revokeSystemPermission_result result = new securityOperations_revokeSystemPermission_result();
      receiveBase(result, "securityOperations_revokeSystemPermission");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      return;
    }

    public void securityOperations_revokeTablePermission(UserPass userpass, String user, String table, PTablePermission perm) throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      send_securityOperations_revokeTablePermission(userpass, user, table, perm);
      recv_securityOperations_revokeTablePermission();
    }

    public void send_securityOperations_revokeTablePermission(UserPass userpass, String user, String table, PTablePermission perm) throws org.apache.thrift.TException
    {
      securityOperations_revokeTablePermission_args args = new securityOperations_revokeTablePermission_args();
      args.setUserpass(userpass);
      args.setUser(user);
      args.setTable(table);
      args.setPerm(perm);
      sendBase("securityOperations_revokeTablePermission", args);
    }

    public void recv_securityOperations_revokeTablePermission() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException
    {
      securityOperations_revokeTablePermission_result result = new securityOperations_revokeTablePermission_result();
      receiveBase(result, "securityOperations_revokeTablePermission");
      if (result.ouch1 != null) {
        throw result.ouch1;
      }
      if (result.ouch2 != null) {
        throw result.ouch2;
      }
      return;
    }

    public String createBatchScanner(UserPass userpass, String tableName, Set<String> authorizations, PIteratorSetting iteratorSetting, List<PRange> range) throws org.apache.thrift.TException
    {
      send_createBatchScanner(userpass, tableName, authorizations, iteratorSetting, range);
      return recv_createBatchScanner();
    }

    public void send_createBatchScanner(UserPass userpass, String tableName, Set<String> authorizations, PIteratorSetting iteratorSetting, List<PRange> range) throws org.apache.thrift.TException
    {
      createBatchScanner_args args = new createBatchScanner_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      args.setAuthorizations(authorizations);
      args.setIteratorSetting(iteratorSetting);
      args.setRange(range);
      sendBase("createBatchScanner", args);
    }

    public String recv_createBatchScanner() throws org.apache.thrift.TException
    {
      createBatchScanner_result result = new createBatchScanner_result();
      receiveBase(result, "createBatchScanner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createBatchScanner failed: unknown result");
    }

    public String createScanner(UserPass userpass, String tableName, Set<String> authorizations, PIteratorSetting iteratorSetting, PRange range) throws org.apache.thrift.TException
    {
      send_createScanner(userpass, tableName, authorizations, iteratorSetting, range);
      return recv_createScanner();
    }

    public void send_createScanner(UserPass userpass, String tableName, Set<String> authorizations, PIteratorSetting iteratorSetting, PRange range) throws org.apache.thrift.TException
    {
      createScanner_args args = new createScanner_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      args.setAuthorizations(authorizations);
      args.setIteratorSetting(iteratorSetting);
      args.setRange(range);
      sendBase("createScanner", args);
    }

    public String recv_createScanner() throws org.apache.thrift.TException
    {
      createScanner_result result = new createScanner_result();
      receiveBase(result, "createScanner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createScanner failed: unknown result");
    }

    public boolean scanner_hasnext(String scanner) throws org.apache.thrift.TException
    {
      send_scanner_hasnext(scanner);
      return recv_scanner_hasnext();
    }

    public void send_scanner_hasnext(String scanner) throws org.apache.thrift.TException
    {
      scanner_hasnext_args args = new scanner_hasnext_args();
      args.setScanner(scanner);
      sendBase("scanner_hasnext", args);
    }

    public boolean recv_scanner_hasnext() throws org.apache.thrift.TException
    {
      scanner_hasnext_result result = new scanner_hasnext_result();
      receiveBase(result, "scanner_hasnext");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "scanner_hasnext failed: unknown result");
    }

    public KeyValueAndPeek scanner_next(String scanner) throws org.apache.thrift.TException
    {
      send_scanner_next(scanner);
      return recv_scanner_next();
    }

    public void send_scanner_next(String scanner) throws org.apache.thrift.TException
    {
      scanner_next_args args = new scanner_next_args();
      args.setScanner(scanner);
      sendBase("scanner_next", args);
    }

    public KeyValueAndPeek recv_scanner_next() throws org.apache.thrift.TException
    {
      scanner_next_result result = new scanner_next_result();
      receiveBase(result, "scanner_next");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "scanner_next failed: unknown result");
    }

    public PScanResult scanner_next_k(String scanner, int k) throws org.apache.thrift.TException
    {
      send_scanner_next_k(scanner, k);
      return recv_scanner_next_k();
    }

    public void send_scanner_next_k(String scanner, int k) throws org.apache.thrift.TException
    {
      scanner_next_k_args args = new scanner_next_k_args();
      args.setScanner(scanner);
      args.setK(k);
      sendBase("scanner_next_k", args);
    }

    public PScanResult recv_scanner_next_k() throws org.apache.thrift.TException
    {
      scanner_next_k_result result = new scanner_next_k_result();
      receiveBase(result, "scanner_next_k");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "scanner_next_k failed: unknown result");
    }

    public void close_scanner(String scanner) throws org.apache.thrift.TException
    {
      send_close_scanner(scanner);
      recv_close_scanner();
    }

    public void send_close_scanner(String scanner) throws org.apache.thrift.TException
    {
      close_scanner_args args = new close_scanner_args();
      args.setScanner(scanner);
      sendBase("close_scanner", args);
    }

    public void recv_close_scanner() throws org.apache.thrift.TException
    {
      close_scanner_result result = new close_scanner_result();
      receiveBase(result, "close_scanner");
      return;
    }

    public void updateAndFlush(UserPass userpass, String tableName, Map<ByteBuffer,List<PColumnUpdate>> cells, Map<ByteBuffer,List<PColumn>> deletedCells) throws org.apache.thrift.TException
    {
      send_updateAndFlush(userpass, tableName, cells, deletedCells);
      recv_updateAndFlush();
    }

    public void send_updateAndFlush(UserPass userpass, String tableName, Map<ByteBuffer,List<PColumnUpdate>> cells, Map<ByteBuffer,List<PColumn>> deletedCells) throws org.apache.thrift.TException
    {
      updateAndFlush_args args = new updateAndFlush_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      args.setCells(cells);
      args.setDeletedCells(deletedCells);
      sendBase("updateAndFlush", args);
    }

    public void recv_updateAndFlush() throws org.apache.thrift.TException
    {
      updateAndFlush_result result = new updateAndFlush_result();
      receiveBase(result, "updateAndFlush");
      return;
    }

    public String createWriter(UserPass userpass, String tableName) throws org.apache.thrift.TException
    {
      send_createWriter(userpass, tableName);
      return recv_createWriter();
    }

    public void send_createWriter(UserPass userpass, String tableName) throws org.apache.thrift.TException
    {
      createWriter_args args = new createWriter_args();
      args.setUserpass(userpass);
      args.setTableName(tableName);
      sendBase("createWriter", args);
    }

    public String recv_createWriter() throws org.apache.thrift.TException
    {
      createWriter_result result = new createWriter_result();
      receiveBase(result, "createWriter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createWriter failed: unknown result");
    }

    public void writer_update(String writer, Map<ByteBuffer,List<PColumnUpdate>> cells, Map<ByteBuffer,List<PColumn>> deletedCells) throws org.apache.thrift.TException
    {
      send_writer_update(writer, cells, deletedCells);
    }

    public void send_writer_update(String writer, Map<ByteBuffer,List<PColumnUpdate>> cells, Map<ByteBuffer,List<PColumn>> deletedCells) throws org.apache.thrift.TException
    {
      writer_update_args args = new writer_update_args();
      args.setWriter(writer);
      args.setCells(cells);
      args.setDeletedCells(deletedCells);
      sendBase("writer_update", args);
    }

    public void writer_flush(String writer) throws org.apache.thrift.TException
    {
      send_writer_flush(writer);
      recv_writer_flush();
    }

    public void send_writer_flush(String writer) throws org.apache.thrift.TException
    {
      writer_flush_args args = new writer_flush_args();
      args.setWriter(writer);
      sendBase("writer_flush", args);
    }

    public void recv_writer_flush() throws org.apache.thrift.TException
    {
      writer_flush_result result = new writer_flush_result();
      receiveBase(result, "writer_flush");
      return;
    }

    public void writer_close(String writer) throws org.apache.thrift.TException
    {
      send_writer_close(writer);
      recv_writer_close();
    }

    public void send_writer_close(String writer) throws org.apache.thrift.TException
    {
      writer_close_args args = new writer_close_args();
      args.setWriter(writer);
      sendBase("writer_close", args);
    }

    public void recv_writer_close() throws org.apache.thrift.TException
    {
      writer_close_result result = new writer_close_result();
      receiveBase(result, "writer_close");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<ping_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(userpass, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      public ping_call(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<ping_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.setUserpass(userpass);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void tableOperations_addConstraint(UserPass userpass, String tableName, String constraintClassName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_addConstraint_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_addConstraint_call method_call = new tableOperations_addConstraint_call(userpass, tableName, constraintClassName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_addConstraint_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      private String constraintClassName;
      public tableOperations_addConstraint_call(UserPass userpass, String tableName, String constraintClassName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_addConstraint_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
        this.constraintClassName = constraintClassName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_addConstraint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_addConstraint_args args = new tableOperations_addConstraint_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.setConstraintClassName(constraintClassName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_tableOperations_addConstraint();
      }
    }

    public void tableOperations_addSplits(UserPass userpass, String tableName, Set<String> splits, org.apache.thrift.async.AsyncMethodCallback<tableOperations_addSplits_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_addSplits_call method_call = new tableOperations_addSplits_call(userpass, tableName, splits, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_addSplits_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      private Set<String> splits;
      public tableOperations_addSplits_call(UserPass userpass, String tableName, Set<String> splits, org.apache.thrift.async.AsyncMethodCallback<tableOperations_addSplits_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
        this.splits = splits;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_addSplits", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_addSplits_args args = new tableOperations_addSplits_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.setSplits(splits);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TableNotFoundException, AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_tableOperations_addSplits();
      }
    }

    public void tableOperations_clearLocatorCache(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_clearLocatorCache_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_clearLocatorCache_call method_call = new tableOperations_clearLocatorCache_call(userpass, tableName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_clearLocatorCache_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      public tableOperations_clearLocatorCache_call(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_clearLocatorCache_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_clearLocatorCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_clearLocatorCache_args args = new tableOperations_clearLocatorCache_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TableNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_tableOperations_clearLocatorCache();
      }
    }

    public void tableOperations_compact(UserPass userpass, String tableName, String startRow, String endRow, boolean flush, boolean wait, org.apache.thrift.async.AsyncMethodCallback<tableOperations_compact_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_compact_call method_call = new tableOperations_compact_call(userpass, tableName, startRow, endRow, flush, wait, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_compact_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      private String startRow;
      private String endRow;
      private boolean flush;
      private boolean wait;
      public tableOperations_compact_call(UserPass userpass, String tableName, String startRow, String endRow, boolean flush, boolean wait, org.apache.thrift.async.AsyncMethodCallback<tableOperations_compact_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
        this.startRow = startRow;
        this.endRow = endRow;
        this.flush = flush;
        this.wait = wait;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_compact", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_compact_args args = new tableOperations_compact_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.setStartRow(startRow);
        args.setEndRow(endRow);
        args.setFlush(flush);
        args.setWait(wait);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloSecurityException, TableNotFoundException, AccumuloException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_tableOperations_compact();
      }
    }

    public void tableOperations_create(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_create_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_create_call method_call = new tableOperations_create_call(userpass, tableName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_create_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      public tableOperations_create_call(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_create_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_create", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_create_args args = new tableOperations_create_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, TableExistsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_tableOperations_create();
      }
    }

    public void tableOperations_delete(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_delete_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_delete_call method_call = new tableOperations_delete_call(userpass, tableName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_delete_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      public tableOperations_delete_call(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_delete_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_delete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_delete_args args = new tableOperations_delete_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_tableOperations_delete();
      }
    }

    public void tableOperations_deleteRows(UserPass userpass, String tableName, String startRow, String endRow, org.apache.thrift.async.AsyncMethodCallback<tableOperations_deleteRows_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_deleteRows_call method_call = new tableOperations_deleteRows_call(userpass, tableName, startRow, endRow, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_deleteRows_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      private String startRow;
      private String endRow;
      public tableOperations_deleteRows_call(UserPass userpass, String tableName, String startRow, String endRow, org.apache.thrift.async.AsyncMethodCallback<tableOperations_deleteRows_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
        this.startRow = startRow;
        this.endRow = endRow;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_deleteRows", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_deleteRows_args args = new tableOperations_deleteRows_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.setStartRow(startRow);
        args.setEndRow(endRow);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_tableOperations_deleteRows();
      }
    }

    public void tableOperations_exists(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_exists_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_exists_call method_call = new tableOperations_exists_call(userpass, tableName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_exists_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      public tableOperations_exists_call(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_exists_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_exists", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_exists_args args = new tableOperations_exists_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_tableOperations_exists();
      }
    }

    public void tableOperations_flush(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_flush_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_flush_call method_call = new tableOperations_flush_call(userpass, tableName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_flush_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      public tableOperations_flush_call(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_flush_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_flush", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_flush_args args = new tableOperations_flush_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_tableOperations_flush();
      }
    }

    public void tableOperations_getLocalityGroups(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_getLocalityGroups_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_getLocalityGroups_call method_call = new tableOperations_getLocalityGroups_call(userpass, tableName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_getLocalityGroups_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      public tableOperations_getLocalityGroups_call(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_getLocalityGroups_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_getLocalityGroups", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_getLocalityGroups_args args = new tableOperations_getLocalityGroups_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Set<String>> getResult() throws AccumuloException, TableNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_tableOperations_getLocalityGroups();
      }
    }

    public void tableOperations_getMaxRow(UserPass userpass, String tableName, List<ByteBuffer> auths, String startRow, boolean startInclusive, String endRow, boolean endInclusive, org.apache.thrift.async.AsyncMethodCallback<tableOperations_getMaxRow_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_getMaxRow_call method_call = new tableOperations_getMaxRow_call(userpass, tableName, auths, startRow, startInclusive, endRow, endInclusive, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_getMaxRow_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      private List<ByteBuffer> auths;
      private String startRow;
      private boolean startInclusive;
      private String endRow;
      private boolean endInclusive;
      public tableOperations_getMaxRow_call(UserPass userpass, String tableName, List<ByteBuffer> auths, String startRow, boolean startInclusive, String endRow, boolean endInclusive, org.apache.thrift.async.AsyncMethodCallback<tableOperations_getMaxRow_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
        this.auths = auths;
        this.startRow = startRow;
        this.startInclusive = startInclusive;
        this.endRow = endRow;
        this.endInclusive = endInclusive;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_getMaxRow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_getMaxRow_args args = new tableOperations_getMaxRow_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.setAuths(auths);
        args.setStartRow(startRow);
        args.setStartInclusive(startInclusive);
        args.setEndRow(endRow);
        args.setEndInclusive(endInclusive);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TableNotFoundException, AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_tableOperations_getMaxRow();
      }
    }

    public void tableOperations_getProperties(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_getProperties_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_getProperties_call method_call = new tableOperations_getProperties_call(userpass, tableName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_getProperties_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      public tableOperations_getProperties_call(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_getProperties_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_getProperties", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_getProperties_args args = new tableOperations_getProperties_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws AccumuloException, TableNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_tableOperations_getProperties();
      }
    }

    public void tableOperations_getSplits(UserPass userpass, String tableName, int maxSplits, org.apache.thrift.async.AsyncMethodCallback<tableOperations_getSplits_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_getSplits_call method_call = new tableOperations_getSplits_call(userpass, tableName, maxSplits, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_getSplits_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      private int maxSplits;
      public tableOperations_getSplits_call(UserPass userpass, String tableName, int maxSplits, org.apache.thrift.async.AsyncMethodCallback<tableOperations_getSplits_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
        this.maxSplits = maxSplits;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_getSplits", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_getSplits_args args = new tableOperations_getSplits_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.setMaxSplits(maxSplits);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws TableNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_tableOperations_getSplits();
      }
    }

    public void tableOperations_list(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<tableOperations_list_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_list_call method_call = new tableOperations_list_call(userpass, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_list_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      public tableOperations_list_call(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<tableOperations_list_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_list", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_list_args args = new tableOperations_list_args();
        args.setUserpass(userpass);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_tableOperations_list();
      }
    }

    public void tableOperations_listConstraints(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_listConstraints_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_listConstraints_call method_call = new tableOperations_listConstraints_call(userpass, tableName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_listConstraints_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      public tableOperations_listConstraints_call(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_listConstraints_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_listConstraints", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_listConstraints_args args = new tableOperations_listConstraints_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Integer> getResult() throws AccumuloException, TableNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_tableOperations_listConstraints();
      }
    }

    public void tableOperations_merge(UserPass userpass, String tableName, String startRow, String endRow, org.apache.thrift.async.AsyncMethodCallback<tableOperations_merge_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_merge_call method_call = new tableOperations_merge_call(userpass, tableName, startRow, endRow, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_merge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      private String startRow;
      private String endRow;
      public tableOperations_merge_call(UserPass userpass, String tableName, String startRow, String endRow, org.apache.thrift.async.AsyncMethodCallback<tableOperations_merge_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
        this.startRow = startRow;
        this.endRow = endRow;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_merge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_merge_args args = new tableOperations_merge_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.setStartRow(startRow);
        args.setEndRow(endRow);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_tableOperations_merge();
      }
    }

    public void tableOperations_offline(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_offline_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_offline_call method_call = new tableOperations_offline_call(userpass, tableName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_offline_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      public tableOperations_offline_call(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_offline_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_offline", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_offline_args args = new tableOperations_offline_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloSecurityException, AccumuloException, TableNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_tableOperations_offline();
      }
    }

    public void tableOperations_online(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_online_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_online_call method_call = new tableOperations_online_call(userpass, tableName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_online_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      public tableOperations_online_call(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_online_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_online", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_online_args args = new tableOperations_online_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloSecurityException, AccumuloException, TableNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_tableOperations_online();
      }
    }

    public void tableOperations_removeConstraint(UserPass userpass, String tableName, int constraint, org.apache.thrift.async.AsyncMethodCallback<tableOperations_removeConstraint_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_removeConstraint_call method_call = new tableOperations_removeConstraint_call(userpass, tableName, constraint, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_removeConstraint_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      private int constraint;
      public tableOperations_removeConstraint_call(UserPass userpass, String tableName, int constraint, org.apache.thrift.async.AsyncMethodCallback<tableOperations_removeConstraint_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
        this.constraint = constraint;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_removeConstraint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_removeConstraint_args args = new tableOperations_removeConstraint_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.setConstraint(constraint);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_tableOperations_removeConstraint();
      }
    }

    public void tableOperations_removeProperty(UserPass userpass, String tableName, String property, org.apache.thrift.async.AsyncMethodCallback<tableOperations_removeProperty_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_removeProperty_call method_call = new tableOperations_removeProperty_call(userpass, tableName, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_removeProperty_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      private String property;
      public tableOperations_removeProperty_call(UserPass userpass, String tableName, String property, org.apache.thrift.async.AsyncMethodCallback<tableOperations_removeProperty_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_removeProperty", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_removeProperty_args args = new tableOperations_removeProperty_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_tableOperations_removeProperty();
      }
    }

    public void tableOperations_rename(UserPass userpass, String oldTableName, String newTableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_rename_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_rename_call method_call = new tableOperations_rename_call(userpass, oldTableName, newTableName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_rename_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String oldTableName;
      private String newTableName;
      public tableOperations_rename_call(UserPass userpass, String oldTableName, String newTableName, org.apache.thrift.async.AsyncMethodCallback<tableOperations_rename_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.oldTableName = oldTableName;
        this.newTableName = newTableName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_rename", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_rename_args args = new tableOperations_rename_args();
        args.setUserpass(userpass);
        args.setOldTableName(oldTableName);
        args.setNewTableName(newTableName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloSecurityException, TableNotFoundException, AccumuloException, TableExistsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_tableOperations_rename();
      }
    }

    public void tableOperations_setLocalityGroups(UserPass userpass, String tableName, Map<String,Set<String>> groups, org.apache.thrift.async.AsyncMethodCallback<tableOperations_setLocalityGroups_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_setLocalityGroups_call method_call = new tableOperations_setLocalityGroups_call(userpass, tableName, groups, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_setLocalityGroups_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      private Map<String,Set<String>> groups;
      public tableOperations_setLocalityGroups_call(UserPass userpass, String tableName, Map<String,Set<String>> groups, org.apache.thrift.async.AsyncMethodCallback<tableOperations_setLocalityGroups_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
        this.groups = groups;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_setLocalityGroups", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_setLocalityGroups_args args = new tableOperations_setLocalityGroups_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.setGroups(groups);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_tableOperations_setLocalityGroups();
      }
    }

    public void tableOperations_setProperty(UserPass userpass, String tableName, String property, String value, org.apache.thrift.async.AsyncMethodCallback<tableOperations_setProperty_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_setProperty_call method_call = new tableOperations_setProperty_call(userpass, tableName, property, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_setProperty_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      private String property;
      private String value;
      public tableOperations_setProperty_call(UserPass userpass, String tableName, String property, String value, org.apache.thrift.async.AsyncMethodCallback<tableOperations_setProperty_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
        this.property = property;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_setProperty", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_setProperty_args args = new tableOperations_setProperty_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.setProperty(property);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_tableOperations_setProperty();
      }
    }

    public void tableOperations_tableIdMap(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<tableOperations_tableIdMap_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tableOperations_tableIdMap_call method_call = new tableOperations_tableIdMap_call(userpass, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tableOperations_tableIdMap_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      public tableOperations_tableIdMap_call(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<tableOperations_tableIdMap_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tableOperations_tableIdMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tableOperations_tableIdMap_args args = new tableOperations_tableIdMap_args();
        args.setUserpass(userpass);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_tableOperations_tableIdMap();
      }
    }

    public void instanceOperations_getSiteConfiguration(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<instanceOperations_getSiteConfiguration_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      instanceOperations_getSiteConfiguration_call method_call = new instanceOperations_getSiteConfiguration_call(userpass, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class instanceOperations_getSiteConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      public instanceOperations_getSiteConfiguration_call(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<instanceOperations_getSiteConfiguration_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("instanceOperations_getSiteConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        instanceOperations_getSiteConfiguration_args args = new instanceOperations_getSiteConfiguration_args();
        args.setUserpass(userpass);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_instanceOperations_getSiteConfiguration();
      }
    }

    public void instanceOperations_getSystemConfiguration(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<instanceOperations_getSystemConfiguration_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      instanceOperations_getSystemConfiguration_call method_call = new instanceOperations_getSystemConfiguration_call(userpass, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class instanceOperations_getSystemConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      public instanceOperations_getSystemConfiguration_call(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<instanceOperations_getSystemConfiguration_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("instanceOperations_getSystemConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        instanceOperations_getSystemConfiguration_args args = new instanceOperations_getSystemConfiguration_args();
        args.setUserpass(userpass);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_instanceOperations_getSystemConfiguration();
      }
    }

    public void instanceOperations_getTabletServers(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<instanceOperations_getTabletServers_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      instanceOperations_getTabletServers_call method_call = new instanceOperations_getTabletServers_call(userpass, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class instanceOperations_getTabletServers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      public instanceOperations_getTabletServers_call(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<instanceOperations_getTabletServers_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("instanceOperations_getTabletServers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        instanceOperations_getTabletServers_args args = new instanceOperations_getTabletServers_args();
        args.setUserpass(userpass);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_instanceOperations_getTabletServers();
      }
    }

    public void instanceOperations_removeProperty(UserPass userpass, String property, org.apache.thrift.async.AsyncMethodCallback<instanceOperations_removeProperty_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      instanceOperations_removeProperty_call method_call = new instanceOperations_removeProperty_call(userpass, property, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class instanceOperations_removeProperty_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String property;
      public instanceOperations_removeProperty_call(UserPass userpass, String property, org.apache.thrift.async.AsyncMethodCallback<instanceOperations_removeProperty_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.property = property;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("instanceOperations_removeProperty", org.apache.thrift.protocol.TMessageType.CALL, 0));
        instanceOperations_removeProperty_args args = new instanceOperations_removeProperty_args();
        args.setUserpass(userpass);
        args.setProperty(property);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_instanceOperations_removeProperty();
      }
    }

    public void instanceOperations_setProperty(UserPass userpass, String property, String value, org.apache.thrift.async.AsyncMethodCallback<instanceOperations_setProperty_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      instanceOperations_setProperty_call method_call = new instanceOperations_setProperty_call(userpass, property, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class instanceOperations_setProperty_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String property;
      private String value;
      public instanceOperations_setProperty_call(UserPass userpass, String property, String value, org.apache.thrift.async.AsyncMethodCallback<instanceOperations_setProperty_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.property = property;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("instanceOperations_setProperty", org.apache.thrift.protocol.TMessageType.CALL, 0));
        instanceOperations_setProperty_args args = new instanceOperations_setProperty_args();
        args.setUserpass(userpass);
        args.setProperty(property);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_instanceOperations_setProperty();
      }
    }

    public void instanceOperations_testClassLoad(UserPass userpass, String className, String asTypeName, org.apache.thrift.async.AsyncMethodCallback<instanceOperations_testClassLoad_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      instanceOperations_testClassLoad_call method_call = new instanceOperations_testClassLoad_call(userpass, className, asTypeName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class instanceOperations_testClassLoad_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String className;
      private String asTypeName;
      public instanceOperations_testClassLoad_call(UserPass userpass, String className, String asTypeName, org.apache.thrift.async.AsyncMethodCallback<instanceOperations_testClassLoad_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.className = className;
        this.asTypeName = asTypeName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("instanceOperations_testClassLoad", org.apache.thrift.protocol.TMessageType.CALL, 0));
        instanceOperations_testClassLoad_args args = new instanceOperations_testClassLoad_args();
        args.setUserpass(userpass);
        args.setClassName(className);
        args.setAsTypeName(asTypeName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_instanceOperations_testClassLoad();
      }
    }

    public void securityOperations_authenticateUser(UserPass userpass, String user, ByteBuffer password, org.apache.thrift.async.AsyncMethodCallback<securityOperations_authenticateUser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      securityOperations_authenticateUser_call method_call = new securityOperations_authenticateUser_call(userpass, user, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class securityOperations_authenticateUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String user;
      private ByteBuffer password;
      public securityOperations_authenticateUser_call(UserPass userpass, String user, ByteBuffer password, org.apache.thrift.async.AsyncMethodCallback<securityOperations_authenticateUser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.user = user;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("securityOperations_authenticateUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        securityOperations_authenticateUser_args args = new securityOperations_authenticateUser_args();
        args.setUserpass(userpass);
        args.setUser(user);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_securityOperations_authenticateUser();
      }
    }

    public void securityOperations_changeUserAuthorizations(UserPass userpass, String user, Set<String> authorizations, org.apache.thrift.async.AsyncMethodCallback<securityOperations_changeUserAuthorizations_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      securityOperations_changeUserAuthorizations_call method_call = new securityOperations_changeUserAuthorizations_call(userpass, user, authorizations, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class securityOperations_changeUserAuthorizations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String user;
      private Set<String> authorizations;
      public securityOperations_changeUserAuthorizations_call(UserPass userpass, String user, Set<String> authorizations, org.apache.thrift.async.AsyncMethodCallback<securityOperations_changeUserAuthorizations_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.user = user;
        this.authorizations = authorizations;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("securityOperations_changeUserAuthorizations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        securityOperations_changeUserAuthorizations_args args = new securityOperations_changeUserAuthorizations_args();
        args.setUserpass(userpass);
        args.setUser(user);
        args.setAuthorizations(authorizations);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_securityOperations_changeUserAuthorizations();
      }
    }

    public void securityOperations_changeUserPassword(UserPass userpass, String user, ByteBuffer password, org.apache.thrift.async.AsyncMethodCallback<securityOperations_changeUserPassword_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      securityOperations_changeUserPassword_call method_call = new securityOperations_changeUserPassword_call(userpass, user, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class securityOperations_changeUserPassword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String user;
      private ByteBuffer password;
      public securityOperations_changeUserPassword_call(UserPass userpass, String user, ByteBuffer password, org.apache.thrift.async.AsyncMethodCallback<securityOperations_changeUserPassword_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.user = user;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("securityOperations_changeUserPassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        securityOperations_changeUserPassword_args args = new securityOperations_changeUserPassword_args();
        args.setUserpass(userpass);
        args.setUser(user);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_securityOperations_changeUserPassword();
      }
    }

    public void securityOperations_createUser(UserPass userpass, String user, ByteBuffer password, Set<String> authorizations, org.apache.thrift.async.AsyncMethodCallback<securityOperations_createUser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      securityOperations_createUser_call method_call = new securityOperations_createUser_call(userpass, user, password, authorizations, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class securityOperations_createUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String user;
      private ByteBuffer password;
      private Set<String> authorizations;
      public securityOperations_createUser_call(UserPass userpass, String user, ByteBuffer password, Set<String> authorizations, org.apache.thrift.async.AsyncMethodCallback<securityOperations_createUser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.user = user;
        this.password = password;
        this.authorizations = authorizations;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("securityOperations_createUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        securityOperations_createUser_args args = new securityOperations_createUser_args();
        args.setUserpass(userpass);
        args.setUser(user);
        args.setPassword(password);
        args.setAuthorizations(authorizations);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_securityOperations_createUser();
      }
    }

    public void securityOperations_dropUser(UserPass userpass, String user, org.apache.thrift.async.AsyncMethodCallback<securityOperations_dropUser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      securityOperations_dropUser_call method_call = new securityOperations_dropUser_call(userpass, user, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class securityOperations_dropUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String user;
      public securityOperations_dropUser_call(UserPass userpass, String user, org.apache.thrift.async.AsyncMethodCallback<securityOperations_dropUser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.user = user;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("securityOperations_dropUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        securityOperations_dropUser_args args = new securityOperations_dropUser_args();
        args.setUserpass(userpass);
        args.setUser(user);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_securityOperations_dropUser();
      }
    }

    public void securityOperations_getUserAuthorizations(UserPass userpass, String user, org.apache.thrift.async.AsyncMethodCallback<securityOperations_getUserAuthorizations_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      securityOperations_getUserAuthorizations_call method_call = new securityOperations_getUserAuthorizations_call(userpass, user, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class securityOperations_getUserAuthorizations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String user;
      public securityOperations_getUserAuthorizations_call(UserPass userpass, String user, org.apache.thrift.async.AsyncMethodCallback<securityOperations_getUserAuthorizations_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.user = user;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("securityOperations_getUserAuthorizations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        securityOperations_getUserAuthorizations_args args = new securityOperations_getUserAuthorizations_args();
        args.setUserpass(userpass);
        args.setUser(user);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ByteBuffer> getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_securityOperations_getUserAuthorizations();
      }
    }

    public void securityOperations_grantSystemPermission(UserPass userpass, String user, PSystemPermission perm, org.apache.thrift.async.AsyncMethodCallback<securityOperations_grantSystemPermission_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      securityOperations_grantSystemPermission_call method_call = new securityOperations_grantSystemPermission_call(userpass, user, perm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class securityOperations_grantSystemPermission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String user;
      private PSystemPermission perm;
      public securityOperations_grantSystemPermission_call(UserPass userpass, String user, PSystemPermission perm, org.apache.thrift.async.AsyncMethodCallback<securityOperations_grantSystemPermission_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.user = user;
        this.perm = perm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("securityOperations_grantSystemPermission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        securityOperations_grantSystemPermission_args args = new securityOperations_grantSystemPermission_args();
        args.setUserpass(userpass);
        args.setUser(user);
        args.setPerm(perm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_securityOperations_grantSystemPermission();
      }
    }

    public void securityOperations_grantTablePermission(UserPass userpass, String user, String table, PTablePermission perm, org.apache.thrift.async.AsyncMethodCallback<securityOperations_grantTablePermission_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      securityOperations_grantTablePermission_call method_call = new securityOperations_grantTablePermission_call(userpass, user, table, perm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class securityOperations_grantTablePermission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String user;
      private String table;
      private PTablePermission perm;
      public securityOperations_grantTablePermission_call(UserPass userpass, String user, String table, PTablePermission perm, org.apache.thrift.async.AsyncMethodCallback<securityOperations_grantTablePermission_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.user = user;
        this.table = table;
        this.perm = perm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("securityOperations_grantTablePermission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        securityOperations_grantTablePermission_args args = new securityOperations_grantTablePermission_args();
        args.setUserpass(userpass);
        args.setUser(user);
        args.setTable(table);
        args.setPerm(perm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_securityOperations_grantTablePermission();
      }
    }

    public void securityOperations_hasSystemPermission(UserPass userpass, String user, PSystemPermission perm, org.apache.thrift.async.AsyncMethodCallback<securityOperations_hasSystemPermission_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      securityOperations_hasSystemPermission_call method_call = new securityOperations_hasSystemPermission_call(userpass, user, perm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class securityOperations_hasSystemPermission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String user;
      private PSystemPermission perm;
      public securityOperations_hasSystemPermission_call(UserPass userpass, String user, PSystemPermission perm, org.apache.thrift.async.AsyncMethodCallback<securityOperations_hasSystemPermission_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.user = user;
        this.perm = perm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("securityOperations_hasSystemPermission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        securityOperations_hasSystemPermission_args args = new securityOperations_hasSystemPermission_args();
        args.setUserpass(userpass);
        args.setUser(user);
        args.setPerm(perm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_securityOperations_hasSystemPermission();
      }
    }

    public void securityOperations_hasTablePermission(UserPass userpass, String user, String table, PTablePermission perm, org.apache.thrift.async.AsyncMethodCallback<securityOperations_hasTablePermission_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      securityOperations_hasTablePermission_call method_call = new securityOperations_hasTablePermission_call(userpass, user, table, perm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class securityOperations_hasTablePermission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String user;
      private String table;
      private PTablePermission perm;
      public securityOperations_hasTablePermission_call(UserPass userpass, String user, String table, PTablePermission perm, org.apache.thrift.async.AsyncMethodCallback<securityOperations_hasTablePermission_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.user = user;
        this.table = table;
        this.perm = perm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("securityOperations_hasTablePermission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        securityOperations_hasTablePermission_args args = new securityOperations_hasTablePermission_args();
        args.setUserpass(userpass);
        args.setUser(user);
        args.setTable(table);
        args.setPerm(perm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_securityOperations_hasTablePermission();
      }
    }

    public void securityOperations_listUsers(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<securityOperations_listUsers_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      securityOperations_listUsers_call method_call = new securityOperations_listUsers_call(userpass, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class securityOperations_listUsers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      public securityOperations_listUsers_call(UserPass userpass, org.apache.thrift.async.AsyncMethodCallback<securityOperations_listUsers_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("securityOperations_listUsers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        securityOperations_listUsers_args args = new securityOperations_listUsers_args();
        args.setUserpass(userpass);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<String> getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_securityOperations_listUsers();
      }
    }

    public void securityOperations_revokeSystemPermission(UserPass userpass, String user, PSystemPermission perm, org.apache.thrift.async.AsyncMethodCallback<securityOperations_revokeSystemPermission_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      securityOperations_revokeSystemPermission_call method_call = new securityOperations_revokeSystemPermission_call(userpass, user, perm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class securityOperations_revokeSystemPermission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String user;
      private PSystemPermission perm;
      public securityOperations_revokeSystemPermission_call(UserPass userpass, String user, PSystemPermission perm, org.apache.thrift.async.AsyncMethodCallback<securityOperations_revokeSystemPermission_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.user = user;
        this.perm = perm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("securityOperations_revokeSystemPermission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        securityOperations_revokeSystemPermission_args args = new securityOperations_revokeSystemPermission_args();
        args.setUserpass(userpass);
        args.setUser(user);
        args.setPerm(perm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_securityOperations_revokeSystemPermission();
      }
    }

    public void securityOperations_revokeTablePermission(UserPass userpass, String user, String table, PTablePermission perm, org.apache.thrift.async.AsyncMethodCallback<securityOperations_revokeTablePermission_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      securityOperations_revokeTablePermission_call method_call = new securityOperations_revokeTablePermission_call(userpass, user, table, perm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class securityOperations_revokeTablePermission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String user;
      private String table;
      private PTablePermission perm;
      public securityOperations_revokeTablePermission_call(UserPass userpass, String user, String table, PTablePermission perm, org.apache.thrift.async.AsyncMethodCallback<securityOperations_revokeTablePermission_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.user = user;
        this.table = table;
        this.perm = perm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("securityOperations_revokeTablePermission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        securityOperations_revokeTablePermission_args args = new securityOperations_revokeTablePermission_args();
        args.setUserpass(userpass);
        args.setUser(user);
        args.setTable(table);
        args.setPerm(perm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AccumuloException, AccumuloSecurityException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_securityOperations_revokeTablePermission();
      }
    }

    public void createBatchScanner(UserPass userpass, String tableName, Set<String> authorizations, PIteratorSetting iteratorSetting, List<PRange> range, org.apache.thrift.async.AsyncMethodCallback<createBatchScanner_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createBatchScanner_call method_call = new createBatchScanner_call(userpass, tableName, authorizations, iteratorSetting, range, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createBatchScanner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      private Set<String> authorizations;
      private PIteratorSetting iteratorSetting;
      private List<PRange> range;
      public createBatchScanner_call(UserPass userpass, String tableName, Set<String> authorizations, PIteratorSetting iteratorSetting, List<PRange> range, org.apache.thrift.async.AsyncMethodCallback<createBatchScanner_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
        this.authorizations = authorizations;
        this.iteratorSetting = iteratorSetting;
        this.range = range;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createBatchScanner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createBatchScanner_args args = new createBatchScanner_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.setAuthorizations(authorizations);
        args.setIteratorSetting(iteratorSetting);
        args.setRange(range);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createBatchScanner();
      }
    }

    public void createScanner(UserPass userpass, String tableName, Set<String> authorizations, PIteratorSetting iteratorSetting, PRange range, org.apache.thrift.async.AsyncMethodCallback<createScanner_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createScanner_call method_call = new createScanner_call(userpass, tableName, authorizations, iteratorSetting, range, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createScanner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      private Set<String> authorizations;
      private PIteratorSetting iteratorSetting;
      private PRange range;
      public createScanner_call(UserPass userpass, String tableName, Set<String> authorizations, PIteratorSetting iteratorSetting, PRange range, org.apache.thrift.async.AsyncMethodCallback<createScanner_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
        this.authorizations = authorizations;
        this.iteratorSetting = iteratorSetting;
        this.range = range;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createScanner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createScanner_args args = new createScanner_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.setAuthorizations(authorizations);
        args.setIteratorSetting(iteratorSetting);
        args.setRange(range);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createScanner();
      }
    }

    public void scanner_hasnext(String scanner, org.apache.thrift.async.AsyncMethodCallback<scanner_hasnext_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scanner_hasnext_call method_call = new scanner_hasnext_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scanner_hasnext_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String scanner;
      public scanner_hasnext_call(String scanner, org.apache.thrift.async.AsyncMethodCallback<scanner_hasnext_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scanner_hasnext", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scanner_hasnext_args args = new scanner_hasnext_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_scanner_hasnext();
      }
    }

    public void scanner_next(String scanner, org.apache.thrift.async.AsyncMethodCallback<scanner_next_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scanner_next_call method_call = new scanner_next_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scanner_next_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String scanner;
      public scanner_next_call(String scanner, org.apache.thrift.async.AsyncMethodCallback<scanner_next_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scanner_next", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scanner_next_args args = new scanner_next_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public KeyValueAndPeek getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_scanner_next();
      }
    }

    public void scanner_next_k(String scanner, int k, org.apache.thrift.async.AsyncMethodCallback<scanner_next_k_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scanner_next_k_call method_call = new scanner_next_k_call(scanner, k, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scanner_next_k_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String scanner;
      private int k;
      public scanner_next_k_call(String scanner, int k, org.apache.thrift.async.AsyncMethodCallback<scanner_next_k_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
        this.k = k;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scanner_next_k", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scanner_next_k_args args = new scanner_next_k_args();
        args.setScanner(scanner);
        args.setK(k);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PScanResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_scanner_next_k();
      }
    }

    public void close_scanner(String scanner, org.apache.thrift.async.AsyncMethodCallback<close_scanner_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      close_scanner_call method_call = new close_scanner_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class close_scanner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String scanner;
      public close_scanner_call(String scanner, org.apache.thrift.async.AsyncMethodCallback<close_scanner_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("close_scanner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        close_scanner_args args = new close_scanner_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_close_scanner();
      }
    }

    public void updateAndFlush(UserPass userpass, String tableName, Map<ByteBuffer,List<PColumnUpdate>> cells, Map<ByteBuffer,List<PColumn>> deletedCells, org.apache.thrift.async.AsyncMethodCallback<updateAndFlush_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAndFlush_call method_call = new updateAndFlush_call(userpass, tableName, cells, deletedCells, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateAndFlush_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      private Map<ByteBuffer,List<PColumnUpdate>> cells;
      private Map<ByteBuffer,List<PColumn>> deletedCells;
      public updateAndFlush_call(UserPass userpass, String tableName, Map<ByteBuffer,List<PColumnUpdate>> cells, Map<ByteBuffer,List<PColumn>> deletedCells, org.apache.thrift.async.AsyncMethodCallback<updateAndFlush_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
        this.cells = cells;
        this.deletedCells = deletedCells;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAndFlush", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAndFlush_args args = new updateAndFlush_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.setCells(cells);
        args.setDeletedCells(deletedCells);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateAndFlush();
      }
    }

    public void createWriter(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<createWriter_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createWriter_call method_call = new createWriter_call(userpass, tableName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createWriter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserPass userpass;
      private String tableName;
      public createWriter_call(UserPass userpass, String tableName, org.apache.thrift.async.AsyncMethodCallback<createWriter_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userpass = userpass;
        this.tableName = tableName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createWriter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createWriter_args args = new createWriter_args();
        args.setUserpass(userpass);
        args.setTableName(tableName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createWriter();
      }
    }

    public void writer_update(String writer, Map<ByteBuffer,List<PColumnUpdate>> cells, Map<ByteBuffer,List<PColumn>> deletedCells, org.apache.thrift.async.AsyncMethodCallback<writer_update_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writer_update_call method_call = new writer_update_call(writer, cells, deletedCells, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writer_update_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String writer;
      private Map<ByteBuffer,List<PColumnUpdate>> cells;
      private Map<ByteBuffer,List<PColumn>> deletedCells;
      public writer_update_call(String writer, Map<ByteBuffer,List<PColumnUpdate>> cells, Map<ByteBuffer,List<PColumn>> deletedCells, org.apache.thrift.async.AsyncMethodCallback<writer_update_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.writer = writer;
        this.cells = cells;
        this.deletedCells = deletedCells;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writer_update", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writer_update_args args = new writer_update_args();
        args.setWriter(writer);
        args.setCells(cells);
        args.setDeletedCells(deletedCells);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void writer_flush(String writer, org.apache.thrift.async.AsyncMethodCallback<writer_flush_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writer_flush_call method_call = new writer_flush_call(writer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writer_flush_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String writer;
      public writer_flush_call(String writer, org.apache.thrift.async.AsyncMethodCallback<writer_flush_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.writer = writer;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writer_flush", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writer_flush_args args = new writer_flush_args();
        args.setWriter(writer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_writer_flush();
      }
    }

    public void writer_close(String writer, org.apache.thrift.async.AsyncMethodCallback<writer_close_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writer_close_call method_call = new writer_close_call(writer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writer_close_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String writer;
      public writer_close_call(String writer, org.apache.thrift.async.AsyncMethodCallback<writer_close_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.writer = writer;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writer_close", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writer_close_args args = new writer_close_args();
        args.setWriter(writer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_writer_close();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("tableOperations_addConstraint", new tableOperations_addConstraint());
      processMap.put("tableOperations_addSplits", new tableOperations_addSplits());
      processMap.put("tableOperations_clearLocatorCache", new tableOperations_clearLocatorCache());
      processMap.put("tableOperations_compact", new tableOperations_compact());
      processMap.put("tableOperations_create", new tableOperations_create());
      processMap.put("tableOperations_delete", new tableOperations_delete());
      processMap.put("tableOperations_deleteRows", new tableOperations_deleteRows());
      processMap.put("tableOperations_exists", new tableOperations_exists());
      processMap.put("tableOperations_flush", new tableOperations_flush());
      processMap.put("tableOperations_getLocalityGroups", new tableOperations_getLocalityGroups());
      processMap.put("tableOperations_getMaxRow", new tableOperations_getMaxRow());
      processMap.put("tableOperations_getProperties", new tableOperations_getProperties());
      processMap.put("tableOperations_getSplits", new tableOperations_getSplits());
      processMap.put("tableOperations_list", new tableOperations_list());
      processMap.put("tableOperations_listConstraints", new tableOperations_listConstraints());
      processMap.put("tableOperations_merge", new tableOperations_merge());
      processMap.put("tableOperations_offline", new tableOperations_offline());
      processMap.put("tableOperations_online", new tableOperations_online());
      processMap.put("tableOperations_removeConstraint", new tableOperations_removeConstraint());
      processMap.put("tableOperations_removeProperty", new tableOperations_removeProperty());
      processMap.put("tableOperations_rename", new tableOperations_rename());
      processMap.put("tableOperations_setLocalityGroups", new tableOperations_setLocalityGroups());
      processMap.put("tableOperations_setProperty", new tableOperations_setProperty());
      processMap.put("tableOperations_tableIdMap", new tableOperations_tableIdMap());
      processMap.put("instanceOperations_getSiteConfiguration", new instanceOperations_getSiteConfiguration());
      processMap.put("instanceOperations_getSystemConfiguration", new instanceOperations_getSystemConfiguration());
      processMap.put("instanceOperations_getTabletServers", new instanceOperations_getTabletServers());
      processMap.put("instanceOperations_removeProperty", new instanceOperations_removeProperty());
      processMap.put("instanceOperations_setProperty", new instanceOperations_setProperty());
      processMap.put("instanceOperations_testClassLoad", new instanceOperations_testClassLoad());
      processMap.put("securityOperations_authenticateUser", new securityOperations_authenticateUser());
      processMap.put("securityOperations_changeUserAuthorizations", new securityOperations_changeUserAuthorizations());
      processMap.put("securityOperations_changeUserPassword", new securityOperations_changeUserPassword());
      processMap.put("securityOperations_createUser", new securityOperations_createUser());
      processMap.put("securityOperations_dropUser", new securityOperations_dropUser());
      processMap.put("securityOperations_getUserAuthorizations", new securityOperations_getUserAuthorizations());
      processMap.put("securityOperations_grantSystemPermission", new securityOperations_grantSystemPermission());
      processMap.put("securityOperations_grantTablePermission", new securityOperations_grantTablePermission());
      processMap.put("securityOperations_hasSystemPermission", new securityOperations_hasSystemPermission());
      processMap.put("securityOperations_hasTablePermission", new securityOperations_hasTablePermission());
      processMap.put("securityOperations_listUsers", new securityOperations_listUsers());
      processMap.put("securityOperations_revokeSystemPermission", new securityOperations_revokeSystemPermission());
      processMap.put("securityOperations_revokeTablePermission", new securityOperations_revokeTablePermission());
      processMap.put("createBatchScanner", new createBatchScanner());
      processMap.put("createScanner", new createScanner());
      processMap.put("scanner_hasnext", new scanner_hasnext());
      processMap.put("scanner_next", new scanner_next());
      processMap.put("scanner_next_k", new scanner_next_k());
      processMap.put("close_scanner", new close_scanner());
      processMap.put("updateAndFlush", new updateAndFlush());
      processMap.put("createWriter", new createWriter());
      processMap.put("writer_update", new writer_update());
      processMap.put("writer_flush", new writer_flush());
      processMap.put("writer_close", new writer_close());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        result.success = iface.ping(args.userpass);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class tableOperations_addConstraint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_addConstraint_args> {
      public tableOperations_addConstraint() {
        super("tableOperations_addConstraint");
      }

      public tableOperations_addConstraint_args getEmptyArgsInstance() {
        return new tableOperations_addConstraint_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_addConstraint_result getResult(I iface, tableOperations_addConstraint_args args) throws org.apache.thrift.TException {
        tableOperations_addConstraint_result result = new tableOperations_addConstraint_result();
        try {
          result.success = iface.tableOperations_addConstraint(args.userpass, args.tableName, args.constraintClassName);
          result.setSuccessIsSet(true);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        } catch (TableNotFoundException ouch3) {
          result.ouch3 = ouch3;
        }
        return result;
      }
    }

    public static class tableOperations_addSplits<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_addSplits_args> {
      public tableOperations_addSplits() {
        super("tableOperations_addSplits");
      }

      public tableOperations_addSplits_args getEmptyArgsInstance() {
        return new tableOperations_addSplits_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_addSplits_result getResult(I iface, tableOperations_addSplits_args args) throws org.apache.thrift.TException {
        tableOperations_addSplits_result result = new tableOperations_addSplits_result();
        try {
          iface.tableOperations_addSplits(args.userpass, args.tableName, args.splits);
        } catch (TableNotFoundException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloException ouch2) {
          result.ouch2 = ouch2;
        } catch (AccumuloSecurityException ouch3) {
          result.ouch3 = ouch3;
        }
        return result;
      }
    }

    public static class tableOperations_clearLocatorCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_clearLocatorCache_args> {
      public tableOperations_clearLocatorCache() {
        super("tableOperations_clearLocatorCache");
      }

      public tableOperations_clearLocatorCache_args getEmptyArgsInstance() {
        return new tableOperations_clearLocatorCache_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_clearLocatorCache_result getResult(I iface, tableOperations_clearLocatorCache_args args) throws org.apache.thrift.TException {
        tableOperations_clearLocatorCache_result result = new tableOperations_clearLocatorCache_result();
        try {
          iface.tableOperations_clearLocatorCache(args.userpass, args.tableName);
        } catch (TableNotFoundException ouch1) {
          result.ouch1 = ouch1;
        }
        return result;
      }
    }

    public static class tableOperations_compact<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_compact_args> {
      public tableOperations_compact() {
        super("tableOperations_compact");
      }

      public tableOperations_compact_args getEmptyArgsInstance() {
        return new tableOperations_compact_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_compact_result getResult(I iface, tableOperations_compact_args args) throws org.apache.thrift.TException {
        tableOperations_compact_result result = new tableOperations_compact_result();
        try {
          iface.tableOperations_compact(args.userpass, args.tableName, args.startRow, args.endRow, args.flush, args.wait);
        } catch (AccumuloSecurityException ouch1) {
          result.ouch1 = ouch1;
        } catch (TableNotFoundException ouch2) {
          result.ouch2 = ouch2;
        } catch (AccumuloException ouch3) {
          result.ouch3 = ouch3;
        }
        return result;
      }
    }

    public static class tableOperations_create<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_create_args> {
      public tableOperations_create() {
        super("tableOperations_create");
      }

      public tableOperations_create_args getEmptyArgsInstance() {
        return new tableOperations_create_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_create_result getResult(I iface, tableOperations_create_args args) throws org.apache.thrift.TException {
        tableOperations_create_result result = new tableOperations_create_result();
        try {
          iface.tableOperations_create(args.userpass, args.tableName);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        } catch (TableExistsException ouch3) {
          result.ouch3 = ouch3;
        }
        return result;
      }
    }

    public static class tableOperations_delete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_delete_args> {
      public tableOperations_delete() {
        super("tableOperations_delete");
      }

      public tableOperations_delete_args getEmptyArgsInstance() {
        return new tableOperations_delete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_delete_result getResult(I iface, tableOperations_delete_args args) throws org.apache.thrift.TException {
        tableOperations_delete_result result = new tableOperations_delete_result();
        try {
          iface.tableOperations_delete(args.userpass, args.tableName);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        } catch (TableNotFoundException ouch3) {
          result.ouch3 = ouch3;
        }
        return result;
      }
    }

    public static class tableOperations_deleteRows<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_deleteRows_args> {
      public tableOperations_deleteRows() {
        super("tableOperations_deleteRows");
      }

      public tableOperations_deleteRows_args getEmptyArgsInstance() {
        return new tableOperations_deleteRows_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_deleteRows_result getResult(I iface, tableOperations_deleteRows_args args) throws org.apache.thrift.TException {
        tableOperations_deleteRows_result result = new tableOperations_deleteRows_result();
        try {
          iface.tableOperations_deleteRows(args.userpass, args.tableName, args.startRow, args.endRow);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        } catch (TableNotFoundException ouch3) {
          result.ouch3 = ouch3;
        }
        return result;
      }
    }

    public static class tableOperations_exists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_exists_args> {
      public tableOperations_exists() {
        super("tableOperations_exists");
      }

      public tableOperations_exists_args getEmptyArgsInstance() {
        return new tableOperations_exists_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_exists_result getResult(I iface, tableOperations_exists_args args) throws org.apache.thrift.TException {
        tableOperations_exists_result result = new tableOperations_exists_result();
        result.success = iface.tableOperations_exists(args.userpass, args.tableName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class tableOperations_flush<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_flush_args> {
      public tableOperations_flush() {
        super("tableOperations_flush");
      }

      public tableOperations_flush_args getEmptyArgsInstance() {
        return new tableOperations_flush_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_flush_result getResult(I iface, tableOperations_flush_args args) throws org.apache.thrift.TException {
        tableOperations_flush_result result = new tableOperations_flush_result();
        try {
          iface.tableOperations_flush(args.userpass, args.tableName);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class tableOperations_getLocalityGroups<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_getLocalityGroups_args> {
      public tableOperations_getLocalityGroups() {
        super("tableOperations_getLocalityGroups");
      }

      public tableOperations_getLocalityGroups_args getEmptyArgsInstance() {
        return new tableOperations_getLocalityGroups_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_getLocalityGroups_result getResult(I iface, tableOperations_getLocalityGroups_args args) throws org.apache.thrift.TException {
        tableOperations_getLocalityGroups_result result = new tableOperations_getLocalityGroups_result();
        try {
          result.success = iface.tableOperations_getLocalityGroups(args.userpass, args.tableName);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (TableNotFoundException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class tableOperations_getMaxRow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_getMaxRow_args> {
      public tableOperations_getMaxRow() {
        super("tableOperations_getMaxRow");
      }

      public tableOperations_getMaxRow_args getEmptyArgsInstance() {
        return new tableOperations_getMaxRow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_getMaxRow_result getResult(I iface, tableOperations_getMaxRow_args args) throws org.apache.thrift.TException {
        tableOperations_getMaxRow_result result = new tableOperations_getMaxRow_result();
        try {
          result.success = iface.tableOperations_getMaxRow(args.userpass, args.tableName, args.auths, args.startRow, args.startInclusive, args.endRow, args.endInclusive);
        } catch (TableNotFoundException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloException ouch2) {
          result.ouch2 = ouch2;
        } catch (AccumuloSecurityException ouch3) {
          result.ouch3 = ouch3;
        }
        return result;
      }
    }

    public static class tableOperations_getProperties<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_getProperties_args> {
      public tableOperations_getProperties() {
        super("tableOperations_getProperties");
      }

      public tableOperations_getProperties_args getEmptyArgsInstance() {
        return new tableOperations_getProperties_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_getProperties_result getResult(I iface, tableOperations_getProperties_args args) throws org.apache.thrift.TException {
        tableOperations_getProperties_result result = new tableOperations_getProperties_result();
        try {
          result.success = iface.tableOperations_getProperties(args.userpass, args.tableName);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (TableNotFoundException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class tableOperations_getSplits<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_getSplits_args> {
      public tableOperations_getSplits() {
        super("tableOperations_getSplits");
      }

      public tableOperations_getSplits_args getEmptyArgsInstance() {
        return new tableOperations_getSplits_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_getSplits_result getResult(I iface, tableOperations_getSplits_args args) throws org.apache.thrift.TException {
        tableOperations_getSplits_result result = new tableOperations_getSplits_result();
        try {
          result.success = iface.tableOperations_getSplits(args.userpass, args.tableName, args.maxSplits);
        } catch (TableNotFoundException ouch1) {
          result.ouch1 = ouch1;
        }
        return result;
      }
    }

    public static class tableOperations_list<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_list_args> {
      public tableOperations_list() {
        super("tableOperations_list");
      }

      public tableOperations_list_args getEmptyArgsInstance() {
        return new tableOperations_list_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_list_result getResult(I iface, tableOperations_list_args args) throws org.apache.thrift.TException {
        tableOperations_list_result result = new tableOperations_list_result();
        result.success = iface.tableOperations_list(args.userpass);
        return result;
      }
    }

    public static class tableOperations_listConstraints<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_listConstraints_args> {
      public tableOperations_listConstraints() {
        super("tableOperations_listConstraints");
      }

      public tableOperations_listConstraints_args getEmptyArgsInstance() {
        return new tableOperations_listConstraints_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_listConstraints_result getResult(I iface, tableOperations_listConstraints_args args) throws org.apache.thrift.TException {
        tableOperations_listConstraints_result result = new tableOperations_listConstraints_result();
        try {
          result.success = iface.tableOperations_listConstraints(args.userpass, args.tableName);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (TableNotFoundException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class tableOperations_merge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_merge_args> {
      public tableOperations_merge() {
        super("tableOperations_merge");
      }

      public tableOperations_merge_args getEmptyArgsInstance() {
        return new tableOperations_merge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_merge_result getResult(I iface, tableOperations_merge_args args) throws org.apache.thrift.TException {
        tableOperations_merge_result result = new tableOperations_merge_result();
        try {
          iface.tableOperations_merge(args.userpass, args.tableName, args.startRow, args.endRow);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        } catch (TableNotFoundException ouch3) {
          result.ouch3 = ouch3;
        }
        return result;
      }
    }

    public static class tableOperations_offline<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_offline_args> {
      public tableOperations_offline() {
        super("tableOperations_offline");
      }

      public tableOperations_offline_args getEmptyArgsInstance() {
        return new tableOperations_offline_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_offline_result getResult(I iface, tableOperations_offline_args args) throws org.apache.thrift.TException {
        tableOperations_offline_result result = new tableOperations_offline_result();
        try {
          iface.tableOperations_offline(args.userpass, args.tableName);
        } catch (AccumuloSecurityException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloException ouch2) {
          result.ouch2 = ouch2;
        } catch (TableNotFoundException ouch3) {
          result.ouch3 = ouch3;
        }
        return result;
      }
    }

    public static class tableOperations_online<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_online_args> {
      public tableOperations_online() {
        super("tableOperations_online");
      }

      public tableOperations_online_args getEmptyArgsInstance() {
        return new tableOperations_online_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_online_result getResult(I iface, tableOperations_online_args args) throws org.apache.thrift.TException {
        tableOperations_online_result result = new tableOperations_online_result();
        try {
          iface.tableOperations_online(args.userpass, args.tableName);
        } catch (AccumuloSecurityException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloException ouch2) {
          result.ouch2 = ouch2;
        } catch (TableNotFoundException ouch3) {
          result.ouch3 = ouch3;
        }
        return result;
      }
    }

    public static class tableOperations_removeConstraint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_removeConstraint_args> {
      public tableOperations_removeConstraint() {
        super("tableOperations_removeConstraint");
      }

      public tableOperations_removeConstraint_args getEmptyArgsInstance() {
        return new tableOperations_removeConstraint_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_removeConstraint_result getResult(I iface, tableOperations_removeConstraint_args args) throws org.apache.thrift.TException {
        tableOperations_removeConstraint_result result = new tableOperations_removeConstraint_result();
        try {
          iface.tableOperations_removeConstraint(args.userpass, args.tableName, args.constraint);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class tableOperations_removeProperty<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_removeProperty_args> {
      public tableOperations_removeProperty() {
        super("tableOperations_removeProperty");
      }

      public tableOperations_removeProperty_args getEmptyArgsInstance() {
        return new tableOperations_removeProperty_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_removeProperty_result getResult(I iface, tableOperations_removeProperty_args args) throws org.apache.thrift.TException {
        tableOperations_removeProperty_result result = new tableOperations_removeProperty_result();
        try {
          iface.tableOperations_removeProperty(args.userpass, args.tableName, args.property);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class tableOperations_rename<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_rename_args> {
      public tableOperations_rename() {
        super("tableOperations_rename");
      }

      public tableOperations_rename_args getEmptyArgsInstance() {
        return new tableOperations_rename_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_rename_result getResult(I iface, tableOperations_rename_args args) throws org.apache.thrift.TException {
        tableOperations_rename_result result = new tableOperations_rename_result();
        try {
          iface.tableOperations_rename(args.userpass, args.oldTableName, args.newTableName);
        } catch (AccumuloSecurityException ouch1) {
          result.ouch1 = ouch1;
        } catch (TableNotFoundException ouch2) {
          result.ouch2 = ouch2;
        } catch (AccumuloException ouch3) {
          result.ouch3 = ouch3;
        } catch (TableExistsException ouch4) {
          result.ouch4 = ouch4;
        }
        return result;
      }
    }

    public static class tableOperations_setLocalityGroups<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_setLocalityGroups_args> {
      public tableOperations_setLocalityGroups() {
        super("tableOperations_setLocalityGroups");
      }

      public tableOperations_setLocalityGroups_args getEmptyArgsInstance() {
        return new tableOperations_setLocalityGroups_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_setLocalityGroups_result getResult(I iface, tableOperations_setLocalityGroups_args args) throws org.apache.thrift.TException {
        tableOperations_setLocalityGroups_result result = new tableOperations_setLocalityGroups_result();
        try {
          iface.tableOperations_setLocalityGroups(args.userpass, args.tableName, args.groups);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        } catch (TableNotFoundException ouch3) {
          result.ouch3 = ouch3;
        }
        return result;
      }
    }

    public static class tableOperations_setProperty<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_setProperty_args> {
      public tableOperations_setProperty() {
        super("tableOperations_setProperty");
      }

      public tableOperations_setProperty_args getEmptyArgsInstance() {
        return new tableOperations_setProperty_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_setProperty_result getResult(I iface, tableOperations_setProperty_args args) throws org.apache.thrift.TException {
        tableOperations_setProperty_result result = new tableOperations_setProperty_result();
        try {
          iface.tableOperations_setProperty(args.userpass, args.tableName, args.property, args.value);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class tableOperations_tableIdMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tableOperations_tableIdMap_args> {
      public tableOperations_tableIdMap() {
        super("tableOperations_tableIdMap");
      }

      public tableOperations_tableIdMap_args getEmptyArgsInstance() {
        return new tableOperations_tableIdMap_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tableOperations_tableIdMap_result getResult(I iface, tableOperations_tableIdMap_args args) throws org.apache.thrift.TException {
        tableOperations_tableIdMap_result result = new tableOperations_tableIdMap_result();
        result.success = iface.tableOperations_tableIdMap(args.userpass);
        return result;
      }
    }

    public static class instanceOperations_getSiteConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, instanceOperations_getSiteConfiguration_args> {
      public instanceOperations_getSiteConfiguration() {
        super("instanceOperations_getSiteConfiguration");
      }

      public instanceOperations_getSiteConfiguration_args getEmptyArgsInstance() {
        return new instanceOperations_getSiteConfiguration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public instanceOperations_getSiteConfiguration_result getResult(I iface, instanceOperations_getSiteConfiguration_args args) throws org.apache.thrift.TException {
        instanceOperations_getSiteConfiguration_result result = new instanceOperations_getSiteConfiguration_result();
        try {
          result.success = iface.instanceOperations_getSiteConfiguration(args.userpass);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class instanceOperations_getSystemConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, instanceOperations_getSystemConfiguration_args> {
      public instanceOperations_getSystemConfiguration() {
        super("instanceOperations_getSystemConfiguration");
      }

      public instanceOperations_getSystemConfiguration_args getEmptyArgsInstance() {
        return new instanceOperations_getSystemConfiguration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public instanceOperations_getSystemConfiguration_result getResult(I iface, instanceOperations_getSystemConfiguration_args args) throws org.apache.thrift.TException {
        instanceOperations_getSystemConfiguration_result result = new instanceOperations_getSystemConfiguration_result();
        try {
          result.success = iface.instanceOperations_getSystemConfiguration(args.userpass);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class instanceOperations_getTabletServers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, instanceOperations_getTabletServers_args> {
      public instanceOperations_getTabletServers() {
        super("instanceOperations_getTabletServers");
      }

      public instanceOperations_getTabletServers_args getEmptyArgsInstance() {
        return new instanceOperations_getTabletServers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public instanceOperations_getTabletServers_result getResult(I iface, instanceOperations_getTabletServers_args args) throws org.apache.thrift.TException {
        instanceOperations_getTabletServers_result result = new instanceOperations_getTabletServers_result();
        result.success = iface.instanceOperations_getTabletServers(args.userpass);
        return result;
      }
    }

    public static class instanceOperations_removeProperty<I extends Iface> extends org.apache.thrift.ProcessFunction<I, instanceOperations_removeProperty_args> {
      public instanceOperations_removeProperty() {
        super("instanceOperations_removeProperty");
      }

      public instanceOperations_removeProperty_args getEmptyArgsInstance() {
        return new instanceOperations_removeProperty_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public instanceOperations_removeProperty_result getResult(I iface, instanceOperations_removeProperty_args args) throws org.apache.thrift.TException {
        instanceOperations_removeProperty_result result = new instanceOperations_removeProperty_result();
        try {
          iface.instanceOperations_removeProperty(args.userpass, args.property);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class instanceOperations_setProperty<I extends Iface> extends org.apache.thrift.ProcessFunction<I, instanceOperations_setProperty_args> {
      public instanceOperations_setProperty() {
        super("instanceOperations_setProperty");
      }

      public instanceOperations_setProperty_args getEmptyArgsInstance() {
        return new instanceOperations_setProperty_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public instanceOperations_setProperty_result getResult(I iface, instanceOperations_setProperty_args args) throws org.apache.thrift.TException {
        instanceOperations_setProperty_result result = new instanceOperations_setProperty_result();
        try {
          iface.instanceOperations_setProperty(args.userpass, args.property, args.value);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class instanceOperations_testClassLoad<I extends Iface> extends org.apache.thrift.ProcessFunction<I, instanceOperations_testClassLoad_args> {
      public instanceOperations_testClassLoad() {
        super("instanceOperations_testClassLoad");
      }

      public instanceOperations_testClassLoad_args getEmptyArgsInstance() {
        return new instanceOperations_testClassLoad_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public instanceOperations_testClassLoad_result getResult(I iface, instanceOperations_testClassLoad_args args) throws org.apache.thrift.TException {
        instanceOperations_testClassLoad_result result = new instanceOperations_testClassLoad_result();
        try {
          result.success = iface.instanceOperations_testClassLoad(args.userpass, args.className, args.asTypeName);
          result.setSuccessIsSet(true);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class securityOperations_authenticateUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, securityOperations_authenticateUser_args> {
      public securityOperations_authenticateUser() {
        super("securityOperations_authenticateUser");
      }

      public securityOperations_authenticateUser_args getEmptyArgsInstance() {
        return new securityOperations_authenticateUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public securityOperations_authenticateUser_result getResult(I iface, securityOperations_authenticateUser_args args) throws org.apache.thrift.TException {
        securityOperations_authenticateUser_result result = new securityOperations_authenticateUser_result();
        try {
          result.success = iface.securityOperations_authenticateUser(args.userpass, args.user, args.password);
          result.setSuccessIsSet(true);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class securityOperations_changeUserAuthorizations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, securityOperations_changeUserAuthorizations_args> {
      public securityOperations_changeUserAuthorizations() {
        super("securityOperations_changeUserAuthorizations");
      }

      public securityOperations_changeUserAuthorizations_args getEmptyArgsInstance() {
        return new securityOperations_changeUserAuthorizations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public securityOperations_changeUserAuthorizations_result getResult(I iface, securityOperations_changeUserAuthorizations_args args) throws org.apache.thrift.TException {
        securityOperations_changeUserAuthorizations_result result = new securityOperations_changeUserAuthorizations_result();
        try {
          iface.securityOperations_changeUserAuthorizations(args.userpass, args.user, args.authorizations);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class securityOperations_changeUserPassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, securityOperations_changeUserPassword_args> {
      public securityOperations_changeUserPassword() {
        super("securityOperations_changeUserPassword");
      }

      public securityOperations_changeUserPassword_args getEmptyArgsInstance() {
        return new securityOperations_changeUserPassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public securityOperations_changeUserPassword_result getResult(I iface, securityOperations_changeUserPassword_args args) throws org.apache.thrift.TException {
        securityOperations_changeUserPassword_result result = new securityOperations_changeUserPassword_result();
        try {
          iface.securityOperations_changeUserPassword(args.userpass, args.user, args.password);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class securityOperations_createUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, securityOperations_createUser_args> {
      public securityOperations_createUser() {
        super("securityOperations_createUser");
      }

      public securityOperations_createUser_args getEmptyArgsInstance() {
        return new securityOperations_createUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public securityOperations_createUser_result getResult(I iface, securityOperations_createUser_args args) throws org.apache.thrift.TException {
        securityOperations_createUser_result result = new securityOperations_createUser_result();
        try {
          iface.securityOperations_createUser(args.userpass, args.user, args.password, args.authorizations);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class securityOperations_dropUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, securityOperations_dropUser_args> {
      public securityOperations_dropUser() {
        super("securityOperations_dropUser");
      }

      public securityOperations_dropUser_args getEmptyArgsInstance() {
        return new securityOperations_dropUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public securityOperations_dropUser_result getResult(I iface, securityOperations_dropUser_args args) throws org.apache.thrift.TException {
        securityOperations_dropUser_result result = new securityOperations_dropUser_result();
        try {
          iface.securityOperations_dropUser(args.userpass, args.user);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class securityOperations_getUserAuthorizations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, securityOperations_getUserAuthorizations_args> {
      public securityOperations_getUserAuthorizations() {
        super("securityOperations_getUserAuthorizations");
      }

      public securityOperations_getUserAuthorizations_args getEmptyArgsInstance() {
        return new securityOperations_getUserAuthorizations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public securityOperations_getUserAuthorizations_result getResult(I iface, securityOperations_getUserAuthorizations_args args) throws org.apache.thrift.TException {
        securityOperations_getUserAuthorizations_result result = new securityOperations_getUserAuthorizations_result();
        try {
          result.success = iface.securityOperations_getUserAuthorizations(args.userpass, args.user);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class securityOperations_grantSystemPermission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, securityOperations_grantSystemPermission_args> {
      public securityOperations_grantSystemPermission() {
        super("securityOperations_grantSystemPermission");
      }

      public securityOperations_grantSystemPermission_args getEmptyArgsInstance() {
        return new securityOperations_grantSystemPermission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public securityOperations_grantSystemPermission_result getResult(I iface, securityOperations_grantSystemPermission_args args) throws org.apache.thrift.TException {
        securityOperations_grantSystemPermission_result result = new securityOperations_grantSystemPermission_result();
        try {
          iface.securityOperations_grantSystemPermission(args.userpass, args.user, args.perm);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class securityOperations_grantTablePermission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, securityOperations_grantTablePermission_args> {
      public securityOperations_grantTablePermission() {
        super("securityOperations_grantTablePermission");
      }

      public securityOperations_grantTablePermission_args getEmptyArgsInstance() {
        return new securityOperations_grantTablePermission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public securityOperations_grantTablePermission_result getResult(I iface, securityOperations_grantTablePermission_args args) throws org.apache.thrift.TException {
        securityOperations_grantTablePermission_result result = new securityOperations_grantTablePermission_result();
        try {
          iface.securityOperations_grantTablePermission(args.userpass, args.user, args.table, args.perm);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class securityOperations_hasSystemPermission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, securityOperations_hasSystemPermission_args> {
      public securityOperations_hasSystemPermission() {
        super("securityOperations_hasSystemPermission");
      }

      public securityOperations_hasSystemPermission_args getEmptyArgsInstance() {
        return new securityOperations_hasSystemPermission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public securityOperations_hasSystemPermission_result getResult(I iface, securityOperations_hasSystemPermission_args args) throws org.apache.thrift.TException {
        securityOperations_hasSystemPermission_result result = new securityOperations_hasSystemPermission_result();
        try {
          result.success = iface.securityOperations_hasSystemPermission(args.userpass, args.user, args.perm);
          result.setSuccessIsSet(true);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class securityOperations_hasTablePermission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, securityOperations_hasTablePermission_args> {
      public securityOperations_hasTablePermission() {
        super("securityOperations_hasTablePermission");
      }

      public securityOperations_hasTablePermission_args getEmptyArgsInstance() {
        return new securityOperations_hasTablePermission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public securityOperations_hasTablePermission_result getResult(I iface, securityOperations_hasTablePermission_args args) throws org.apache.thrift.TException {
        securityOperations_hasTablePermission_result result = new securityOperations_hasTablePermission_result();
        try {
          result.success = iface.securityOperations_hasTablePermission(args.userpass, args.user, args.table, args.perm);
          result.setSuccessIsSet(true);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class securityOperations_listUsers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, securityOperations_listUsers_args> {
      public securityOperations_listUsers() {
        super("securityOperations_listUsers");
      }

      public securityOperations_listUsers_args getEmptyArgsInstance() {
        return new securityOperations_listUsers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public securityOperations_listUsers_result getResult(I iface, securityOperations_listUsers_args args) throws org.apache.thrift.TException {
        securityOperations_listUsers_result result = new securityOperations_listUsers_result();
        try {
          result.success = iface.securityOperations_listUsers(args.userpass);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class securityOperations_revokeSystemPermission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, securityOperations_revokeSystemPermission_args> {
      public securityOperations_revokeSystemPermission() {
        super("securityOperations_revokeSystemPermission");
      }

      public securityOperations_revokeSystemPermission_args getEmptyArgsInstance() {
        return new securityOperations_revokeSystemPermission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public securityOperations_revokeSystemPermission_result getResult(I iface, securityOperations_revokeSystemPermission_args args) throws org.apache.thrift.TException {
        securityOperations_revokeSystemPermission_result result = new securityOperations_revokeSystemPermission_result();
        try {
          iface.securityOperations_revokeSystemPermission(args.userpass, args.user, args.perm);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class securityOperations_revokeTablePermission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, securityOperations_revokeTablePermission_args> {
      public securityOperations_revokeTablePermission() {
        super("securityOperations_revokeTablePermission");
      }

      public securityOperations_revokeTablePermission_args getEmptyArgsInstance() {
        return new securityOperations_revokeTablePermission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public securityOperations_revokeTablePermission_result getResult(I iface, securityOperations_revokeTablePermission_args args) throws org.apache.thrift.TException {
        securityOperations_revokeTablePermission_result result = new securityOperations_revokeTablePermission_result();
        try {
          iface.securityOperations_revokeTablePermission(args.userpass, args.user, args.table, args.perm);
        } catch (AccumuloException ouch1) {
          result.ouch1 = ouch1;
        } catch (AccumuloSecurityException ouch2) {
          result.ouch2 = ouch2;
        }
        return result;
      }
    }

    public static class createBatchScanner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createBatchScanner_args> {
      public createBatchScanner() {
        super("createBatchScanner");
      }

      public createBatchScanner_args getEmptyArgsInstance() {
        return new createBatchScanner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createBatchScanner_result getResult(I iface, createBatchScanner_args args) throws org.apache.thrift.TException {
        createBatchScanner_result result = new createBatchScanner_result();
        result.success = iface.createBatchScanner(args.userpass, args.tableName, args.authorizations, args.iteratorSetting, args.range);
        return result;
      }
    }

    public static class createScanner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createScanner_args> {
      public createScanner() {
        super("createScanner");
      }

      public createScanner_args getEmptyArgsInstance() {
        return new createScanner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createScanner_result getResult(I iface, createScanner_args args) throws org.apache.thrift.TException {
        createScanner_result result = new createScanner_result();
        result.success = iface.createScanner(args.userpass, args.tableName, args.authorizations, args.iteratorSetting, args.range);
        return result;
      }
    }

    public static class scanner_hasnext<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scanner_hasnext_args> {
      public scanner_hasnext() {
        super("scanner_hasnext");
      }

      public scanner_hasnext_args getEmptyArgsInstance() {
        return new scanner_hasnext_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public scanner_hasnext_result getResult(I iface, scanner_hasnext_args args) throws org.apache.thrift.TException {
        scanner_hasnext_result result = new scanner_hasnext_result();
        result.success = iface.scanner_hasnext(args.scanner);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class scanner_next<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scanner_next_args> {
      public scanner_next() {
        super("scanner_next");
      }

      public scanner_next_args getEmptyArgsInstance() {
        return new scanner_next_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public scanner_next_result getResult(I iface, scanner_next_args args) throws org.apache.thrift.TException {
        scanner_next_result result = new scanner_next_result();
        result.success = iface.scanner_next(args.scanner);
        return result;
      }
    }

    public static class scanner_next_k<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scanner_next_k_args> {
      public scanner_next_k() {
        super("scanner_next_k");
      }

      public scanner_next_k_args getEmptyArgsInstance() {
        return new scanner_next_k_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public scanner_next_k_result getResult(I iface, scanner_next_k_args args) throws org.apache.thrift.TException {
        scanner_next_k_result result = new scanner_next_k_result();
        result.success = iface.scanner_next_k(args.scanner, args.k);
        return result;
      }
    }

    public static class close_scanner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, close_scanner_args> {
      public close_scanner() {
        super("close_scanner");
      }

      public close_scanner_args getEmptyArgsInstance() {
        return new close_scanner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public close_scanner_result getResult(I iface, close_scanner_args args) throws org.apache.thrift.TException {
        close_scanner_result result = new close_scanner_result();
        iface.close_scanner(args.scanner);
        return result;
      }
    }

    public static class updateAndFlush<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAndFlush_args> {
      public updateAndFlush() {
        super("updateAndFlush");
      }

      public updateAndFlush_args getEmptyArgsInstance() {
        return new updateAndFlush_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateAndFlush_result getResult(I iface, updateAndFlush_args args) throws org.apache.thrift.TException {
        updateAndFlush_result result = new updateAndFlush_result();
        iface.updateAndFlush(args.userpass, args.tableName, args.cells, args.deletedCells);
        return result;
      }
    }

    public static class createWriter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createWriter_args> {
      public createWriter() {
        super("createWriter");
      }

      public createWriter_args getEmptyArgsInstance() {
        return new createWriter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createWriter_result getResult(I iface, createWriter_args args) throws org.apache.thrift.TException {
        createWriter_result result = new createWriter_result();
        result.success = iface.createWriter(args.userpass, args.tableName);
        return result;
      }
    }

    public static class writer_update<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writer_update_args> {
      public writer_update() {
        super("writer_update");
      }

      public writer_update_args getEmptyArgsInstance() {
        return new writer_update_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, writer_update_args args) throws org.apache.thrift.TException {
        iface.writer_update(args.writer, args.cells, args.deletedCells);
        return null;
      }
    }

    public static class writer_flush<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writer_flush_args> {
      public writer_flush() {
        super("writer_flush");
      }

      public writer_flush_args getEmptyArgsInstance() {
        return new writer_flush_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public writer_flush_result getResult(I iface, writer_flush_args args) throws org.apache.thrift.TException {
        writer_flush_result result = new writer_flush_result();
        iface.writer_flush(args.writer);
        return result;
      }
    }

    public static class writer_close<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writer_close_args> {
      public writer_close() {
        super("writer_close");
      }

      public writer_close_args getEmptyArgsInstance() {
        return new writer_close_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public writer_close_result getResult(I iface, writer_close_args args) throws org.apache.thrift.TException {
        writer_close_result result = new writer_close_result();
        iface.writer_close(args.writer);
        return result;
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    public ping_args(
      UserPass userpass)
    {
      this();
      this.userpass = userpass;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public ping_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_args typedOther = (ping_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ping_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_result typedOther = (ping_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_addConstraint_args implements org.apache.thrift.TBase<tableOperations_addConstraint_args, tableOperations_addConstraint_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_addConstraint_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONSTRAINT_CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("constraintClassName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_addConstraint_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_addConstraint_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required
    public String constraintClassName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName"),
      CONSTRAINT_CLASS_NAME((short)3, "constraintClassName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // CONSTRAINT_CLASS_NAME
            return CONSTRAINT_CLASS_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONSTRAINT_CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("constraintClassName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_addConstraint_args.class, metaDataMap);
    }

    public tableOperations_addConstraint_args() {
    }

    public tableOperations_addConstraint_args(
      UserPass userpass,
      String tableName,
      String constraintClassName)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
      this.constraintClassName = constraintClassName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_addConstraint_args(tableOperations_addConstraint_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetConstraintClassName()) {
        this.constraintClassName = other.constraintClassName;
      }
    }

    public tableOperations_addConstraint_args deepCopy() {
      return new tableOperations_addConstraint_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
      this.constraintClassName = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_addConstraint_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_addConstraint_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public String getConstraintClassName() {
      return this.constraintClassName;
    }

    public tableOperations_addConstraint_args setConstraintClassName(String constraintClassName) {
      this.constraintClassName = constraintClassName;
      return this;
    }

    public void unsetConstraintClassName() {
      this.constraintClassName = null;
    }

    /** Returns true if field constraintClassName is set (has been assigned a value) and false otherwise */
    public boolean isSetConstraintClassName() {
      return this.constraintClassName != null;
    }

    public void setConstraintClassNameIsSet(boolean value) {
      if (!value) {
        this.constraintClassName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      case CONSTRAINT_CLASS_NAME:
        if (value == null) {
          unsetConstraintClassName();
        } else {
          setConstraintClassName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      case CONSTRAINT_CLASS_NAME:
        return getConstraintClassName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      case CONSTRAINT_CLASS_NAME:
        return isSetConstraintClassName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_addConstraint_args)
        return this.equals((tableOperations_addConstraint_args)that);
      return false;
    }

    public boolean equals(tableOperations_addConstraint_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_constraintClassName = true && this.isSetConstraintClassName();
      boolean that_present_constraintClassName = true && that.isSetConstraintClassName();
      if (this_present_constraintClassName || that_present_constraintClassName) {
        if (!(this_present_constraintClassName && that_present_constraintClassName))
          return false;
        if (!this.constraintClassName.equals(that.constraintClassName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_addConstraint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_addConstraint_args typedOther = (tableOperations_addConstraint_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConstraintClassName()).compareTo(typedOther.isSetConstraintClassName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConstraintClassName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constraintClassName, typedOther.constraintClassName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_addConstraint_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("constraintClassName:");
      if (this.constraintClassName == null) {
        sb.append("null");
      } else {
        sb.append(this.constraintClassName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_addConstraint_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_addConstraint_argsStandardScheme getScheme() {
        return new tableOperations_addConstraint_argsStandardScheme();
      }
    }

    private static class tableOperations_addConstraint_argsStandardScheme extends StandardScheme<tableOperations_addConstraint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_addConstraint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONSTRAINT_CLASS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.constraintClassName = iprot.readString();
                struct.setConstraintClassNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_addConstraint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.constraintClassName != null) {
          oprot.writeFieldBegin(CONSTRAINT_CLASS_NAME_FIELD_DESC);
          oprot.writeString(struct.constraintClassName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_addConstraint_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_addConstraint_argsTupleScheme getScheme() {
        return new tableOperations_addConstraint_argsTupleScheme();
      }
    }

    private static class tableOperations_addConstraint_argsTupleScheme extends TupleScheme<tableOperations_addConstraint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_addConstraint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        if (struct.isSetConstraintClassName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetConstraintClassName()) {
          oprot.writeString(struct.constraintClassName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_addConstraint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.constraintClassName = iprot.readString();
          struct.setConstraintClassNameIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_addConstraint_result implements org.apache.thrift.TBase<tableOperations_addConstraint_result, tableOperations_addConstraint_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_addConstraint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField OUCH3_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_addConstraint_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_addConstraint_resultTupleSchemeFactory());
    }

    public int success; // required
    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required
    public TableNotFoundException ouch3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2"),
      OUCH3((short)3, "ouch3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          case 3: // OUCH3
            return OUCH3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH3, new org.apache.thrift.meta_data.FieldMetaData("ouch3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_addConstraint_result.class, metaDataMap);
    }

    public tableOperations_addConstraint_result() {
    }

    public tableOperations_addConstraint_result(
      int success,
      AccumuloException ouch1,
      AccumuloSecurityException ouch2,
      TableNotFoundException ouch3)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
      this.ouch3 = ouch3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_addConstraint_result(tableOperations_addConstraint_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
      if (other.isSetOuch3()) {
        this.ouch3 = new TableNotFoundException(other.ouch3);
      }
    }

    public tableOperations_addConstraint_result deepCopy() {
      return new tableOperations_addConstraint_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ouch1 = null;
      this.ouch2 = null;
      this.ouch3 = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public tableOperations_addConstraint_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_addConstraint_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_addConstraint_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public TableNotFoundException getOuch3() {
      return this.ouch3;
    }

    public tableOperations_addConstraint_result setOuch3(TableNotFoundException ouch3) {
      this.ouch3 = ouch3;
      return this;
    }

    public void unsetOuch3() {
      this.ouch3 = null;
    }

    /** Returns true if field ouch3 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch3() {
      return this.ouch3 != null;
    }

    public void setOuch3IsSet(boolean value) {
      if (!value) {
        this.ouch3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      case OUCH3:
        if (value == null) {
          unsetOuch3();
        } else {
          setOuch3((TableNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      case OUCH3:
        return getOuch3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      case OUCH3:
        return isSetOuch3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_addConstraint_result)
        return this.equals((tableOperations_addConstraint_result)that);
      return false;
    }

    public boolean equals(tableOperations_addConstraint_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      boolean this_present_ouch3 = true && this.isSetOuch3();
      boolean that_present_ouch3 = true && that.isSetOuch3();
      if (this_present_ouch3 || that_present_ouch3) {
        if (!(this_present_ouch3 && that_present_ouch3))
          return false;
        if (!this.ouch3.equals(that.ouch3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_addConstraint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_addConstraint_result typedOther = (tableOperations_addConstraint_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch3()).compareTo(typedOther.isSetOuch3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch3, typedOther.ouch3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_addConstraint_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch3:");
      if (this.ouch3 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_addConstraint_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_addConstraint_resultStandardScheme getScheme() {
        return new tableOperations_addConstraint_resultStandardScheme();
      }
    }

    private static class tableOperations_addConstraint_resultStandardScheme extends StandardScheme<tableOperations_addConstraint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_addConstraint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUCH3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch3 = new TableNotFoundException();
                struct.ouch3.read(iprot);
                struct.setOuch3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_addConstraint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch3 != null) {
          oprot.writeFieldBegin(OUCH3_FIELD_DESC);
          struct.ouch3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_addConstraint_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_addConstraint_resultTupleScheme getScheme() {
        return new tableOperations_addConstraint_resultTupleScheme();
      }
    }

    private static class tableOperations_addConstraint_resultTupleScheme extends TupleScheme<tableOperations_addConstraint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_addConstraint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch1()) {
          optionals.set(1);
        }
        if (struct.isSetOuch2()) {
          optionals.set(2);
        }
        if (struct.isSetOuch3()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
        if (struct.isSetOuch3()) {
          struct.ouch3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_addConstraint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.ouch3 = new TableNotFoundException();
          struct.ouch3.read(iprot);
          struct.setOuch3IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_addSplits_args implements org.apache.thrift.TBase<tableOperations_addSplits_args, tableOperations_addSplits_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_addSplits_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SPLITS_FIELD_DESC = new org.apache.thrift.protocol.TField("splits", org.apache.thrift.protocol.TType.SET, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_addSplits_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_addSplits_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required
    public Set<String> splits; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName"),
      SPLITS((short)3, "splits");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // SPLITS
            return SPLITS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPLITS, new org.apache.thrift.meta_data.FieldMetaData("splits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_addSplits_args.class, metaDataMap);
    }

    public tableOperations_addSplits_args() {
    }

    public tableOperations_addSplits_args(
      UserPass userpass,
      String tableName,
      Set<String> splits)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
      this.splits = splits;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_addSplits_args(tableOperations_addSplits_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetSplits()) {
        Set<String> __this__splits = new HashSet<String>();
        for (String other_element : other.splits) {
          __this__splits.add(other_element);
        }
        this.splits = __this__splits;
      }
    }

    public tableOperations_addSplits_args deepCopy() {
      return new tableOperations_addSplits_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
      this.splits = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_addSplits_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_addSplits_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public int getSplitsSize() {
      return (this.splits == null) ? 0 : this.splits.size();
    }

    public java.util.Iterator<String> getSplitsIterator() {
      return (this.splits == null) ? null : this.splits.iterator();
    }

    public void addToSplits(String elem) {
      if (this.splits == null) {
        this.splits = new HashSet<String>();
      }
      this.splits.add(elem);
    }

    public Set<String> getSplits() {
      return this.splits;
    }

    public tableOperations_addSplits_args setSplits(Set<String> splits) {
      this.splits = splits;
      return this;
    }

    public void unsetSplits() {
      this.splits = null;
    }

    /** Returns true if field splits is set (has been assigned a value) and false otherwise */
    public boolean isSetSplits() {
      return this.splits != null;
    }

    public void setSplitsIsSet(boolean value) {
      if (!value) {
        this.splits = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      case SPLITS:
        if (value == null) {
          unsetSplits();
        } else {
          setSplits((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      case SPLITS:
        return getSplits();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      case SPLITS:
        return isSetSplits();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_addSplits_args)
        return this.equals((tableOperations_addSplits_args)that);
      return false;
    }

    public boolean equals(tableOperations_addSplits_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_splits = true && this.isSetSplits();
      boolean that_present_splits = true && that.isSetSplits();
      if (this_present_splits || that_present_splits) {
        if (!(this_present_splits && that_present_splits))
          return false;
        if (!this.splits.equals(that.splits))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_addSplits_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_addSplits_args typedOther = (tableOperations_addSplits_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSplits()).compareTo(typedOther.isSetSplits());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSplits()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splits, typedOther.splits);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_addSplits_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("splits:");
      if (this.splits == null) {
        sb.append("null");
      } else {
        sb.append(this.splits);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_addSplits_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_addSplits_argsStandardScheme getScheme() {
        return new tableOperations_addSplits_argsStandardScheme();
      }
    }

    private static class tableOperations_addSplits_argsStandardScheme extends StandardScheme<tableOperations_addSplits_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_addSplits_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SPLITS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set18 = iprot.readSetBegin();
                  struct.splits = new HashSet<String>(2*_set18.size);
                  for (int _i19 = 0; _i19 < _set18.size; ++_i19)
                  {
                    String _elem20; // required
                    _elem20 = iprot.readString();
                    struct.splits.add(_elem20);
                  }
                  iprot.readSetEnd();
                }
                struct.setSplitsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_addSplits_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.splits != null) {
          oprot.writeFieldBegin(SPLITS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.splits.size()));
            for (String _iter21 : struct.splits)
            {
              oprot.writeString(_iter21);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_addSplits_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_addSplits_argsTupleScheme getScheme() {
        return new tableOperations_addSplits_argsTupleScheme();
      }
    }

    private static class tableOperations_addSplits_argsTupleScheme extends TupleScheme<tableOperations_addSplits_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_addSplits_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        if (struct.isSetSplits()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetSplits()) {
          {
            oprot.writeI32(struct.splits.size());
            for (String _iter22 : struct.splits)
            {
              oprot.writeString(_iter22);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_addSplits_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TSet _set23 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.splits = new HashSet<String>(2*_set23.size);
            for (int _i24 = 0; _i24 < _set23.size; ++_i24)
            {
              String _elem25; // required
              _elem25 = iprot.readString();
              struct.splits.add(_elem25);
            }
          }
          struct.setSplitsIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_addSplits_result implements org.apache.thrift.TBase<tableOperations_addSplits_result, tableOperations_addSplits_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_addSplits_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField OUCH3_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_addSplits_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_addSplits_resultTupleSchemeFactory());
    }

    public TableNotFoundException ouch1; // required
    public AccumuloException ouch2; // required
    public AccumuloSecurityException ouch3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2"),
      OUCH3((short)3, "ouch3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          case 3: // OUCH3
            return OUCH3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH3, new org.apache.thrift.meta_data.FieldMetaData("ouch3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_addSplits_result.class, metaDataMap);
    }

    public tableOperations_addSplits_result() {
    }

    public tableOperations_addSplits_result(
      TableNotFoundException ouch1,
      AccumuloException ouch2,
      AccumuloSecurityException ouch3)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
      this.ouch3 = ouch3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_addSplits_result(tableOperations_addSplits_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new TableNotFoundException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloException(other.ouch2);
      }
      if (other.isSetOuch3()) {
        this.ouch3 = new AccumuloSecurityException(other.ouch3);
      }
    }

    public tableOperations_addSplits_result deepCopy() {
      return new tableOperations_addSplits_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
      this.ouch3 = null;
    }

    public TableNotFoundException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_addSplits_result setOuch1(TableNotFoundException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_addSplits_result setOuch2(AccumuloException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public AccumuloSecurityException getOuch3() {
      return this.ouch3;
    }

    public tableOperations_addSplits_result setOuch3(AccumuloSecurityException ouch3) {
      this.ouch3 = ouch3;
      return this;
    }

    public void unsetOuch3() {
      this.ouch3 = null;
    }

    /** Returns true if field ouch3 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch3() {
      return this.ouch3 != null;
    }

    public void setOuch3IsSet(boolean value) {
      if (!value) {
        this.ouch3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((TableNotFoundException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloException)value);
        }
        break;

      case OUCH3:
        if (value == null) {
          unsetOuch3();
        } else {
          setOuch3((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      case OUCH3:
        return getOuch3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      case OUCH3:
        return isSetOuch3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_addSplits_result)
        return this.equals((tableOperations_addSplits_result)that);
      return false;
    }

    public boolean equals(tableOperations_addSplits_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      boolean this_present_ouch3 = true && this.isSetOuch3();
      boolean that_present_ouch3 = true && that.isSetOuch3();
      if (this_present_ouch3 || that_present_ouch3) {
        if (!(this_present_ouch3 && that_present_ouch3))
          return false;
        if (!this.ouch3.equals(that.ouch3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_addSplits_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_addSplits_result typedOther = (tableOperations_addSplits_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch3()).compareTo(typedOther.isSetOuch3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch3, typedOther.ouch3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_addSplits_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch3:");
      if (this.ouch3 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_addSplits_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_addSplits_resultStandardScheme getScheme() {
        return new tableOperations_addSplits_resultStandardScheme();
      }
    }

    private static class tableOperations_addSplits_resultStandardScheme extends StandardScheme<tableOperations_addSplits_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_addSplits_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new TableNotFoundException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUCH3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch3 = new AccumuloSecurityException();
                struct.ouch3.read(iprot);
                struct.setOuch3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_addSplits_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch3 != null) {
          oprot.writeFieldBegin(OUCH3_FIELD_DESC);
          struct.ouch3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_addSplits_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_addSplits_resultTupleScheme getScheme() {
        return new tableOperations_addSplits_resultTupleScheme();
      }
    }

    private static class tableOperations_addSplits_resultTupleScheme extends TupleScheme<tableOperations_addSplits_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_addSplits_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        if (struct.isSetOuch3()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
        if (struct.isSetOuch3()) {
          struct.ouch3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_addSplits_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ouch1 = new TableNotFoundException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch3 = new AccumuloSecurityException();
          struct.ouch3.read(iprot);
          struct.setOuch3IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_clearLocatorCache_args implements org.apache.thrift.TBase<tableOperations_clearLocatorCache_args, tableOperations_clearLocatorCache_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_clearLocatorCache_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_clearLocatorCache_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_clearLocatorCache_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_clearLocatorCache_args.class, metaDataMap);
    }

    public tableOperations_clearLocatorCache_args() {
    }

    public tableOperations_clearLocatorCache_args(
      UserPass userpass,
      String tableName)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_clearLocatorCache_args(tableOperations_clearLocatorCache_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
    }

    public tableOperations_clearLocatorCache_args deepCopy() {
      return new tableOperations_clearLocatorCache_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_clearLocatorCache_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_clearLocatorCache_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_clearLocatorCache_args)
        return this.equals((tableOperations_clearLocatorCache_args)that);
      return false;
    }

    public boolean equals(tableOperations_clearLocatorCache_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_clearLocatorCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_clearLocatorCache_args typedOther = (tableOperations_clearLocatorCache_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_clearLocatorCache_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_clearLocatorCache_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_clearLocatorCache_argsStandardScheme getScheme() {
        return new tableOperations_clearLocatorCache_argsStandardScheme();
      }
    }

    private static class tableOperations_clearLocatorCache_argsStandardScheme extends StandardScheme<tableOperations_clearLocatorCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_clearLocatorCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_clearLocatorCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_clearLocatorCache_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_clearLocatorCache_argsTupleScheme getScheme() {
        return new tableOperations_clearLocatorCache_argsTupleScheme();
      }
    }

    private static class tableOperations_clearLocatorCache_argsTupleScheme extends TupleScheme<tableOperations_clearLocatorCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_clearLocatorCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_clearLocatorCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_clearLocatorCache_result implements org.apache.thrift.TBase<tableOperations_clearLocatorCache_result, tableOperations_clearLocatorCache_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_clearLocatorCache_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_clearLocatorCache_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_clearLocatorCache_resultTupleSchemeFactory());
    }

    public TableNotFoundException ouch1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_clearLocatorCache_result.class, metaDataMap);
    }

    public tableOperations_clearLocatorCache_result() {
    }

    public tableOperations_clearLocatorCache_result(
      TableNotFoundException ouch1)
    {
      this();
      this.ouch1 = ouch1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_clearLocatorCache_result(tableOperations_clearLocatorCache_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new TableNotFoundException(other.ouch1);
      }
    }

    public tableOperations_clearLocatorCache_result deepCopy() {
      return new tableOperations_clearLocatorCache_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
    }

    public TableNotFoundException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_clearLocatorCache_result setOuch1(TableNotFoundException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((TableNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_clearLocatorCache_result)
        return this.equals((tableOperations_clearLocatorCache_result)that);
      return false;
    }

    public boolean equals(tableOperations_clearLocatorCache_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_clearLocatorCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_clearLocatorCache_result typedOther = (tableOperations_clearLocatorCache_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_clearLocatorCache_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_clearLocatorCache_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_clearLocatorCache_resultStandardScheme getScheme() {
        return new tableOperations_clearLocatorCache_resultStandardScheme();
      }
    }

    private static class tableOperations_clearLocatorCache_resultStandardScheme extends StandardScheme<tableOperations_clearLocatorCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_clearLocatorCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new TableNotFoundException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_clearLocatorCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_clearLocatorCache_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_clearLocatorCache_resultTupleScheme getScheme() {
        return new tableOperations_clearLocatorCache_resultTupleScheme();
      }
    }

    private static class tableOperations_clearLocatorCache_resultTupleScheme extends TupleScheme<tableOperations_clearLocatorCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_clearLocatorCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_clearLocatorCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch1 = new TableNotFoundException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_compact_args implements org.apache.thrift.TBase<tableOperations_compact_args, tableOperations_compact_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_compact_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField START_ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("startRow", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField END_ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("endRow", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField FLUSH_FIELD_DESC = new org.apache.thrift.protocol.TField("flush", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField WAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("wait", org.apache.thrift.protocol.TType.BOOL, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_compact_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_compact_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required
    public String startRow; // required
    public String endRow; // required
    public boolean flush; // required
    public boolean wait; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName"),
      START_ROW((short)3, "startRow"),
      END_ROW((short)4, "endRow"),
      FLUSH((short)5, "flush"),
      WAIT((short)6, "wait");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // START_ROW
            return START_ROW;
          case 4: // END_ROW
            return END_ROW;
          case 5: // FLUSH
            return FLUSH;
          case 6: // WAIT
            return WAIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FLUSH_ISSET_ID = 0;
    private static final int __WAIT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_ROW, new org.apache.thrift.meta_data.FieldMetaData("startRow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_ROW, new org.apache.thrift.meta_data.FieldMetaData("endRow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FLUSH, new org.apache.thrift.meta_data.FieldMetaData("flush", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.WAIT, new org.apache.thrift.meta_data.FieldMetaData("wait", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_compact_args.class, metaDataMap);
    }

    public tableOperations_compact_args() {
    }

    public tableOperations_compact_args(
      UserPass userpass,
      String tableName,
      String startRow,
      String endRow,
      boolean flush,
      boolean wait)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
      this.startRow = startRow;
      this.endRow = endRow;
      this.flush = flush;
      setFlushIsSet(true);
      this.wait = wait;
      setWaitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_compact_args(tableOperations_compact_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetStartRow()) {
        this.startRow = other.startRow;
      }
      if (other.isSetEndRow()) {
        this.endRow = other.endRow;
      }
      this.flush = other.flush;
      this.wait = other.wait;
    }

    public tableOperations_compact_args deepCopy() {
      return new tableOperations_compact_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
      this.startRow = null;
      this.endRow = null;
      setFlushIsSet(false);
      this.flush = false;
      setWaitIsSet(false);
      this.wait = false;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_compact_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_compact_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public String getStartRow() {
      return this.startRow;
    }

    public tableOperations_compact_args setStartRow(String startRow) {
      this.startRow = startRow;
      return this;
    }

    public void unsetStartRow() {
      this.startRow = null;
    }

    /** Returns true if field startRow is set (has been assigned a value) and false otherwise */
    public boolean isSetStartRow() {
      return this.startRow != null;
    }

    public void setStartRowIsSet(boolean value) {
      if (!value) {
        this.startRow = null;
      }
    }

    public String getEndRow() {
      return this.endRow;
    }

    public tableOperations_compact_args setEndRow(String endRow) {
      this.endRow = endRow;
      return this;
    }

    public void unsetEndRow() {
      this.endRow = null;
    }

    /** Returns true if field endRow is set (has been assigned a value) and false otherwise */
    public boolean isSetEndRow() {
      return this.endRow != null;
    }

    public void setEndRowIsSet(boolean value) {
      if (!value) {
        this.endRow = null;
      }
    }

    public boolean isFlush() {
      return this.flush;
    }

    public tableOperations_compact_args setFlush(boolean flush) {
      this.flush = flush;
      setFlushIsSet(true);
      return this;
    }

    public void unsetFlush() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLUSH_ISSET_ID);
    }

    /** Returns true if field flush is set (has been assigned a value) and false otherwise */
    public boolean isSetFlush() {
      return EncodingUtils.testBit(__isset_bitfield, __FLUSH_ISSET_ID);
    }

    public void setFlushIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLUSH_ISSET_ID, value);
    }

    public boolean isWait() {
      return this.wait;
    }

    public tableOperations_compact_args setWait(boolean wait) {
      this.wait = wait;
      setWaitIsSet(true);
      return this;
    }

    public void unsetWait() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WAIT_ISSET_ID);
    }

    /** Returns true if field wait is set (has been assigned a value) and false otherwise */
    public boolean isSetWait() {
      return EncodingUtils.testBit(__isset_bitfield, __WAIT_ISSET_ID);
    }

    public void setWaitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WAIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      case START_ROW:
        if (value == null) {
          unsetStartRow();
        } else {
          setStartRow((String)value);
        }
        break;

      case END_ROW:
        if (value == null) {
          unsetEndRow();
        } else {
          setEndRow((String)value);
        }
        break;

      case FLUSH:
        if (value == null) {
          unsetFlush();
        } else {
          setFlush((Boolean)value);
        }
        break;

      case WAIT:
        if (value == null) {
          unsetWait();
        } else {
          setWait((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      case START_ROW:
        return getStartRow();

      case END_ROW:
        return getEndRow();

      case FLUSH:
        return Boolean.valueOf(isFlush());

      case WAIT:
        return Boolean.valueOf(isWait());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      case START_ROW:
        return isSetStartRow();
      case END_ROW:
        return isSetEndRow();
      case FLUSH:
        return isSetFlush();
      case WAIT:
        return isSetWait();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_compact_args)
        return this.equals((tableOperations_compact_args)that);
      return false;
    }

    public boolean equals(tableOperations_compact_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_startRow = true && this.isSetStartRow();
      boolean that_present_startRow = true && that.isSetStartRow();
      if (this_present_startRow || that_present_startRow) {
        if (!(this_present_startRow && that_present_startRow))
          return false;
        if (!this.startRow.equals(that.startRow))
          return false;
      }

      boolean this_present_endRow = true && this.isSetEndRow();
      boolean that_present_endRow = true && that.isSetEndRow();
      if (this_present_endRow || that_present_endRow) {
        if (!(this_present_endRow && that_present_endRow))
          return false;
        if (!this.endRow.equals(that.endRow))
          return false;
      }

      boolean this_present_flush = true;
      boolean that_present_flush = true;
      if (this_present_flush || that_present_flush) {
        if (!(this_present_flush && that_present_flush))
          return false;
        if (this.flush != that.flush)
          return false;
      }

      boolean this_present_wait = true;
      boolean that_present_wait = true;
      if (this_present_wait || that_present_wait) {
        if (!(this_present_wait && that_present_wait))
          return false;
        if (this.wait != that.wait)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_compact_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_compact_args typedOther = (tableOperations_compact_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartRow()).compareTo(typedOther.isSetStartRow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartRow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRow, typedOther.startRow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndRow()).compareTo(typedOther.isSetEndRow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndRow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endRow, typedOther.endRow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlush()).compareTo(typedOther.isSetFlush());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlush()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flush, typedOther.flush);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWait()).compareTo(typedOther.isSetWait());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWait()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wait, typedOther.wait);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_compact_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startRow:");
      if (this.startRow == null) {
        sb.append("null");
      } else {
        sb.append(this.startRow);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endRow:");
      if (this.endRow == null) {
        sb.append("null");
      } else {
        sb.append(this.endRow);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("flush:");
      sb.append(this.flush);
      first = false;
      if (!first) sb.append(", ");
      sb.append("wait:");
      sb.append(this.wait);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_compact_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_compact_argsStandardScheme getScheme() {
        return new tableOperations_compact_argsStandardScheme();
      }
    }

    private static class tableOperations_compact_argsStandardScheme extends StandardScheme<tableOperations_compact_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_compact_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_ROW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startRow = iprot.readString();
                struct.setStartRowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_ROW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endRow = iprot.readString();
                struct.setEndRowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FLUSH
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.flush = iprot.readBool();
                struct.setFlushIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // WAIT
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.wait = iprot.readBool();
                struct.setWaitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_compact_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.startRow != null) {
          oprot.writeFieldBegin(START_ROW_FIELD_DESC);
          oprot.writeString(struct.startRow);
          oprot.writeFieldEnd();
        }
        if (struct.endRow != null) {
          oprot.writeFieldBegin(END_ROW_FIELD_DESC);
          oprot.writeString(struct.endRow);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FLUSH_FIELD_DESC);
        oprot.writeBool(struct.flush);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WAIT_FIELD_DESC);
        oprot.writeBool(struct.wait);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_compact_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_compact_argsTupleScheme getScheme() {
        return new tableOperations_compact_argsTupleScheme();
      }
    }

    private static class tableOperations_compact_argsTupleScheme extends TupleScheme<tableOperations_compact_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_compact_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        if (struct.isSetStartRow()) {
          optionals.set(2);
        }
        if (struct.isSetEndRow()) {
          optionals.set(3);
        }
        if (struct.isSetFlush()) {
          optionals.set(4);
        }
        if (struct.isSetWait()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetStartRow()) {
          oprot.writeString(struct.startRow);
        }
        if (struct.isSetEndRow()) {
          oprot.writeString(struct.endRow);
        }
        if (struct.isSetFlush()) {
          oprot.writeBool(struct.flush);
        }
        if (struct.isSetWait()) {
          oprot.writeBool(struct.wait);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_compact_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startRow = iprot.readString();
          struct.setStartRowIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endRow = iprot.readString();
          struct.setEndRowIsSet(true);
        }
        if (incoming.get(4)) {
          struct.flush = iprot.readBool();
          struct.setFlushIsSet(true);
        }
        if (incoming.get(5)) {
          struct.wait = iprot.readBool();
          struct.setWaitIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_compact_result implements org.apache.thrift.TBase<tableOperations_compact_result, tableOperations_compact_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_compact_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField OUCH3_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_compact_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_compact_resultTupleSchemeFactory());
    }

    public AccumuloSecurityException ouch1; // required
    public TableNotFoundException ouch2; // required
    public AccumuloException ouch3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2"),
      OUCH3((short)3, "ouch3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          case 3: // OUCH3
            return OUCH3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH3, new org.apache.thrift.meta_data.FieldMetaData("ouch3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_compact_result.class, metaDataMap);
    }

    public tableOperations_compact_result() {
    }

    public tableOperations_compact_result(
      AccumuloSecurityException ouch1,
      TableNotFoundException ouch2,
      AccumuloException ouch3)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
      this.ouch3 = ouch3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_compact_result(tableOperations_compact_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloSecurityException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new TableNotFoundException(other.ouch2);
      }
      if (other.isSetOuch3()) {
        this.ouch3 = new AccumuloException(other.ouch3);
      }
    }

    public tableOperations_compact_result deepCopy() {
      return new tableOperations_compact_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
      this.ouch3 = null;
    }

    public AccumuloSecurityException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_compact_result setOuch1(AccumuloSecurityException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public TableNotFoundException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_compact_result setOuch2(TableNotFoundException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public AccumuloException getOuch3() {
      return this.ouch3;
    }

    public tableOperations_compact_result setOuch3(AccumuloException ouch3) {
      this.ouch3 = ouch3;
      return this;
    }

    public void unsetOuch3() {
      this.ouch3 = null;
    }

    /** Returns true if field ouch3 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch3() {
      return this.ouch3 != null;
    }

    public void setOuch3IsSet(boolean value) {
      if (!value) {
        this.ouch3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloSecurityException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((TableNotFoundException)value);
        }
        break;

      case OUCH3:
        if (value == null) {
          unsetOuch3();
        } else {
          setOuch3((AccumuloException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      case OUCH3:
        return getOuch3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      case OUCH3:
        return isSetOuch3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_compact_result)
        return this.equals((tableOperations_compact_result)that);
      return false;
    }

    public boolean equals(tableOperations_compact_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      boolean this_present_ouch3 = true && this.isSetOuch3();
      boolean that_present_ouch3 = true && that.isSetOuch3();
      if (this_present_ouch3 || that_present_ouch3) {
        if (!(this_present_ouch3 && that_present_ouch3))
          return false;
        if (!this.ouch3.equals(that.ouch3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_compact_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_compact_result typedOther = (tableOperations_compact_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch3()).compareTo(typedOther.isSetOuch3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch3, typedOther.ouch3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_compact_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch3:");
      if (this.ouch3 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_compact_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_compact_resultStandardScheme getScheme() {
        return new tableOperations_compact_resultStandardScheme();
      }
    }

    private static class tableOperations_compact_resultStandardScheme extends StandardScheme<tableOperations_compact_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_compact_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloSecurityException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new TableNotFoundException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUCH3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch3 = new AccumuloException();
                struct.ouch3.read(iprot);
                struct.setOuch3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_compact_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch3 != null) {
          oprot.writeFieldBegin(OUCH3_FIELD_DESC);
          struct.ouch3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_compact_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_compact_resultTupleScheme getScheme() {
        return new tableOperations_compact_resultTupleScheme();
      }
    }

    private static class tableOperations_compact_resultTupleScheme extends TupleScheme<tableOperations_compact_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_compact_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        if (struct.isSetOuch3()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
        if (struct.isSetOuch3()) {
          struct.ouch3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_compact_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloSecurityException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new TableNotFoundException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch3 = new AccumuloException();
          struct.ouch3.read(iprot);
          struct.setOuch3IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_create_args implements org.apache.thrift.TBase<tableOperations_create_args, tableOperations_create_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_create_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_create_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_create_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_create_args.class, metaDataMap);
    }

    public tableOperations_create_args() {
    }

    public tableOperations_create_args(
      UserPass userpass,
      String tableName)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_create_args(tableOperations_create_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
    }

    public tableOperations_create_args deepCopy() {
      return new tableOperations_create_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_create_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_create_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_create_args)
        return this.equals((tableOperations_create_args)that);
      return false;
    }

    public boolean equals(tableOperations_create_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_create_args typedOther = (tableOperations_create_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_create_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_create_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_create_argsStandardScheme getScheme() {
        return new tableOperations_create_argsStandardScheme();
      }
    }

    private static class tableOperations_create_argsStandardScheme extends StandardScheme<tableOperations_create_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_create_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_create_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_create_argsTupleScheme getScheme() {
        return new tableOperations_create_argsTupleScheme();
      }
    }

    private static class tableOperations_create_argsTupleScheme extends TupleScheme<tableOperations_create_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_create_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_create_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_create_result implements org.apache.thrift.TBase<tableOperations_create_result, tableOperations_create_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_create_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField OUCH3_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_create_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_create_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required
    public TableExistsException ouch3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2"),
      OUCH3((short)3, "ouch3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          case 3: // OUCH3
            return OUCH3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH3, new org.apache.thrift.meta_data.FieldMetaData("ouch3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_create_result.class, metaDataMap);
    }

    public tableOperations_create_result() {
    }

    public tableOperations_create_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2,
      TableExistsException ouch3)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
      this.ouch3 = ouch3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_create_result(tableOperations_create_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
      if (other.isSetOuch3()) {
        this.ouch3 = new TableExistsException(other.ouch3);
      }
    }

    public tableOperations_create_result deepCopy() {
      return new tableOperations_create_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
      this.ouch3 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_create_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_create_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public TableExistsException getOuch3() {
      return this.ouch3;
    }

    public tableOperations_create_result setOuch3(TableExistsException ouch3) {
      this.ouch3 = ouch3;
      return this;
    }

    public void unsetOuch3() {
      this.ouch3 = null;
    }

    /** Returns true if field ouch3 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch3() {
      return this.ouch3 != null;
    }

    public void setOuch3IsSet(boolean value) {
      if (!value) {
        this.ouch3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      case OUCH3:
        if (value == null) {
          unsetOuch3();
        } else {
          setOuch3((TableExistsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      case OUCH3:
        return getOuch3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      case OUCH3:
        return isSetOuch3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_create_result)
        return this.equals((tableOperations_create_result)that);
      return false;
    }

    public boolean equals(tableOperations_create_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      boolean this_present_ouch3 = true && this.isSetOuch3();
      boolean that_present_ouch3 = true && that.isSetOuch3();
      if (this_present_ouch3 || that_present_ouch3) {
        if (!(this_present_ouch3 && that_present_ouch3))
          return false;
        if (!this.ouch3.equals(that.ouch3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_create_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_create_result typedOther = (tableOperations_create_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch3()).compareTo(typedOther.isSetOuch3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch3, typedOther.ouch3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_create_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch3:");
      if (this.ouch3 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_create_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_create_resultStandardScheme getScheme() {
        return new tableOperations_create_resultStandardScheme();
      }
    }

    private static class tableOperations_create_resultStandardScheme extends StandardScheme<tableOperations_create_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUCH3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch3 = new TableExistsException();
                struct.ouch3.read(iprot);
                struct.setOuch3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_create_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch3 != null) {
          oprot.writeFieldBegin(OUCH3_FIELD_DESC);
          struct.ouch3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_create_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_create_resultTupleScheme getScheme() {
        return new tableOperations_create_resultTupleScheme();
      }
    }

    private static class tableOperations_create_resultTupleScheme extends TupleScheme<tableOperations_create_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_create_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        if (struct.isSetOuch3()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
        if (struct.isSetOuch3()) {
          struct.ouch3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_create_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch3 = new TableExistsException();
          struct.ouch3.read(iprot);
          struct.setOuch3IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_delete_args implements org.apache.thrift.TBase<tableOperations_delete_args, tableOperations_delete_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_delete_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_delete_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_delete_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_delete_args.class, metaDataMap);
    }

    public tableOperations_delete_args() {
    }

    public tableOperations_delete_args(
      UserPass userpass,
      String tableName)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_delete_args(tableOperations_delete_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
    }

    public tableOperations_delete_args deepCopy() {
      return new tableOperations_delete_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_delete_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_delete_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_delete_args)
        return this.equals((tableOperations_delete_args)that);
      return false;
    }

    public boolean equals(tableOperations_delete_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_delete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_delete_args typedOther = (tableOperations_delete_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_delete_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_delete_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_delete_argsStandardScheme getScheme() {
        return new tableOperations_delete_argsStandardScheme();
      }
    }

    private static class tableOperations_delete_argsStandardScheme extends StandardScheme<tableOperations_delete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_delete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_delete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_delete_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_delete_argsTupleScheme getScheme() {
        return new tableOperations_delete_argsTupleScheme();
      }
    }

    private static class tableOperations_delete_argsTupleScheme extends TupleScheme<tableOperations_delete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_delete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_delete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_delete_result implements org.apache.thrift.TBase<tableOperations_delete_result, tableOperations_delete_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_delete_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField OUCH3_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_delete_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_delete_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required
    public TableNotFoundException ouch3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2"),
      OUCH3((short)3, "ouch3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          case 3: // OUCH3
            return OUCH3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH3, new org.apache.thrift.meta_data.FieldMetaData("ouch3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_delete_result.class, metaDataMap);
    }

    public tableOperations_delete_result() {
    }

    public tableOperations_delete_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2,
      TableNotFoundException ouch3)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
      this.ouch3 = ouch3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_delete_result(tableOperations_delete_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
      if (other.isSetOuch3()) {
        this.ouch3 = new TableNotFoundException(other.ouch3);
      }
    }

    public tableOperations_delete_result deepCopy() {
      return new tableOperations_delete_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
      this.ouch3 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_delete_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_delete_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public TableNotFoundException getOuch3() {
      return this.ouch3;
    }

    public tableOperations_delete_result setOuch3(TableNotFoundException ouch3) {
      this.ouch3 = ouch3;
      return this;
    }

    public void unsetOuch3() {
      this.ouch3 = null;
    }

    /** Returns true if field ouch3 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch3() {
      return this.ouch3 != null;
    }

    public void setOuch3IsSet(boolean value) {
      if (!value) {
        this.ouch3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      case OUCH3:
        if (value == null) {
          unsetOuch3();
        } else {
          setOuch3((TableNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      case OUCH3:
        return getOuch3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      case OUCH3:
        return isSetOuch3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_delete_result)
        return this.equals((tableOperations_delete_result)that);
      return false;
    }

    public boolean equals(tableOperations_delete_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      boolean this_present_ouch3 = true && this.isSetOuch3();
      boolean that_present_ouch3 = true && that.isSetOuch3();
      if (this_present_ouch3 || that_present_ouch3) {
        if (!(this_present_ouch3 && that_present_ouch3))
          return false;
        if (!this.ouch3.equals(that.ouch3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_delete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_delete_result typedOther = (tableOperations_delete_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch3()).compareTo(typedOther.isSetOuch3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch3, typedOther.ouch3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_delete_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch3:");
      if (this.ouch3 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_delete_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_delete_resultStandardScheme getScheme() {
        return new tableOperations_delete_resultStandardScheme();
      }
    }

    private static class tableOperations_delete_resultStandardScheme extends StandardScheme<tableOperations_delete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_delete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUCH3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch3 = new TableNotFoundException();
                struct.ouch3.read(iprot);
                struct.setOuch3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_delete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch3 != null) {
          oprot.writeFieldBegin(OUCH3_FIELD_DESC);
          struct.ouch3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_delete_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_delete_resultTupleScheme getScheme() {
        return new tableOperations_delete_resultTupleScheme();
      }
    }

    private static class tableOperations_delete_resultTupleScheme extends TupleScheme<tableOperations_delete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_delete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        if (struct.isSetOuch3()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
        if (struct.isSetOuch3()) {
          struct.ouch3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_delete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch3 = new TableNotFoundException();
          struct.ouch3.read(iprot);
          struct.setOuch3IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_deleteRows_args implements org.apache.thrift.TBase<tableOperations_deleteRows_args, tableOperations_deleteRows_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_deleteRows_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField START_ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("startRow", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField END_ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("endRow", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_deleteRows_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_deleteRows_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required
    public String startRow; // required
    public String endRow; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName"),
      START_ROW((short)3, "startRow"),
      END_ROW((short)4, "endRow");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // START_ROW
            return START_ROW;
          case 4: // END_ROW
            return END_ROW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_ROW, new org.apache.thrift.meta_data.FieldMetaData("startRow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_ROW, new org.apache.thrift.meta_data.FieldMetaData("endRow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_deleteRows_args.class, metaDataMap);
    }

    public tableOperations_deleteRows_args() {
    }

    public tableOperations_deleteRows_args(
      UserPass userpass,
      String tableName,
      String startRow,
      String endRow)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
      this.startRow = startRow;
      this.endRow = endRow;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_deleteRows_args(tableOperations_deleteRows_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetStartRow()) {
        this.startRow = other.startRow;
      }
      if (other.isSetEndRow()) {
        this.endRow = other.endRow;
      }
    }

    public tableOperations_deleteRows_args deepCopy() {
      return new tableOperations_deleteRows_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
      this.startRow = null;
      this.endRow = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_deleteRows_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_deleteRows_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public String getStartRow() {
      return this.startRow;
    }

    public tableOperations_deleteRows_args setStartRow(String startRow) {
      this.startRow = startRow;
      return this;
    }

    public void unsetStartRow() {
      this.startRow = null;
    }

    /** Returns true if field startRow is set (has been assigned a value) and false otherwise */
    public boolean isSetStartRow() {
      return this.startRow != null;
    }

    public void setStartRowIsSet(boolean value) {
      if (!value) {
        this.startRow = null;
      }
    }

    public String getEndRow() {
      return this.endRow;
    }

    public tableOperations_deleteRows_args setEndRow(String endRow) {
      this.endRow = endRow;
      return this;
    }

    public void unsetEndRow() {
      this.endRow = null;
    }

    /** Returns true if field endRow is set (has been assigned a value) and false otherwise */
    public boolean isSetEndRow() {
      return this.endRow != null;
    }

    public void setEndRowIsSet(boolean value) {
      if (!value) {
        this.endRow = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      case START_ROW:
        if (value == null) {
          unsetStartRow();
        } else {
          setStartRow((String)value);
        }
        break;

      case END_ROW:
        if (value == null) {
          unsetEndRow();
        } else {
          setEndRow((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      case START_ROW:
        return getStartRow();

      case END_ROW:
        return getEndRow();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      case START_ROW:
        return isSetStartRow();
      case END_ROW:
        return isSetEndRow();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_deleteRows_args)
        return this.equals((tableOperations_deleteRows_args)that);
      return false;
    }

    public boolean equals(tableOperations_deleteRows_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_startRow = true && this.isSetStartRow();
      boolean that_present_startRow = true && that.isSetStartRow();
      if (this_present_startRow || that_present_startRow) {
        if (!(this_present_startRow && that_present_startRow))
          return false;
        if (!this.startRow.equals(that.startRow))
          return false;
      }

      boolean this_present_endRow = true && this.isSetEndRow();
      boolean that_present_endRow = true && that.isSetEndRow();
      if (this_present_endRow || that_present_endRow) {
        if (!(this_present_endRow && that_present_endRow))
          return false;
        if (!this.endRow.equals(that.endRow))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_deleteRows_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_deleteRows_args typedOther = (tableOperations_deleteRows_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartRow()).compareTo(typedOther.isSetStartRow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartRow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRow, typedOther.startRow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndRow()).compareTo(typedOther.isSetEndRow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndRow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endRow, typedOther.endRow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_deleteRows_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startRow:");
      if (this.startRow == null) {
        sb.append("null");
      } else {
        sb.append(this.startRow);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endRow:");
      if (this.endRow == null) {
        sb.append("null");
      } else {
        sb.append(this.endRow);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_deleteRows_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_deleteRows_argsStandardScheme getScheme() {
        return new tableOperations_deleteRows_argsStandardScheme();
      }
    }

    private static class tableOperations_deleteRows_argsStandardScheme extends StandardScheme<tableOperations_deleteRows_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_deleteRows_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_ROW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startRow = iprot.readString();
                struct.setStartRowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_ROW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endRow = iprot.readString();
                struct.setEndRowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_deleteRows_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.startRow != null) {
          oprot.writeFieldBegin(START_ROW_FIELD_DESC);
          oprot.writeString(struct.startRow);
          oprot.writeFieldEnd();
        }
        if (struct.endRow != null) {
          oprot.writeFieldBegin(END_ROW_FIELD_DESC);
          oprot.writeString(struct.endRow);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_deleteRows_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_deleteRows_argsTupleScheme getScheme() {
        return new tableOperations_deleteRows_argsTupleScheme();
      }
    }

    private static class tableOperations_deleteRows_argsTupleScheme extends TupleScheme<tableOperations_deleteRows_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_deleteRows_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        if (struct.isSetStartRow()) {
          optionals.set(2);
        }
        if (struct.isSetEndRow()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetStartRow()) {
          oprot.writeString(struct.startRow);
        }
        if (struct.isSetEndRow()) {
          oprot.writeString(struct.endRow);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_deleteRows_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startRow = iprot.readString();
          struct.setStartRowIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endRow = iprot.readString();
          struct.setEndRowIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_deleteRows_result implements org.apache.thrift.TBase<tableOperations_deleteRows_result, tableOperations_deleteRows_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_deleteRows_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField OUCH3_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_deleteRows_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_deleteRows_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required
    public TableNotFoundException ouch3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2"),
      OUCH3((short)3, "ouch3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          case 3: // OUCH3
            return OUCH3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH3, new org.apache.thrift.meta_data.FieldMetaData("ouch3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_deleteRows_result.class, metaDataMap);
    }

    public tableOperations_deleteRows_result() {
    }

    public tableOperations_deleteRows_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2,
      TableNotFoundException ouch3)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
      this.ouch3 = ouch3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_deleteRows_result(tableOperations_deleteRows_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
      if (other.isSetOuch3()) {
        this.ouch3 = new TableNotFoundException(other.ouch3);
      }
    }

    public tableOperations_deleteRows_result deepCopy() {
      return new tableOperations_deleteRows_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
      this.ouch3 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_deleteRows_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_deleteRows_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public TableNotFoundException getOuch3() {
      return this.ouch3;
    }

    public tableOperations_deleteRows_result setOuch3(TableNotFoundException ouch3) {
      this.ouch3 = ouch3;
      return this;
    }

    public void unsetOuch3() {
      this.ouch3 = null;
    }

    /** Returns true if field ouch3 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch3() {
      return this.ouch3 != null;
    }

    public void setOuch3IsSet(boolean value) {
      if (!value) {
        this.ouch3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      case OUCH3:
        if (value == null) {
          unsetOuch3();
        } else {
          setOuch3((TableNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      case OUCH3:
        return getOuch3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      case OUCH3:
        return isSetOuch3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_deleteRows_result)
        return this.equals((tableOperations_deleteRows_result)that);
      return false;
    }

    public boolean equals(tableOperations_deleteRows_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      boolean this_present_ouch3 = true && this.isSetOuch3();
      boolean that_present_ouch3 = true && that.isSetOuch3();
      if (this_present_ouch3 || that_present_ouch3) {
        if (!(this_present_ouch3 && that_present_ouch3))
          return false;
        if (!this.ouch3.equals(that.ouch3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_deleteRows_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_deleteRows_result typedOther = (tableOperations_deleteRows_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch3()).compareTo(typedOther.isSetOuch3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch3, typedOther.ouch3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_deleteRows_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch3:");
      if (this.ouch3 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_deleteRows_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_deleteRows_resultStandardScheme getScheme() {
        return new tableOperations_deleteRows_resultStandardScheme();
      }
    }

    private static class tableOperations_deleteRows_resultStandardScheme extends StandardScheme<tableOperations_deleteRows_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_deleteRows_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUCH3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch3 = new TableNotFoundException();
                struct.ouch3.read(iprot);
                struct.setOuch3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_deleteRows_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch3 != null) {
          oprot.writeFieldBegin(OUCH3_FIELD_DESC);
          struct.ouch3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_deleteRows_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_deleteRows_resultTupleScheme getScheme() {
        return new tableOperations_deleteRows_resultTupleScheme();
      }
    }

    private static class tableOperations_deleteRows_resultTupleScheme extends TupleScheme<tableOperations_deleteRows_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_deleteRows_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        if (struct.isSetOuch3()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
        if (struct.isSetOuch3()) {
          struct.ouch3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_deleteRows_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch3 = new TableNotFoundException();
          struct.ouch3.read(iprot);
          struct.setOuch3IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_exists_args implements org.apache.thrift.TBase<tableOperations_exists_args, tableOperations_exists_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_exists_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_exists_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_exists_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_exists_args.class, metaDataMap);
    }

    public tableOperations_exists_args() {
    }

    public tableOperations_exists_args(
      UserPass userpass,
      String tableName)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_exists_args(tableOperations_exists_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
    }

    public tableOperations_exists_args deepCopy() {
      return new tableOperations_exists_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_exists_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_exists_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_exists_args)
        return this.equals((tableOperations_exists_args)that);
      return false;
    }

    public boolean equals(tableOperations_exists_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_exists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_exists_args typedOther = (tableOperations_exists_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_exists_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_exists_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_exists_argsStandardScheme getScheme() {
        return new tableOperations_exists_argsStandardScheme();
      }
    }

    private static class tableOperations_exists_argsStandardScheme extends StandardScheme<tableOperations_exists_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_exists_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_exists_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_exists_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_exists_argsTupleScheme getScheme() {
        return new tableOperations_exists_argsTupleScheme();
      }
    }

    private static class tableOperations_exists_argsTupleScheme extends TupleScheme<tableOperations_exists_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_exists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_exists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_exists_result implements org.apache.thrift.TBase<tableOperations_exists_result, tableOperations_exists_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_exists_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_exists_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_exists_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_exists_result.class, metaDataMap);
    }

    public tableOperations_exists_result() {
    }

    public tableOperations_exists_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_exists_result(tableOperations_exists_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public tableOperations_exists_result deepCopy() {
      return new tableOperations_exists_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public tableOperations_exists_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_exists_result)
        return this.equals((tableOperations_exists_result)that);
      return false;
    }

    public boolean equals(tableOperations_exists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_exists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_exists_result typedOther = (tableOperations_exists_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_exists_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_exists_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_exists_resultStandardScheme getScheme() {
        return new tableOperations_exists_resultStandardScheme();
      }
    }

    private static class tableOperations_exists_resultStandardScheme extends StandardScheme<tableOperations_exists_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_exists_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_exists_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_exists_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_exists_resultTupleScheme getScheme() {
        return new tableOperations_exists_resultTupleScheme();
      }
    }

    private static class tableOperations_exists_resultTupleScheme extends TupleScheme<tableOperations_exists_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_exists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_exists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_flush_args implements org.apache.thrift.TBase<tableOperations_flush_args, tableOperations_flush_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_flush_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_flush_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_flush_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_flush_args.class, metaDataMap);
    }

    public tableOperations_flush_args() {
    }

    public tableOperations_flush_args(
      UserPass userpass,
      String tableName)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_flush_args(tableOperations_flush_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
    }

    public tableOperations_flush_args deepCopy() {
      return new tableOperations_flush_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_flush_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_flush_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_flush_args)
        return this.equals((tableOperations_flush_args)that);
      return false;
    }

    public boolean equals(tableOperations_flush_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_flush_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_flush_args typedOther = (tableOperations_flush_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_flush_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_flush_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_flush_argsStandardScheme getScheme() {
        return new tableOperations_flush_argsStandardScheme();
      }
    }

    private static class tableOperations_flush_argsStandardScheme extends StandardScheme<tableOperations_flush_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_flush_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_flush_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_flush_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_flush_argsTupleScheme getScheme() {
        return new tableOperations_flush_argsTupleScheme();
      }
    }

    private static class tableOperations_flush_argsTupleScheme extends TupleScheme<tableOperations_flush_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_flush_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_flush_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_flush_result implements org.apache.thrift.TBase<tableOperations_flush_result, tableOperations_flush_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_flush_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_flush_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_flush_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_flush_result.class, metaDataMap);
    }

    public tableOperations_flush_result() {
    }

    public tableOperations_flush_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_flush_result(tableOperations_flush_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public tableOperations_flush_result deepCopy() {
      return new tableOperations_flush_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_flush_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_flush_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_flush_result)
        return this.equals((tableOperations_flush_result)that);
      return false;
    }

    public boolean equals(tableOperations_flush_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_flush_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_flush_result typedOther = (tableOperations_flush_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_flush_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_flush_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_flush_resultStandardScheme getScheme() {
        return new tableOperations_flush_resultStandardScheme();
      }
    }

    private static class tableOperations_flush_resultStandardScheme extends StandardScheme<tableOperations_flush_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_flush_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_flush_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_flush_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_flush_resultTupleScheme getScheme() {
        return new tableOperations_flush_resultTupleScheme();
      }
    }

    private static class tableOperations_flush_resultTupleScheme extends TupleScheme<tableOperations_flush_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_flush_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_flush_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_getLocalityGroups_args implements org.apache.thrift.TBase<tableOperations_getLocalityGroups_args, tableOperations_getLocalityGroups_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_getLocalityGroups_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_getLocalityGroups_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_getLocalityGroups_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_getLocalityGroups_args.class, metaDataMap);
    }

    public tableOperations_getLocalityGroups_args() {
    }

    public tableOperations_getLocalityGroups_args(
      UserPass userpass,
      String tableName)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_getLocalityGroups_args(tableOperations_getLocalityGroups_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
    }

    public tableOperations_getLocalityGroups_args deepCopy() {
      return new tableOperations_getLocalityGroups_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_getLocalityGroups_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_getLocalityGroups_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_getLocalityGroups_args)
        return this.equals((tableOperations_getLocalityGroups_args)that);
      return false;
    }

    public boolean equals(tableOperations_getLocalityGroups_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_getLocalityGroups_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_getLocalityGroups_args typedOther = (tableOperations_getLocalityGroups_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_getLocalityGroups_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_getLocalityGroups_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_getLocalityGroups_argsStandardScheme getScheme() {
        return new tableOperations_getLocalityGroups_argsStandardScheme();
      }
    }

    private static class tableOperations_getLocalityGroups_argsStandardScheme extends StandardScheme<tableOperations_getLocalityGroups_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_getLocalityGroups_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_getLocalityGroups_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_getLocalityGroups_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_getLocalityGroups_argsTupleScheme getScheme() {
        return new tableOperations_getLocalityGroups_argsTupleScheme();
      }
    }

    private static class tableOperations_getLocalityGroups_argsTupleScheme extends TupleScheme<tableOperations_getLocalityGroups_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_getLocalityGroups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_getLocalityGroups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_getLocalityGroups_result implements org.apache.thrift.TBase<tableOperations_getLocalityGroups_result, tableOperations_getLocalityGroups_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_getLocalityGroups_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_getLocalityGroups_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_getLocalityGroups_resultTupleSchemeFactory());
    }

    public Map<String,Set<String>> success; // required
    public AccumuloException ouch1; // required
    public TableNotFoundException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_getLocalityGroups_result.class, metaDataMap);
    }

    public tableOperations_getLocalityGroups_result() {
    }

    public tableOperations_getLocalityGroups_result(
      Map<String,Set<String>> success,
      AccumuloException ouch1,
      TableNotFoundException ouch2)
    {
      this();
      this.success = success;
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_getLocalityGroups_result(tableOperations_getLocalityGroups_result other) {
      if (other.isSetSuccess()) {
        Map<String,Set<String>> __this__success = new HashMap<String,Set<String>>();
        for (Map.Entry<String, Set<String>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Set<String> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Set<String> __this__success_copy_value = new HashSet<String>();
          for (String other_element_value_element : other_element_value) {
            __this__success_copy_value.add(other_element_value_element);
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new TableNotFoundException(other.ouch2);
      }
    }

    public tableOperations_getLocalityGroups_result deepCopy() {
      return new tableOperations_getLocalityGroups_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Set<String> val) {
      if (this.success == null) {
        this.success = new HashMap<String,Set<String>>();
      }
      this.success.put(key, val);
    }

    public Map<String,Set<String>> getSuccess() {
      return this.success;
    }

    public tableOperations_getLocalityGroups_result setSuccess(Map<String,Set<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_getLocalityGroups_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public TableNotFoundException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_getLocalityGroups_result setOuch2(TableNotFoundException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Set<String>>)value);
        }
        break;

      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((TableNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_getLocalityGroups_result)
        return this.equals((tableOperations_getLocalityGroups_result)that);
      return false;
    }

    public boolean equals(tableOperations_getLocalityGroups_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_getLocalityGroups_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_getLocalityGroups_result typedOther = (tableOperations_getLocalityGroups_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_getLocalityGroups_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_getLocalityGroups_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_getLocalityGroups_resultStandardScheme getScheme() {
        return new tableOperations_getLocalityGroups_resultStandardScheme();
      }
    }

    private static class tableOperations_getLocalityGroups_resultStandardScheme extends StandardScheme<tableOperations_getLocalityGroups_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_getLocalityGroups_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Set<String>>(2*_map26.size);
                  for (int _i27 = 0; _i27 < _map26.size; ++_i27)
                  {
                    String _key28; // required
                    Set<String> _val29; // required
                    _key28 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TSet _set30 = iprot.readSetBegin();
                      _val29 = new HashSet<String>(2*_set30.size);
                      for (int _i31 = 0; _i31 < _set30.size; ++_i31)
                      {
                        String _elem32; // required
                        _elem32 = iprot.readString();
                        _val29.add(_elem32);
                      }
                      iprot.readSetEnd();
                    }
                    struct.success.put(_key28, _val29);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new TableNotFoundException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_getLocalityGroups_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, struct.success.size()));
            for (Map.Entry<String, Set<String>> _iter33 : struct.success.entrySet())
            {
              oprot.writeString(_iter33.getKey());
              {
                oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter33.getValue().size()));
                for (String _iter34 : _iter33.getValue())
                {
                  oprot.writeString(_iter34);
                }
                oprot.writeSetEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_getLocalityGroups_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_getLocalityGroups_resultTupleScheme getScheme() {
        return new tableOperations_getLocalityGroups_resultTupleScheme();
      }
    }

    private static class tableOperations_getLocalityGroups_resultTupleScheme extends TupleScheme<tableOperations_getLocalityGroups_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_getLocalityGroups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch1()) {
          optionals.set(1);
        }
        if (struct.isSetOuch2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Set<String>> _iter35 : struct.success.entrySet())
            {
              oprot.writeString(_iter35.getKey());
              {
                oprot.writeI32(_iter35.getValue().size());
                for (String _iter36 : _iter35.getValue())
                {
                  oprot.writeString(_iter36);
                }
              }
            }
          }
        }
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_getLocalityGroups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map37 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, iprot.readI32());
            struct.success = new HashMap<String,Set<String>>(2*_map37.size);
            for (int _i38 = 0; _i38 < _map37.size; ++_i38)
            {
              String _key39; // required
              Set<String> _val40; // required
              _key39 = iprot.readString();
              {
                org.apache.thrift.protocol.TSet _set41 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val40 = new HashSet<String>(2*_set41.size);
                for (int _i42 = 0; _i42 < _set41.size; ++_i42)
                {
                  String _elem43; // required
                  _elem43 = iprot.readString();
                  _val40.add(_elem43);
                }
              }
              struct.success.put(_key39, _val40);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch2 = new TableNotFoundException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_getMaxRow_args implements org.apache.thrift.TBase<tableOperations_getMaxRow_args, tableOperations_getMaxRow_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_getMaxRow_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHS_FIELD_DESC = new org.apache.thrift.protocol.TField("auths", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField START_ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("startRow", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField START_INCLUSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("startInclusive", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField END_ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("endRow", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField END_INCLUSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("endInclusive", org.apache.thrift.protocol.TType.BOOL, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_getMaxRow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_getMaxRow_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required
    public List<ByteBuffer> auths; // required
    public String startRow; // required
    public boolean startInclusive; // required
    public String endRow; // required
    public boolean endInclusive; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName"),
      AUTHS((short)3, "auths"),
      START_ROW((short)4, "startRow"),
      START_INCLUSIVE((short)5, "startInclusive"),
      END_ROW((short)6, "endRow"),
      END_INCLUSIVE((short)7, "endInclusive");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // AUTHS
            return AUTHS;
          case 4: // START_ROW
            return START_ROW;
          case 5: // START_INCLUSIVE
            return START_INCLUSIVE;
          case 6: // END_ROW
            return END_ROW;
          case 7: // END_INCLUSIVE
            return END_INCLUSIVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTINCLUSIVE_ISSET_ID = 0;
    private static final int __ENDINCLUSIVE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTHS, new org.apache.thrift.meta_data.FieldMetaData("auths", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      tmpMap.put(_Fields.START_ROW, new org.apache.thrift.meta_data.FieldMetaData("startRow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_INCLUSIVE, new org.apache.thrift.meta_data.FieldMetaData("startInclusive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.END_ROW, new org.apache.thrift.meta_data.FieldMetaData("endRow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_INCLUSIVE, new org.apache.thrift.meta_data.FieldMetaData("endInclusive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_getMaxRow_args.class, metaDataMap);
    }

    public tableOperations_getMaxRow_args() {
    }

    public tableOperations_getMaxRow_args(
      UserPass userpass,
      String tableName,
      List<ByteBuffer> auths,
      String startRow,
      boolean startInclusive,
      String endRow,
      boolean endInclusive)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
      this.auths = auths;
      this.startRow = startRow;
      this.startInclusive = startInclusive;
      setStartInclusiveIsSet(true);
      this.endRow = endRow;
      this.endInclusive = endInclusive;
      setEndInclusiveIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_getMaxRow_args(tableOperations_getMaxRow_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetAuths()) {
        List<ByteBuffer> __this__auths = new ArrayList<ByteBuffer>();
        for (ByteBuffer other_element : other.auths) {
          ByteBuffer temp_binary_element = org.apache.thrift.TBaseHelper.copyBinary(other_element);
;
          __this__auths.add(temp_binary_element);
        }
        this.auths = __this__auths;
      }
      if (other.isSetStartRow()) {
        this.startRow = other.startRow;
      }
      this.startInclusive = other.startInclusive;
      if (other.isSetEndRow()) {
        this.endRow = other.endRow;
      }
      this.endInclusive = other.endInclusive;
    }

    public tableOperations_getMaxRow_args deepCopy() {
      return new tableOperations_getMaxRow_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
      this.auths = null;
      this.startRow = null;
      setStartInclusiveIsSet(false);
      this.startInclusive = false;
      this.endRow = null;
      setEndInclusiveIsSet(false);
      this.endInclusive = false;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_getMaxRow_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_getMaxRow_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public int getAuthsSize() {
      return (this.auths == null) ? 0 : this.auths.size();
    }

    public java.util.Iterator<ByteBuffer> getAuthsIterator() {
      return (this.auths == null) ? null : this.auths.iterator();
    }

    public void addToAuths(ByteBuffer elem) {
      if (this.auths == null) {
        this.auths = new ArrayList<ByteBuffer>();
      }
      this.auths.add(elem);
    }

    public List<ByteBuffer> getAuths() {
      return this.auths;
    }

    public tableOperations_getMaxRow_args setAuths(List<ByteBuffer> auths) {
      this.auths = auths;
      return this;
    }

    public void unsetAuths() {
      this.auths = null;
    }

    /** Returns true if field auths is set (has been assigned a value) and false otherwise */
    public boolean isSetAuths() {
      return this.auths != null;
    }

    public void setAuthsIsSet(boolean value) {
      if (!value) {
        this.auths = null;
      }
    }

    public String getStartRow() {
      return this.startRow;
    }

    public tableOperations_getMaxRow_args setStartRow(String startRow) {
      this.startRow = startRow;
      return this;
    }

    public void unsetStartRow() {
      this.startRow = null;
    }

    /** Returns true if field startRow is set (has been assigned a value) and false otherwise */
    public boolean isSetStartRow() {
      return this.startRow != null;
    }

    public void setStartRowIsSet(boolean value) {
      if (!value) {
        this.startRow = null;
      }
    }

    public boolean isStartInclusive() {
      return this.startInclusive;
    }

    public tableOperations_getMaxRow_args setStartInclusive(boolean startInclusive) {
      this.startInclusive = startInclusive;
      setStartInclusiveIsSet(true);
      return this;
    }

    public void unsetStartInclusive() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINCLUSIVE_ISSET_ID);
    }

    /** Returns true if field startInclusive is set (has been assigned a value) and false otherwise */
    public boolean isSetStartInclusive() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTINCLUSIVE_ISSET_ID);
    }

    public void setStartInclusiveIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINCLUSIVE_ISSET_ID, value);
    }

    public String getEndRow() {
      return this.endRow;
    }

    public tableOperations_getMaxRow_args setEndRow(String endRow) {
      this.endRow = endRow;
      return this;
    }

    public void unsetEndRow() {
      this.endRow = null;
    }

    /** Returns true if field endRow is set (has been assigned a value) and false otherwise */
    public boolean isSetEndRow() {
      return this.endRow != null;
    }

    public void setEndRowIsSet(boolean value) {
      if (!value) {
        this.endRow = null;
      }
    }

    public boolean isEndInclusive() {
      return this.endInclusive;
    }

    public tableOperations_getMaxRow_args setEndInclusive(boolean endInclusive) {
      this.endInclusive = endInclusive;
      setEndInclusiveIsSet(true);
      return this;
    }

    public void unsetEndInclusive() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDINCLUSIVE_ISSET_ID);
    }

    /** Returns true if field endInclusive is set (has been assigned a value) and false otherwise */
    public boolean isSetEndInclusive() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDINCLUSIVE_ISSET_ID);
    }

    public void setEndInclusiveIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDINCLUSIVE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      case AUTHS:
        if (value == null) {
          unsetAuths();
        } else {
          setAuths((List<ByteBuffer>)value);
        }
        break;

      case START_ROW:
        if (value == null) {
          unsetStartRow();
        } else {
          setStartRow((String)value);
        }
        break;

      case START_INCLUSIVE:
        if (value == null) {
          unsetStartInclusive();
        } else {
          setStartInclusive((Boolean)value);
        }
        break;

      case END_ROW:
        if (value == null) {
          unsetEndRow();
        } else {
          setEndRow((String)value);
        }
        break;

      case END_INCLUSIVE:
        if (value == null) {
          unsetEndInclusive();
        } else {
          setEndInclusive((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      case AUTHS:
        return getAuths();

      case START_ROW:
        return getStartRow();

      case START_INCLUSIVE:
        return Boolean.valueOf(isStartInclusive());

      case END_ROW:
        return getEndRow();

      case END_INCLUSIVE:
        return Boolean.valueOf(isEndInclusive());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      case AUTHS:
        return isSetAuths();
      case START_ROW:
        return isSetStartRow();
      case START_INCLUSIVE:
        return isSetStartInclusive();
      case END_ROW:
        return isSetEndRow();
      case END_INCLUSIVE:
        return isSetEndInclusive();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_getMaxRow_args)
        return this.equals((tableOperations_getMaxRow_args)that);
      return false;
    }

    public boolean equals(tableOperations_getMaxRow_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_auths = true && this.isSetAuths();
      boolean that_present_auths = true && that.isSetAuths();
      if (this_present_auths || that_present_auths) {
        if (!(this_present_auths && that_present_auths))
          return false;
        if (!this.auths.equals(that.auths))
          return false;
      }

      boolean this_present_startRow = true && this.isSetStartRow();
      boolean that_present_startRow = true && that.isSetStartRow();
      if (this_present_startRow || that_present_startRow) {
        if (!(this_present_startRow && that_present_startRow))
          return false;
        if (!this.startRow.equals(that.startRow))
          return false;
      }

      boolean this_present_startInclusive = true;
      boolean that_present_startInclusive = true;
      if (this_present_startInclusive || that_present_startInclusive) {
        if (!(this_present_startInclusive && that_present_startInclusive))
          return false;
        if (this.startInclusive != that.startInclusive)
          return false;
      }

      boolean this_present_endRow = true && this.isSetEndRow();
      boolean that_present_endRow = true && that.isSetEndRow();
      if (this_present_endRow || that_present_endRow) {
        if (!(this_present_endRow && that_present_endRow))
          return false;
        if (!this.endRow.equals(that.endRow))
          return false;
      }

      boolean this_present_endInclusive = true;
      boolean that_present_endInclusive = true;
      if (this_present_endInclusive || that_present_endInclusive) {
        if (!(this_present_endInclusive && that_present_endInclusive))
          return false;
        if (this.endInclusive != that.endInclusive)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_getMaxRow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_getMaxRow_args typedOther = (tableOperations_getMaxRow_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuths()).compareTo(typedOther.isSetAuths());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuths()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auths, typedOther.auths);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartRow()).compareTo(typedOther.isSetStartRow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartRow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRow, typedOther.startRow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartInclusive()).compareTo(typedOther.isSetStartInclusive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartInclusive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startInclusive, typedOther.startInclusive);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndRow()).compareTo(typedOther.isSetEndRow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndRow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endRow, typedOther.endRow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndInclusive()).compareTo(typedOther.isSetEndInclusive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndInclusive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endInclusive, typedOther.endInclusive);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_getMaxRow_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auths:");
      if (this.auths == null) {
        sb.append("null");
      } else {
        sb.append(this.auths);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startRow:");
      if (this.startRow == null) {
        sb.append("null");
      } else {
        sb.append(this.startRow);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startInclusive:");
      sb.append(this.startInclusive);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endRow:");
      if (this.endRow == null) {
        sb.append("null");
      } else {
        sb.append(this.endRow);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endInclusive:");
      sb.append(this.endInclusive);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_getMaxRow_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_getMaxRow_argsStandardScheme getScheme() {
        return new tableOperations_getMaxRow_argsStandardScheme();
      }
    }

    private static class tableOperations_getMaxRow_argsStandardScheme extends StandardScheme<tableOperations_getMaxRow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_getMaxRow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                  struct.auths = new ArrayList<ByteBuffer>(_list44.size);
                  for (int _i45 = 0; _i45 < _list44.size; ++_i45)
                  {
                    ByteBuffer _elem46; // required
                    _elem46 = iprot.readBinary();
                    struct.auths.add(_elem46);
                  }
                  iprot.readListEnd();
                }
                struct.setAuthsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START_ROW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startRow = iprot.readString();
                struct.setStartRowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // START_INCLUSIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.startInclusive = iprot.readBool();
                struct.setStartInclusiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // END_ROW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endRow = iprot.readString();
                struct.setEndRowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // END_INCLUSIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.endInclusive = iprot.readBool();
                struct.setEndInclusiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_getMaxRow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.auths != null) {
          oprot.writeFieldBegin(AUTHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.auths.size()));
            for (ByteBuffer _iter47 : struct.auths)
            {
              oprot.writeBinary(_iter47);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.startRow != null) {
          oprot.writeFieldBegin(START_ROW_FIELD_DESC);
          oprot.writeString(struct.startRow);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_INCLUSIVE_FIELD_DESC);
        oprot.writeBool(struct.startInclusive);
        oprot.writeFieldEnd();
        if (struct.endRow != null) {
          oprot.writeFieldBegin(END_ROW_FIELD_DESC);
          oprot.writeString(struct.endRow);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(END_INCLUSIVE_FIELD_DESC);
        oprot.writeBool(struct.endInclusive);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_getMaxRow_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_getMaxRow_argsTupleScheme getScheme() {
        return new tableOperations_getMaxRow_argsTupleScheme();
      }
    }

    private static class tableOperations_getMaxRow_argsTupleScheme extends TupleScheme<tableOperations_getMaxRow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_getMaxRow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        if (struct.isSetAuths()) {
          optionals.set(2);
        }
        if (struct.isSetStartRow()) {
          optionals.set(3);
        }
        if (struct.isSetStartInclusive()) {
          optionals.set(4);
        }
        if (struct.isSetEndRow()) {
          optionals.set(5);
        }
        if (struct.isSetEndInclusive()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetAuths()) {
          {
            oprot.writeI32(struct.auths.size());
            for (ByteBuffer _iter48 : struct.auths)
            {
              oprot.writeBinary(_iter48);
            }
          }
        }
        if (struct.isSetStartRow()) {
          oprot.writeString(struct.startRow);
        }
        if (struct.isSetStartInclusive()) {
          oprot.writeBool(struct.startInclusive);
        }
        if (struct.isSetEndRow()) {
          oprot.writeString(struct.endRow);
        }
        if (struct.isSetEndInclusive()) {
          oprot.writeBool(struct.endInclusive);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_getMaxRow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.auths = new ArrayList<ByteBuffer>(_list49.size);
            for (int _i50 = 0; _i50 < _list49.size; ++_i50)
            {
              ByteBuffer _elem51; // required
              _elem51 = iprot.readBinary();
              struct.auths.add(_elem51);
            }
          }
          struct.setAuthsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.startRow = iprot.readString();
          struct.setStartRowIsSet(true);
        }
        if (incoming.get(4)) {
          struct.startInclusive = iprot.readBool();
          struct.setStartInclusiveIsSet(true);
        }
        if (incoming.get(5)) {
          struct.endRow = iprot.readString();
          struct.setEndRowIsSet(true);
        }
        if (incoming.get(6)) {
          struct.endInclusive = iprot.readBool();
          struct.setEndInclusiveIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_getMaxRow_result implements org.apache.thrift.TBase<tableOperations_getMaxRow_result, tableOperations_getMaxRow_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_getMaxRow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField OUCH3_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_getMaxRow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_getMaxRow_resultTupleSchemeFactory());
    }

    public String success; // required
    public TableNotFoundException ouch1; // required
    public AccumuloException ouch2; // required
    public AccumuloSecurityException ouch3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2"),
      OUCH3((short)3, "ouch3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          case 3: // OUCH3
            return OUCH3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH3, new org.apache.thrift.meta_data.FieldMetaData("ouch3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_getMaxRow_result.class, metaDataMap);
    }

    public tableOperations_getMaxRow_result() {
    }

    public tableOperations_getMaxRow_result(
      String success,
      TableNotFoundException ouch1,
      AccumuloException ouch2,
      AccumuloSecurityException ouch3)
    {
      this();
      this.success = success;
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
      this.ouch3 = ouch3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_getMaxRow_result(tableOperations_getMaxRow_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetOuch1()) {
        this.ouch1 = new TableNotFoundException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloException(other.ouch2);
      }
      if (other.isSetOuch3()) {
        this.ouch3 = new AccumuloSecurityException(other.ouch3);
      }
    }

    public tableOperations_getMaxRow_result deepCopy() {
      return new tableOperations_getMaxRow_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch1 = null;
      this.ouch2 = null;
      this.ouch3 = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public tableOperations_getMaxRow_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TableNotFoundException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_getMaxRow_result setOuch1(TableNotFoundException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_getMaxRow_result setOuch2(AccumuloException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public AccumuloSecurityException getOuch3() {
      return this.ouch3;
    }

    public tableOperations_getMaxRow_result setOuch3(AccumuloSecurityException ouch3) {
      this.ouch3 = ouch3;
      return this;
    }

    public void unsetOuch3() {
      this.ouch3 = null;
    }

    /** Returns true if field ouch3 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch3() {
      return this.ouch3 != null;
    }

    public void setOuch3IsSet(boolean value) {
      if (!value) {
        this.ouch3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((TableNotFoundException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloException)value);
        }
        break;

      case OUCH3:
        if (value == null) {
          unsetOuch3();
        } else {
          setOuch3((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      case OUCH3:
        return getOuch3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      case OUCH3:
        return isSetOuch3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_getMaxRow_result)
        return this.equals((tableOperations_getMaxRow_result)that);
      return false;
    }

    public boolean equals(tableOperations_getMaxRow_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      boolean this_present_ouch3 = true && this.isSetOuch3();
      boolean that_present_ouch3 = true && that.isSetOuch3();
      if (this_present_ouch3 || that_present_ouch3) {
        if (!(this_present_ouch3 && that_present_ouch3))
          return false;
        if (!this.ouch3.equals(that.ouch3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_getMaxRow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_getMaxRow_result typedOther = (tableOperations_getMaxRow_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch3()).compareTo(typedOther.isSetOuch3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch3, typedOther.ouch3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_getMaxRow_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch3:");
      if (this.ouch3 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_getMaxRow_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_getMaxRow_resultStandardScheme getScheme() {
        return new tableOperations_getMaxRow_resultStandardScheme();
      }
    }

    private static class tableOperations_getMaxRow_resultStandardScheme extends StandardScheme<tableOperations_getMaxRow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_getMaxRow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new TableNotFoundException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUCH3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch3 = new AccumuloSecurityException();
                struct.ouch3.read(iprot);
                struct.setOuch3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_getMaxRow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch3 != null) {
          oprot.writeFieldBegin(OUCH3_FIELD_DESC);
          struct.ouch3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_getMaxRow_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_getMaxRow_resultTupleScheme getScheme() {
        return new tableOperations_getMaxRow_resultTupleScheme();
      }
    }

    private static class tableOperations_getMaxRow_resultTupleScheme extends TupleScheme<tableOperations_getMaxRow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_getMaxRow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch1()) {
          optionals.set(1);
        }
        if (struct.isSetOuch2()) {
          optionals.set(2);
        }
        if (struct.isSetOuch3()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
        if (struct.isSetOuch3()) {
          struct.ouch3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_getMaxRow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch1 = new TableNotFoundException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch2 = new AccumuloException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.ouch3 = new AccumuloSecurityException();
          struct.ouch3.read(iprot);
          struct.setOuch3IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_getProperties_args implements org.apache.thrift.TBase<tableOperations_getProperties_args, tableOperations_getProperties_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_getProperties_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_getProperties_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_getProperties_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_getProperties_args.class, metaDataMap);
    }

    public tableOperations_getProperties_args() {
    }

    public tableOperations_getProperties_args(
      UserPass userpass,
      String tableName)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_getProperties_args(tableOperations_getProperties_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
    }

    public tableOperations_getProperties_args deepCopy() {
      return new tableOperations_getProperties_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_getProperties_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_getProperties_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_getProperties_args)
        return this.equals((tableOperations_getProperties_args)that);
      return false;
    }

    public boolean equals(tableOperations_getProperties_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_getProperties_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_getProperties_args typedOther = (tableOperations_getProperties_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_getProperties_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_getProperties_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_getProperties_argsStandardScheme getScheme() {
        return new tableOperations_getProperties_argsStandardScheme();
      }
    }

    private static class tableOperations_getProperties_argsStandardScheme extends StandardScheme<tableOperations_getProperties_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_getProperties_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_getProperties_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_getProperties_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_getProperties_argsTupleScheme getScheme() {
        return new tableOperations_getProperties_argsTupleScheme();
      }
    }

    private static class tableOperations_getProperties_argsTupleScheme extends TupleScheme<tableOperations_getProperties_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_getProperties_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_getProperties_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_getProperties_result implements org.apache.thrift.TBase<tableOperations_getProperties_result, tableOperations_getProperties_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_getProperties_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_getProperties_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_getProperties_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public AccumuloException ouch1; // required
    public TableNotFoundException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_getProperties_result.class, metaDataMap);
    }

    public tableOperations_getProperties_result() {
    }

    public tableOperations_getProperties_result(
      Map<String,String> success,
      AccumuloException ouch1,
      TableNotFoundException ouch2)
    {
      this();
      this.success = success;
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_getProperties_result(tableOperations_getProperties_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new TableNotFoundException(other.ouch2);
      }
    }

    public tableOperations_getProperties_result deepCopy() {
      return new tableOperations_getProperties_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public tableOperations_getProperties_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_getProperties_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public TableNotFoundException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_getProperties_result setOuch2(TableNotFoundException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((TableNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_getProperties_result)
        return this.equals((tableOperations_getProperties_result)that);
      return false;
    }

    public boolean equals(tableOperations_getProperties_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_getProperties_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_getProperties_result typedOther = (tableOperations_getProperties_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_getProperties_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_getProperties_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_getProperties_resultStandardScheme getScheme() {
        return new tableOperations_getProperties_resultStandardScheme();
      }
    }

    private static class tableOperations_getProperties_resultStandardScheme extends StandardScheme<tableOperations_getProperties_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_getProperties_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map52 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map52.size);
                  for (int _i53 = 0; _i53 < _map52.size; ++_i53)
                  {
                    String _key54; // required
                    String _val55; // required
                    _key54 = iprot.readString();
                    _val55 = iprot.readString();
                    struct.success.put(_key54, _val55);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new TableNotFoundException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_getProperties_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter56 : struct.success.entrySet())
            {
              oprot.writeString(_iter56.getKey());
              oprot.writeString(_iter56.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_getProperties_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_getProperties_resultTupleScheme getScheme() {
        return new tableOperations_getProperties_resultTupleScheme();
      }
    }

    private static class tableOperations_getProperties_resultTupleScheme extends TupleScheme<tableOperations_getProperties_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_getProperties_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch1()) {
          optionals.set(1);
        }
        if (struct.isSetOuch2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter57 : struct.success.entrySet())
            {
              oprot.writeString(_iter57.getKey());
              oprot.writeString(_iter57.getValue());
            }
          }
        }
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_getProperties_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map58 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map58.size);
            for (int _i59 = 0; _i59 < _map58.size; ++_i59)
            {
              String _key60; // required
              String _val61; // required
              _key60 = iprot.readString();
              _val61 = iprot.readString();
              struct.success.put(_key60, _val61);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch2 = new TableNotFoundException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_getSplits_args implements org.apache.thrift.TBase<tableOperations_getSplits_args, tableOperations_getSplits_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_getSplits_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MAX_SPLITS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxSplits", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_getSplits_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_getSplits_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required
    public int maxSplits; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName"),
      MAX_SPLITS((short)3, "maxSplits");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MAX_SPLITS
            return MAX_SPLITS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MAXSPLITS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAX_SPLITS, new org.apache.thrift.meta_data.FieldMetaData("maxSplits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_getSplits_args.class, metaDataMap);
    }

    public tableOperations_getSplits_args() {
    }

    public tableOperations_getSplits_args(
      UserPass userpass,
      String tableName,
      int maxSplits)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
      this.maxSplits = maxSplits;
      setMaxSplitsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_getSplits_args(tableOperations_getSplits_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      this.maxSplits = other.maxSplits;
    }

    public tableOperations_getSplits_args deepCopy() {
      return new tableOperations_getSplits_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
      setMaxSplitsIsSet(false);
      this.maxSplits = 0;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_getSplits_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_getSplits_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public int getMaxSplits() {
      return this.maxSplits;
    }

    public tableOperations_getSplits_args setMaxSplits(int maxSplits) {
      this.maxSplits = maxSplits;
      setMaxSplitsIsSet(true);
      return this;
    }

    public void unsetMaxSplits() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXSPLITS_ISSET_ID);
    }

    /** Returns true if field maxSplits is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxSplits() {
      return EncodingUtils.testBit(__isset_bitfield, __MAXSPLITS_ISSET_ID);
    }

    public void setMaxSplitsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXSPLITS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      case MAX_SPLITS:
        if (value == null) {
          unsetMaxSplits();
        } else {
          setMaxSplits((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      case MAX_SPLITS:
        return Integer.valueOf(getMaxSplits());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      case MAX_SPLITS:
        return isSetMaxSplits();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_getSplits_args)
        return this.equals((tableOperations_getSplits_args)that);
      return false;
    }

    public boolean equals(tableOperations_getSplits_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_maxSplits = true;
      boolean that_present_maxSplits = true;
      if (this_present_maxSplits || that_present_maxSplits) {
        if (!(this_present_maxSplits && that_present_maxSplits))
          return false;
        if (this.maxSplits != that.maxSplits)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_getSplits_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_getSplits_args typedOther = (tableOperations_getSplits_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxSplits()).compareTo(typedOther.isSetMaxSplits());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxSplits()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxSplits, typedOther.maxSplits);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_getSplits_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxSplits:");
      sb.append(this.maxSplits);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_getSplits_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_getSplits_argsStandardScheme getScheme() {
        return new tableOperations_getSplits_argsStandardScheme();
      }
    }

    private static class tableOperations_getSplits_argsStandardScheme extends StandardScheme<tableOperations_getSplits_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_getSplits_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MAX_SPLITS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.maxSplits = iprot.readI32();
                struct.setMaxSplitsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_getSplits_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MAX_SPLITS_FIELD_DESC);
        oprot.writeI32(struct.maxSplits);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_getSplits_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_getSplits_argsTupleScheme getScheme() {
        return new tableOperations_getSplits_argsTupleScheme();
      }
    }

    private static class tableOperations_getSplits_argsTupleScheme extends TupleScheme<tableOperations_getSplits_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_getSplits_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        if (struct.isSetMaxSplits()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetMaxSplits()) {
          oprot.writeI32(struct.maxSplits);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_getSplits_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.maxSplits = iprot.readI32();
          struct.setMaxSplitsIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_getSplits_result implements org.apache.thrift.TBase<tableOperations_getSplits_result, tableOperations_getSplits_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_getSplits_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_getSplits_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_getSplits_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public TableNotFoundException ouch1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH1((short)1, "ouch1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH1
            return OUCH1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_getSplits_result.class, metaDataMap);
    }

    public tableOperations_getSplits_result() {
    }

    public tableOperations_getSplits_result(
      List<String> success,
      TableNotFoundException ouch1)
    {
      this();
      this.success = success;
      this.ouch1 = ouch1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_getSplits_result(tableOperations_getSplits_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetOuch1()) {
        this.ouch1 = new TableNotFoundException(other.ouch1);
      }
    }

    public tableOperations_getSplits_result deepCopy() {
      return new tableOperations_getSplits_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public tableOperations_getSplits_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TableNotFoundException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_getSplits_result setOuch1(TableNotFoundException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((TableNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH1:
        return getOuch1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH1:
        return isSetOuch1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_getSplits_result)
        return this.equals((tableOperations_getSplits_result)that);
      return false;
    }

    public boolean equals(tableOperations_getSplits_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_getSplits_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_getSplits_result typedOther = (tableOperations_getSplits_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_getSplits_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_getSplits_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_getSplits_resultStandardScheme getScheme() {
        return new tableOperations_getSplits_resultStandardScheme();
      }
    }

    private static class tableOperations_getSplits_resultStandardScheme extends StandardScheme<tableOperations_getSplits_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_getSplits_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list62.size);
                  for (int _i63 = 0; _i63 < _list62.size; ++_i63)
                  {
                    String _elem64; // required
                    _elem64 = iprot.readString();
                    struct.success.add(_elem64);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new TableNotFoundException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_getSplits_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter65 : struct.success)
            {
              oprot.writeString(_iter65);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_getSplits_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_getSplits_resultTupleScheme getScheme() {
        return new tableOperations_getSplits_resultTupleScheme();
      }
    }

    private static class tableOperations_getSplits_resultTupleScheme extends TupleScheme<tableOperations_getSplits_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_getSplits_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter66 : struct.success)
            {
              oprot.writeString(_iter66);
            }
          }
        }
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_getSplits_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list67 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list67.size);
            for (int _i68 = 0; _i68 < _list67.size; ++_i68)
            {
              String _elem69; // required
              _elem69 = iprot.readString();
              struct.success.add(_elem69);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch1 = new TableNotFoundException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_list_args implements org.apache.thrift.TBase<tableOperations_list_args, tableOperations_list_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_list_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_list_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_list_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_list_args.class, metaDataMap);
    }

    public tableOperations_list_args() {
    }

    public tableOperations_list_args(
      UserPass userpass)
    {
      this();
      this.userpass = userpass;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_list_args(tableOperations_list_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
    }

    public tableOperations_list_args deepCopy() {
      return new tableOperations_list_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_list_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_list_args)
        return this.equals((tableOperations_list_args)that);
      return false;
    }

    public boolean equals(tableOperations_list_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_list_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_list_args typedOther = (tableOperations_list_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_list_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_list_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_list_argsStandardScheme getScheme() {
        return new tableOperations_list_argsStandardScheme();
      }
    }

    private static class tableOperations_list_argsStandardScheme extends StandardScheme<tableOperations_list_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_list_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_list_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_list_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_list_argsTupleScheme getScheme() {
        return new tableOperations_list_argsTupleScheme();
      }
    }

    private static class tableOperations_list_argsTupleScheme extends TupleScheme<tableOperations_list_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_list_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_list_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_list_result implements org.apache.thrift.TBase<tableOperations_list_result, tableOperations_list_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_list_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_list_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_list_resultTupleSchemeFactory());
    }

    public Set<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_list_result.class, metaDataMap);
    }

    public tableOperations_list_result() {
    }

    public tableOperations_list_result(
      Set<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_list_result(tableOperations_list_result other) {
      if (other.isSetSuccess()) {
        Set<String> __this__success = new HashSet<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public tableOperations_list_result deepCopy() {
      return new tableOperations_list_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new HashSet<String>();
      }
      this.success.add(elem);
    }

    public Set<String> getSuccess() {
      return this.success;
    }

    public tableOperations_list_result setSuccess(Set<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_list_result)
        return this.equals((tableOperations_list_result)that);
      return false;
    }

    public boolean equals(tableOperations_list_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_list_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_list_result typedOther = (tableOperations_list_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_list_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_list_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_list_resultStandardScheme getScheme() {
        return new tableOperations_list_resultStandardScheme();
      }
    }

    private static class tableOperations_list_resultStandardScheme extends StandardScheme<tableOperations_list_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_list_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set70 = iprot.readSetBegin();
                  struct.success = new HashSet<String>(2*_set70.size);
                  for (int _i71 = 0; _i71 < _set70.size; ++_i71)
                  {
                    String _elem72; // required
                    _elem72 = iprot.readString();
                    struct.success.add(_elem72);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_list_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter73 : struct.success)
            {
              oprot.writeString(_iter73);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_list_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_list_resultTupleScheme getScheme() {
        return new tableOperations_list_resultTupleScheme();
      }
    }

    private static class tableOperations_list_resultTupleScheme extends TupleScheme<tableOperations_list_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_list_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter74 : struct.success)
            {
              oprot.writeString(_iter74);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_list_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set75 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashSet<String>(2*_set75.size);
            for (int _i76 = 0; _i76 < _set75.size; ++_i76)
            {
              String _elem77; // required
              _elem77 = iprot.readString();
              struct.success.add(_elem77);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_listConstraints_args implements org.apache.thrift.TBase<tableOperations_listConstraints_args, tableOperations_listConstraints_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_listConstraints_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_listConstraints_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_listConstraints_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_listConstraints_args.class, metaDataMap);
    }

    public tableOperations_listConstraints_args() {
    }

    public tableOperations_listConstraints_args(
      UserPass userpass,
      String tableName)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_listConstraints_args(tableOperations_listConstraints_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
    }

    public tableOperations_listConstraints_args deepCopy() {
      return new tableOperations_listConstraints_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_listConstraints_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_listConstraints_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_listConstraints_args)
        return this.equals((tableOperations_listConstraints_args)that);
      return false;
    }

    public boolean equals(tableOperations_listConstraints_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_listConstraints_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_listConstraints_args typedOther = (tableOperations_listConstraints_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_listConstraints_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_listConstraints_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_listConstraints_argsStandardScheme getScheme() {
        return new tableOperations_listConstraints_argsStandardScheme();
      }
    }

    private static class tableOperations_listConstraints_argsStandardScheme extends StandardScheme<tableOperations_listConstraints_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_listConstraints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_listConstraints_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_listConstraints_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_listConstraints_argsTupleScheme getScheme() {
        return new tableOperations_listConstraints_argsTupleScheme();
      }
    }

    private static class tableOperations_listConstraints_argsTupleScheme extends TupleScheme<tableOperations_listConstraints_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_listConstraints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_listConstraints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_listConstraints_result implements org.apache.thrift.TBase<tableOperations_listConstraints_result, tableOperations_listConstraints_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_listConstraints_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_listConstraints_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_listConstraints_resultTupleSchemeFactory());
    }

    public Map<String,Integer> success; // required
    public AccumuloException ouch1; // required
    public TableNotFoundException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_listConstraints_result.class, metaDataMap);
    }

    public tableOperations_listConstraints_result() {
    }

    public tableOperations_listConstraints_result(
      Map<String,Integer> success,
      AccumuloException ouch1,
      TableNotFoundException ouch2)
    {
      this();
      this.success = success;
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_listConstraints_result(tableOperations_listConstraints_result other) {
      if (other.isSetSuccess()) {
        Map<String,Integer> __this__success = new HashMap<String,Integer>();
        for (Map.Entry<String, Integer> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Integer other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Integer __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new TableNotFoundException(other.ouch2);
      }
    }

    public tableOperations_listConstraints_result deepCopy() {
      return new tableOperations_listConstraints_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, int val) {
      if (this.success == null) {
        this.success = new HashMap<String,Integer>();
      }
      this.success.put(key, val);
    }

    public Map<String,Integer> getSuccess() {
      return this.success;
    }

    public tableOperations_listConstraints_result setSuccess(Map<String,Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_listConstraints_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public TableNotFoundException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_listConstraints_result setOuch2(TableNotFoundException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Integer>)value);
        }
        break;

      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((TableNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_listConstraints_result)
        return this.equals((tableOperations_listConstraints_result)that);
      return false;
    }

    public boolean equals(tableOperations_listConstraints_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_listConstraints_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_listConstraints_result typedOther = (tableOperations_listConstraints_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_listConstraints_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_listConstraints_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_listConstraints_resultStandardScheme getScheme() {
        return new tableOperations_listConstraints_resultStandardScheme();
      }
    }

    private static class tableOperations_listConstraints_resultStandardScheme extends StandardScheme<tableOperations_listConstraints_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_listConstraints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map78 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Integer>(2*_map78.size);
                  for (int _i79 = 0; _i79 < _map78.size; ++_i79)
                  {
                    String _key80; // required
                    int _val81; // required
                    _key80 = iprot.readString();
                    _val81 = iprot.readI32();
                    struct.success.put(_key80, _val81);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new TableNotFoundException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_listConstraints_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (Map.Entry<String, Integer> _iter82 : struct.success.entrySet())
            {
              oprot.writeString(_iter82.getKey());
              oprot.writeI32(_iter82.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_listConstraints_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_listConstraints_resultTupleScheme getScheme() {
        return new tableOperations_listConstraints_resultTupleScheme();
      }
    }

    private static class tableOperations_listConstraints_resultTupleScheme extends TupleScheme<tableOperations_listConstraints_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_listConstraints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch1()) {
          optionals.set(1);
        }
        if (struct.isSetOuch2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Integer> _iter83 : struct.success.entrySet())
            {
              oprot.writeString(_iter83.getKey());
              oprot.writeI32(_iter83.getValue());
            }
          }
        }
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_listConstraints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map84 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new HashMap<String,Integer>(2*_map84.size);
            for (int _i85 = 0; _i85 < _map84.size; ++_i85)
            {
              String _key86; // required
              int _val87; // required
              _key86 = iprot.readString();
              _val87 = iprot.readI32();
              struct.success.put(_key86, _val87);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch2 = new TableNotFoundException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_merge_args implements org.apache.thrift.TBase<tableOperations_merge_args, tableOperations_merge_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_merge_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField START_ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("startRow", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField END_ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("endRow", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_merge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_merge_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required
    public String startRow; // required
    public String endRow; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName"),
      START_ROW((short)3, "startRow"),
      END_ROW((short)4, "endRow");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // START_ROW
            return START_ROW;
          case 4: // END_ROW
            return END_ROW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_ROW, new org.apache.thrift.meta_data.FieldMetaData("startRow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_ROW, new org.apache.thrift.meta_data.FieldMetaData("endRow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_merge_args.class, metaDataMap);
    }

    public tableOperations_merge_args() {
    }

    public tableOperations_merge_args(
      UserPass userpass,
      String tableName,
      String startRow,
      String endRow)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
      this.startRow = startRow;
      this.endRow = endRow;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_merge_args(tableOperations_merge_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetStartRow()) {
        this.startRow = other.startRow;
      }
      if (other.isSetEndRow()) {
        this.endRow = other.endRow;
      }
    }

    public tableOperations_merge_args deepCopy() {
      return new tableOperations_merge_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
      this.startRow = null;
      this.endRow = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_merge_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_merge_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public String getStartRow() {
      return this.startRow;
    }

    public tableOperations_merge_args setStartRow(String startRow) {
      this.startRow = startRow;
      return this;
    }

    public void unsetStartRow() {
      this.startRow = null;
    }

    /** Returns true if field startRow is set (has been assigned a value) and false otherwise */
    public boolean isSetStartRow() {
      return this.startRow != null;
    }

    public void setStartRowIsSet(boolean value) {
      if (!value) {
        this.startRow = null;
      }
    }

    public String getEndRow() {
      return this.endRow;
    }

    public tableOperations_merge_args setEndRow(String endRow) {
      this.endRow = endRow;
      return this;
    }

    public void unsetEndRow() {
      this.endRow = null;
    }

    /** Returns true if field endRow is set (has been assigned a value) and false otherwise */
    public boolean isSetEndRow() {
      return this.endRow != null;
    }

    public void setEndRowIsSet(boolean value) {
      if (!value) {
        this.endRow = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      case START_ROW:
        if (value == null) {
          unsetStartRow();
        } else {
          setStartRow((String)value);
        }
        break;

      case END_ROW:
        if (value == null) {
          unsetEndRow();
        } else {
          setEndRow((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      case START_ROW:
        return getStartRow();

      case END_ROW:
        return getEndRow();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      case START_ROW:
        return isSetStartRow();
      case END_ROW:
        return isSetEndRow();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_merge_args)
        return this.equals((tableOperations_merge_args)that);
      return false;
    }

    public boolean equals(tableOperations_merge_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_startRow = true && this.isSetStartRow();
      boolean that_present_startRow = true && that.isSetStartRow();
      if (this_present_startRow || that_present_startRow) {
        if (!(this_present_startRow && that_present_startRow))
          return false;
        if (!this.startRow.equals(that.startRow))
          return false;
      }

      boolean this_present_endRow = true && this.isSetEndRow();
      boolean that_present_endRow = true && that.isSetEndRow();
      if (this_present_endRow || that_present_endRow) {
        if (!(this_present_endRow && that_present_endRow))
          return false;
        if (!this.endRow.equals(that.endRow))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_merge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_merge_args typedOther = (tableOperations_merge_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartRow()).compareTo(typedOther.isSetStartRow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartRow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRow, typedOther.startRow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndRow()).compareTo(typedOther.isSetEndRow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndRow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endRow, typedOther.endRow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_merge_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startRow:");
      if (this.startRow == null) {
        sb.append("null");
      } else {
        sb.append(this.startRow);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endRow:");
      if (this.endRow == null) {
        sb.append("null");
      } else {
        sb.append(this.endRow);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_merge_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_merge_argsStandardScheme getScheme() {
        return new tableOperations_merge_argsStandardScheme();
      }
    }

    private static class tableOperations_merge_argsStandardScheme extends StandardScheme<tableOperations_merge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_merge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_ROW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startRow = iprot.readString();
                struct.setStartRowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_ROW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endRow = iprot.readString();
                struct.setEndRowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_merge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.startRow != null) {
          oprot.writeFieldBegin(START_ROW_FIELD_DESC);
          oprot.writeString(struct.startRow);
          oprot.writeFieldEnd();
        }
        if (struct.endRow != null) {
          oprot.writeFieldBegin(END_ROW_FIELD_DESC);
          oprot.writeString(struct.endRow);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_merge_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_merge_argsTupleScheme getScheme() {
        return new tableOperations_merge_argsTupleScheme();
      }
    }

    private static class tableOperations_merge_argsTupleScheme extends TupleScheme<tableOperations_merge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_merge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        if (struct.isSetStartRow()) {
          optionals.set(2);
        }
        if (struct.isSetEndRow()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetStartRow()) {
          oprot.writeString(struct.startRow);
        }
        if (struct.isSetEndRow()) {
          oprot.writeString(struct.endRow);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_merge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startRow = iprot.readString();
          struct.setStartRowIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endRow = iprot.readString();
          struct.setEndRowIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_merge_result implements org.apache.thrift.TBase<tableOperations_merge_result, tableOperations_merge_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_merge_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField OUCH3_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_merge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_merge_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required
    public TableNotFoundException ouch3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2"),
      OUCH3((short)3, "ouch3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          case 3: // OUCH3
            return OUCH3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH3, new org.apache.thrift.meta_data.FieldMetaData("ouch3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_merge_result.class, metaDataMap);
    }

    public tableOperations_merge_result() {
    }

    public tableOperations_merge_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2,
      TableNotFoundException ouch3)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
      this.ouch3 = ouch3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_merge_result(tableOperations_merge_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
      if (other.isSetOuch3()) {
        this.ouch3 = new TableNotFoundException(other.ouch3);
      }
    }

    public tableOperations_merge_result deepCopy() {
      return new tableOperations_merge_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
      this.ouch3 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_merge_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_merge_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public TableNotFoundException getOuch3() {
      return this.ouch3;
    }

    public tableOperations_merge_result setOuch3(TableNotFoundException ouch3) {
      this.ouch3 = ouch3;
      return this;
    }

    public void unsetOuch3() {
      this.ouch3 = null;
    }

    /** Returns true if field ouch3 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch3() {
      return this.ouch3 != null;
    }

    public void setOuch3IsSet(boolean value) {
      if (!value) {
        this.ouch3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      case OUCH3:
        if (value == null) {
          unsetOuch3();
        } else {
          setOuch3((TableNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      case OUCH3:
        return getOuch3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      case OUCH3:
        return isSetOuch3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_merge_result)
        return this.equals((tableOperations_merge_result)that);
      return false;
    }

    public boolean equals(tableOperations_merge_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      boolean this_present_ouch3 = true && this.isSetOuch3();
      boolean that_present_ouch3 = true && that.isSetOuch3();
      if (this_present_ouch3 || that_present_ouch3) {
        if (!(this_present_ouch3 && that_present_ouch3))
          return false;
        if (!this.ouch3.equals(that.ouch3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_merge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_merge_result typedOther = (tableOperations_merge_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch3()).compareTo(typedOther.isSetOuch3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch3, typedOther.ouch3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_merge_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch3:");
      if (this.ouch3 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_merge_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_merge_resultStandardScheme getScheme() {
        return new tableOperations_merge_resultStandardScheme();
      }
    }

    private static class tableOperations_merge_resultStandardScheme extends StandardScheme<tableOperations_merge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_merge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUCH3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch3 = new TableNotFoundException();
                struct.ouch3.read(iprot);
                struct.setOuch3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_merge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch3 != null) {
          oprot.writeFieldBegin(OUCH3_FIELD_DESC);
          struct.ouch3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_merge_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_merge_resultTupleScheme getScheme() {
        return new tableOperations_merge_resultTupleScheme();
      }
    }

    private static class tableOperations_merge_resultTupleScheme extends TupleScheme<tableOperations_merge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_merge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        if (struct.isSetOuch3()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
        if (struct.isSetOuch3()) {
          struct.ouch3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_merge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch3 = new TableNotFoundException();
          struct.ouch3.read(iprot);
          struct.setOuch3IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_offline_args implements org.apache.thrift.TBase<tableOperations_offline_args, tableOperations_offline_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_offline_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_offline_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_offline_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_offline_args.class, metaDataMap);
    }

    public tableOperations_offline_args() {
    }

    public tableOperations_offline_args(
      UserPass userpass,
      String tableName)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_offline_args(tableOperations_offline_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
    }

    public tableOperations_offline_args deepCopy() {
      return new tableOperations_offline_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_offline_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_offline_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_offline_args)
        return this.equals((tableOperations_offline_args)that);
      return false;
    }

    public boolean equals(tableOperations_offline_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_offline_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_offline_args typedOther = (tableOperations_offline_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_offline_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_offline_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_offline_argsStandardScheme getScheme() {
        return new tableOperations_offline_argsStandardScheme();
      }
    }

    private static class tableOperations_offline_argsStandardScheme extends StandardScheme<tableOperations_offline_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_offline_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_offline_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_offline_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_offline_argsTupleScheme getScheme() {
        return new tableOperations_offline_argsTupleScheme();
      }
    }

    private static class tableOperations_offline_argsTupleScheme extends TupleScheme<tableOperations_offline_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_offline_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_offline_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_offline_result implements org.apache.thrift.TBase<tableOperations_offline_result, tableOperations_offline_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_offline_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField OUCH3_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_offline_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_offline_resultTupleSchemeFactory());
    }

    public AccumuloSecurityException ouch1; // required
    public AccumuloException ouch2; // required
    public TableNotFoundException ouch3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2"),
      OUCH3((short)3, "ouch3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          case 3: // OUCH3
            return OUCH3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH3, new org.apache.thrift.meta_data.FieldMetaData("ouch3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_offline_result.class, metaDataMap);
    }

    public tableOperations_offline_result() {
    }

    public tableOperations_offline_result(
      AccumuloSecurityException ouch1,
      AccumuloException ouch2,
      TableNotFoundException ouch3)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
      this.ouch3 = ouch3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_offline_result(tableOperations_offline_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloSecurityException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloException(other.ouch2);
      }
      if (other.isSetOuch3()) {
        this.ouch3 = new TableNotFoundException(other.ouch3);
      }
    }

    public tableOperations_offline_result deepCopy() {
      return new tableOperations_offline_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
      this.ouch3 = null;
    }

    public AccumuloSecurityException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_offline_result setOuch1(AccumuloSecurityException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_offline_result setOuch2(AccumuloException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public TableNotFoundException getOuch3() {
      return this.ouch3;
    }

    public tableOperations_offline_result setOuch3(TableNotFoundException ouch3) {
      this.ouch3 = ouch3;
      return this;
    }

    public void unsetOuch3() {
      this.ouch3 = null;
    }

    /** Returns true if field ouch3 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch3() {
      return this.ouch3 != null;
    }

    public void setOuch3IsSet(boolean value) {
      if (!value) {
        this.ouch3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloSecurityException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloException)value);
        }
        break;

      case OUCH3:
        if (value == null) {
          unsetOuch3();
        } else {
          setOuch3((TableNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      case OUCH3:
        return getOuch3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      case OUCH3:
        return isSetOuch3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_offline_result)
        return this.equals((tableOperations_offline_result)that);
      return false;
    }

    public boolean equals(tableOperations_offline_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      boolean this_present_ouch3 = true && this.isSetOuch3();
      boolean that_present_ouch3 = true && that.isSetOuch3();
      if (this_present_ouch3 || that_present_ouch3) {
        if (!(this_present_ouch3 && that_present_ouch3))
          return false;
        if (!this.ouch3.equals(that.ouch3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_offline_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_offline_result typedOther = (tableOperations_offline_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch3()).compareTo(typedOther.isSetOuch3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch3, typedOther.ouch3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_offline_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch3:");
      if (this.ouch3 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_offline_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_offline_resultStandardScheme getScheme() {
        return new tableOperations_offline_resultStandardScheme();
      }
    }

    private static class tableOperations_offline_resultStandardScheme extends StandardScheme<tableOperations_offline_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_offline_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloSecurityException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUCH3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch3 = new TableNotFoundException();
                struct.ouch3.read(iprot);
                struct.setOuch3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_offline_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch3 != null) {
          oprot.writeFieldBegin(OUCH3_FIELD_DESC);
          struct.ouch3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_offline_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_offline_resultTupleScheme getScheme() {
        return new tableOperations_offline_resultTupleScheme();
      }
    }

    private static class tableOperations_offline_resultTupleScheme extends TupleScheme<tableOperations_offline_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_offline_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        if (struct.isSetOuch3()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
        if (struct.isSetOuch3()) {
          struct.ouch3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_offline_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloSecurityException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch3 = new TableNotFoundException();
          struct.ouch3.read(iprot);
          struct.setOuch3IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_online_args implements org.apache.thrift.TBase<tableOperations_online_args, tableOperations_online_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_online_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_online_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_online_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_online_args.class, metaDataMap);
    }

    public tableOperations_online_args() {
    }

    public tableOperations_online_args(
      UserPass userpass,
      String tableName)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_online_args(tableOperations_online_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
    }

    public tableOperations_online_args deepCopy() {
      return new tableOperations_online_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_online_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_online_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_online_args)
        return this.equals((tableOperations_online_args)that);
      return false;
    }

    public boolean equals(tableOperations_online_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_online_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_online_args typedOther = (tableOperations_online_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_online_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_online_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_online_argsStandardScheme getScheme() {
        return new tableOperations_online_argsStandardScheme();
      }
    }

    private static class tableOperations_online_argsStandardScheme extends StandardScheme<tableOperations_online_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_online_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_online_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_online_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_online_argsTupleScheme getScheme() {
        return new tableOperations_online_argsTupleScheme();
      }
    }

    private static class tableOperations_online_argsTupleScheme extends TupleScheme<tableOperations_online_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_online_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_online_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_online_result implements org.apache.thrift.TBase<tableOperations_online_result, tableOperations_online_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_online_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField OUCH3_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_online_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_online_resultTupleSchemeFactory());
    }

    public AccumuloSecurityException ouch1; // required
    public AccumuloException ouch2; // required
    public TableNotFoundException ouch3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2"),
      OUCH3((short)3, "ouch3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          case 3: // OUCH3
            return OUCH3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH3, new org.apache.thrift.meta_data.FieldMetaData("ouch3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_online_result.class, metaDataMap);
    }

    public tableOperations_online_result() {
    }

    public tableOperations_online_result(
      AccumuloSecurityException ouch1,
      AccumuloException ouch2,
      TableNotFoundException ouch3)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
      this.ouch3 = ouch3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_online_result(tableOperations_online_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloSecurityException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloException(other.ouch2);
      }
      if (other.isSetOuch3()) {
        this.ouch3 = new TableNotFoundException(other.ouch3);
      }
    }

    public tableOperations_online_result deepCopy() {
      return new tableOperations_online_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
      this.ouch3 = null;
    }

    public AccumuloSecurityException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_online_result setOuch1(AccumuloSecurityException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_online_result setOuch2(AccumuloException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public TableNotFoundException getOuch3() {
      return this.ouch3;
    }

    public tableOperations_online_result setOuch3(TableNotFoundException ouch3) {
      this.ouch3 = ouch3;
      return this;
    }

    public void unsetOuch3() {
      this.ouch3 = null;
    }

    /** Returns true if field ouch3 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch3() {
      return this.ouch3 != null;
    }

    public void setOuch3IsSet(boolean value) {
      if (!value) {
        this.ouch3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloSecurityException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloException)value);
        }
        break;

      case OUCH3:
        if (value == null) {
          unsetOuch3();
        } else {
          setOuch3((TableNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      case OUCH3:
        return getOuch3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      case OUCH3:
        return isSetOuch3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_online_result)
        return this.equals((tableOperations_online_result)that);
      return false;
    }

    public boolean equals(tableOperations_online_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      boolean this_present_ouch3 = true && this.isSetOuch3();
      boolean that_present_ouch3 = true && that.isSetOuch3();
      if (this_present_ouch3 || that_present_ouch3) {
        if (!(this_present_ouch3 && that_present_ouch3))
          return false;
        if (!this.ouch3.equals(that.ouch3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_online_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_online_result typedOther = (tableOperations_online_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch3()).compareTo(typedOther.isSetOuch3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch3, typedOther.ouch3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_online_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch3:");
      if (this.ouch3 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_online_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_online_resultStandardScheme getScheme() {
        return new tableOperations_online_resultStandardScheme();
      }
    }

    private static class tableOperations_online_resultStandardScheme extends StandardScheme<tableOperations_online_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_online_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloSecurityException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUCH3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch3 = new TableNotFoundException();
                struct.ouch3.read(iprot);
                struct.setOuch3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_online_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch3 != null) {
          oprot.writeFieldBegin(OUCH3_FIELD_DESC);
          struct.ouch3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_online_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_online_resultTupleScheme getScheme() {
        return new tableOperations_online_resultTupleScheme();
      }
    }

    private static class tableOperations_online_resultTupleScheme extends TupleScheme<tableOperations_online_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_online_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        if (struct.isSetOuch3()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
        if (struct.isSetOuch3()) {
          struct.ouch3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_online_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloSecurityException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch3 = new TableNotFoundException();
          struct.ouch3.read(iprot);
          struct.setOuch3IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_removeConstraint_args implements org.apache.thrift.TBase<tableOperations_removeConstraint_args, tableOperations_removeConstraint_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_removeConstraint_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("constraint", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_removeConstraint_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_removeConstraint_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required
    public int constraint; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName"),
      CONSTRAINT((short)3, "constraint");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // CONSTRAINT
            return CONSTRAINT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONSTRAINT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("constraint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_removeConstraint_args.class, metaDataMap);
    }

    public tableOperations_removeConstraint_args() {
    }

    public tableOperations_removeConstraint_args(
      UserPass userpass,
      String tableName,
      int constraint)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
      this.constraint = constraint;
      setConstraintIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_removeConstraint_args(tableOperations_removeConstraint_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      this.constraint = other.constraint;
    }

    public tableOperations_removeConstraint_args deepCopy() {
      return new tableOperations_removeConstraint_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
      setConstraintIsSet(false);
      this.constraint = 0;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_removeConstraint_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_removeConstraint_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public int getConstraint() {
      return this.constraint;
    }

    public tableOperations_removeConstraint_args setConstraint(int constraint) {
      this.constraint = constraint;
      setConstraintIsSet(true);
      return this;
    }

    public void unsetConstraint() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONSTRAINT_ISSET_ID);
    }

    /** Returns true if field constraint is set (has been assigned a value) and false otherwise */
    public boolean isSetConstraint() {
      return EncodingUtils.testBit(__isset_bitfield, __CONSTRAINT_ISSET_ID);
    }

    public void setConstraintIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONSTRAINT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      case CONSTRAINT:
        if (value == null) {
          unsetConstraint();
        } else {
          setConstraint((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      case CONSTRAINT:
        return Integer.valueOf(getConstraint());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      case CONSTRAINT:
        return isSetConstraint();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_removeConstraint_args)
        return this.equals((tableOperations_removeConstraint_args)that);
      return false;
    }

    public boolean equals(tableOperations_removeConstraint_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_constraint = true;
      boolean that_present_constraint = true;
      if (this_present_constraint || that_present_constraint) {
        if (!(this_present_constraint && that_present_constraint))
          return false;
        if (this.constraint != that.constraint)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_removeConstraint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_removeConstraint_args typedOther = (tableOperations_removeConstraint_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConstraint()).compareTo(typedOther.isSetConstraint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConstraint()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constraint, typedOther.constraint);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_removeConstraint_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("constraint:");
      sb.append(this.constraint);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_removeConstraint_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_removeConstraint_argsStandardScheme getScheme() {
        return new tableOperations_removeConstraint_argsStandardScheme();
      }
    }

    private static class tableOperations_removeConstraint_argsStandardScheme extends StandardScheme<tableOperations_removeConstraint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_removeConstraint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONSTRAINT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.constraint = iprot.readI32();
                struct.setConstraintIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_removeConstraint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CONSTRAINT_FIELD_DESC);
        oprot.writeI32(struct.constraint);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_removeConstraint_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_removeConstraint_argsTupleScheme getScheme() {
        return new tableOperations_removeConstraint_argsTupleScheme();
      }
    }

    private static class tableOperations_removeConstraint_argsTupleScheme extends TupleScheme<tableOperations_removeConstraint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_removeConstraint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        if (struct.isSetConstraint()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetConstraint()) {
          oprot.writeI32(struct.constraint);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_removeConstraint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.constraint = iprot.readI32();
          struct.setConstraintIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_removeConstraint_result implements org.apache.thrift.TBase<tableOperations_removeConstraint_result, tableOperations_removeConstraint_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_removeConstraint_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_removeConstraint_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_removeConstraint_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_removeConstraint_result.class, metaDataMap);
    }

    public tableOperations_removeConstraint_result() {
    }

    public tableOperations_removeConstraint_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_removeConstraint_result(tableOperations_removeConstraint_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public tableOperations_removeConstraint_result deepCopy() {
      return new tableOperations_removeConstraint_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_removeConstraint_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_removeConstraint_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_removeConstraint_result)
        return this.equals((tableOperations_removeConstraint_result)that);
      return false;
    }

    public boolean equals(tableOperations_removeConstraint_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_removeConstraint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_removeConstraint_result typedOther = (tableOperations_removeConstraint_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_removeConstraint_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_removeConstraint_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_removeConstraint_resultStandardScheme getScheme() {
        return new tableOperations_removeConstraint_resultStandardScheme();
      }
    }

    private static class tableOperations_removeConstraint_resultStandardScheme extends StandardScheme<tableOperations_removeConstraint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_removeConstraint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_removeConstraint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_removeConstraint_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_removeConstraint_resultTupleScheme getScheme() {
        return new tableOperations_removeConstraint_resultTupleScheme();
      }
    }

    private static class tableOperations_removeConstraint_resultTupleScheme extends TupleScheme<tableOperations_removeConstraint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_removeConstraint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_removeConstraint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_removeProperty_args implements org.apache.thrift.TBase<tableOperations_removeProperty_args, tableOperations_removeProperty_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_removeProperty_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_removeProperty_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_removeProperty_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required
    public String property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName"),
      PROPERTY((short)3, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_removeProperty_args.class, metaDataMap);
    }

    public tableOperations_removeProperty_args() {
    }

    public tableOperations_removeProperty_args(
      UserPass userpass,
      String tableName,
      String property)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_removeProperty_args(tableOperations_removeProperty_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetProperty()) {
        this.property = other.property;
      }
    }

    public tableOperations_removeProperty_args deepCopy() {
      return new tableOperations_removeProperty_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
      this.property = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_removeProperty_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_removeProperty_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public String getProperty() {
      return this.property;
    }

    public tableOperations_removeProperty_args setProperty(String property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_removeProperty_args)
        return this.equals((tableOperations_removeProperty_args)that);
      return false;
    }

    public boolean equals(tableOperations_removeProperty_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_removeProperty_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_removeProperty_args typedOther = (tableOperations_removeProperty_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(typedOther.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, typedOther.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_removeProperty_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_removeProperty_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_removeProperty_argsStandardScheme getScheme() {
        return new tableOperations_removeProperty_argsStandardScheme();
      }
    }

    private static class tableOperations_removeProperty_argsStandardScheme extends StandardScheme<tableOperations_removeProperty_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_removeProperty_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.property = iprot.readString();
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_removeProperty_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          oprot.writeString(struct.property);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_removeProperty_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_removeProperty_argsTupleScheme getScheme() {
        return new tableOperations_removeProperty_argsTupleScheme();
      }
    }

    private static class tableOperations_removeProperty_argsTupleScheme extends TupleScheme<tableOperations_removeProperty_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_removeProperty_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        if (struct.isSetProperty()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetProperty()) {
          oprot.writeString(struct.property);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_removeProperty_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.property = iprot.readString();
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_removeProperty_result implements org.apache.thrift.TBase<tableOperations_removeProperty_result, tableOperations_removeProperty_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_removeProperty_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_removeProperty_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_removeProperty_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_removeProperty_result.class, metaDataMap);
    }

    public tableOperations_removeProperty_result() {
    }

    public tableOperations_removeProperty_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_removeProperty_result(tableOperations_removeProperty_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public tableOperations_removeProperty_result deepCopy() {
      return new tableOperations_removeProperty_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_removeProperty_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_removeProperty_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_removeProperty_result)
        return this.equals((tableOperations_removeProperty_result)that);
      return false;
    }

    public boolean equals(tableOperations_removeProperty_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_removeProperty_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_removeProperty_result typedOther = (tableOperations_removeProperty_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_removeProperty_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_removeProperty_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_removeProperty_resultStandardScheme getScheme() {
        return new tableOperations_removeProperty_resultStandardScheme();
      }
    }

    private static class tableOperations_removeProperty_resultStandardScheme extends StandardScheme<tableOperations_removeProperty_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_removeProperty_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_removeProperty_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_removeProperty_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_removeProperty_resultTupleScheme getScheme() {
        return new tableOperations_removeProperty_resultTupleScheme();
      }
    }

    private static class tableOperations_removeProperty_resultTupleScheme extends TupleScheme<tableOperations_removeProperty_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_removeProperty_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_removeProperty_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_rename_args implements org.apache.thrift.TBase<tableOperations_rename_args, tableOperations_rename_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_rename_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OLD_TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("oldTableName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NEW_TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("newTableName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_rename_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_rename_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String oldTableName; // required
    public String newTableName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      OLD_TABLE_NAME((short)2, "oldTableName"),
      NEW_TABLE_NAME((short)3, "newTableName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // OLD_TABLE_NAME
            return OLD_TABLE_NAME;
          case 3: // NEW_TABLE_NAME
            return NEW_TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.OLD_TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("oldTableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("newTableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_rename_args.class, metaDataMap);
    }

    public tableOperations_rename_args() {
    }

    public tableOperations_rename_args(
      UserPass userpass,
      String oldTableName,
      String newTableName)
    {
      this();
      this.userpass = userpass;
      this.oldTableName = oldTableName;
      this.newTableName = newTableName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_rename_args(tableOperations_rename_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetOldTableName()) {
        this.oldTableName = other.oldTableName;
      }
      if (other.isSetNewTableName()) {
        this.newTableName = other.newTableName;
      }
    }

    public tableOperations_rename_args deepCopy() {
      return new tableOperations_rename_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.oldTableName = null;
      this.newTableName = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_rename_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getOldTableName() {
      return this.oldTableName;
    }

    public tableOperations_rename_args setOldTableName(String oldTableName) {
      this.oldTableName = oldTableName;
      return this;
    }

    public void unsetOldTableName() {
      this.oldTableName = null;
    }

    /** Returns true if field oldTableName is set (has been assigned a value) and false otherwise */
    public boolean isSetOldTableName() {
      return this.oldTableName != null;
    }

    public void setOldTableNameIsSet(boolean value) {
      if (!value) {
        this.oldTableName = null;
      }
    }

    public String getNewTableName() {
      return this.newTableName;
    }

    public tableOperations_rename_args setNewTableName(String newTableName) {
      this.newTableName = newTableName;
      return this;
    }

    public void unsetNewTableName() {
      this.newTableName = null;
    }

    /** Returns true if field newTableName is set (has been assigned a value) and false otherwise */
    public boolean isSetNewTableName() {
      return this.newTableName != null;
    }

    public void setNewTableNameIsSet(boolean value) {
      if (!value) {
        this.newTableName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case OLD_TABLE_NAME:
        if (value == null) {
          unsetOldTableName();
        } else {
          setOldTableName((String)value);
        }
        break;

      case NEW_TABLE_NAME:
        if (value == null) {
          unsetNewTableName();
        } else {
          setNewTableName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case OLD_TABLE_NAME:
        return getOldTableName();

      case NEW_TABLE_NAME:
        return getNewTableName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case OLD_TABLE_NAME:
        return isSetOldTableName();
      case NEW_TABLE_NAME:
        return isSetNewTableName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_rename_args)
        return this.equals((tableOperations_rename_args)that);
      return false;
    }

    public boolean equals(tableOperations_rename_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_oldTableName = true && this.isSetOldTableName();
      boolean that_present_oldTableName = true && that.isSetOldTableName();
      if (this_present_oldTableName || that_present_oldTableName) {
        if (!(this_present_oldTableName && that_present_oldTableName))
          return false;
        if (!this.oldTableName.equals(that.oldTableName))
          return false;
      }

      boolean this_present_newTableName = true && this.isSetNewTableName();
      boolean that_present_newTableName = true && that.isSetNewTableName();
      if (this_present_newTableName || that_present_newTableName) {
        if (!(this_present_newTableName && that_present_newTableName))
          return false;
        if (!this.newTableName.equals(that.newTableName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_rename_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_rename_args typedOther = (tableOperations_rename_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldTableName()).compareTo(typedOther.isSetOldTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldTableName, typedOther.oldTableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewTableName()).compareTo(typedOther.isSetNewTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newTableName, typedOther.newTableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_rename_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldTableName:");
      if (this.oldTableName == null) {
        sb.append("null");
      } else {
        sb.append(this.oldTableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newTableName:");
      if (this.newTableName == null) {
        sb.append("null");
      } else {
        sb.append(this.newTableName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_rename_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_rename_argsStandardScheme getScheme() {
        return new tableOperations_rename_argsStandardScheme();
      }
    }

    private static class tableOperations_rename_argsStandardScheme extends StandardScheme<tableOperations_rename_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_rename_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OLD_TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.oldTableName = iprot.readString();
                struct.setOldTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NEW_TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newTableName = iprot.readString();
                struct.setNewTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_rename_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.oldTableName != null) {
          oprot.writeFieldBegin(OLD_TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.oldTableName);
          oprot.writeFieldEnd();
        }
        if (struct.newTableName != null) {
          oprot.writeFieldBegin(NEW_TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.newTableName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_rename_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_rename_argsTupleScheme getScheme() {
        return new tableOperations_rename_argsTupleScheme();
      }
    }

    private static class tableOperations_rename_argsTupleScheme extends TupleScheme<tableOperations_rename_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_rename_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetOldTableName()) {
          optionals.set(1);
        }
        if (struct.isSetNewTableName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetOldTableName()) {
          oprot.writeString(struct.oldTableName);
        }
        if (struct.isSetNewTableName()) {
          oprot.writeString(struct.newTableName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_rename_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oldTableName = iprot.readString();
          struct.setOldTableNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.newTableName = iprot.readString();
          struct.setNewTableNameIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_rename_result implements org.apache.thrift.TBase<tableOperations_rename_result, tableOperations_rename_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_rename_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField OUCH3_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch3", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField OUCH4_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch4", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_rename_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_rename_resultTupleSchemeFactory());
    }

    public AccumuloSecurityException ouch1; // required
    public TableNotFoundException ouch2; // required
    public AccumuloException ouch3; // required
    public TableExistsException ouch4; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2"),
      OUCH3((short)3, "ouch3"),
      OUCH4((short)4, "ouch4");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          case 3: // OUCH3
            return OUCH3;
          case 4: // OUCH4
            return OUCH4;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH3, new org.apache.thrift.meta_data.FieldMetaData("ouch3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH4, new org.apache.thrift.meta_data.FieldMetaData("ouch4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_rename_result.class, metaDataMap);
    }

    public tableOperations_rename_result() {
    }

    public tableOperations_rename_result(
      AccumuloSecurityException ouch1,
      TableNotFoundException ouch2,
      AccumuloException ouch3,
      TableExistsException ouch4)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
      this.ouch3 = ouch3;
      this.ouch4 = ouch4;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_rename_result(tableOperations_rename_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloSecurityException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new TableNotFoundException(other.ouch2);
      }
      if (other.isSetOuch3()) {
        this.ouch3 = new AccumuloException(other.ouch3);
      }
      if (other.isSetOuch4()) {
        this.ouch4 = new TableExistsException(other.ouch4);
      }
    }

    public tableOperations_rename_result deepCopy() {
      return new tableOperations_rename_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
      this.ouch3 = null;
      this.ouch4 = null;
    }

    public AccumuloSecurityException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_rename_result setOuch1(AccumuloSecurityException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public TableNotFoundException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_rename_result setOuch2(TableNotFoundException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public AccumuloException getOuch3() {
      return this.ouch3;
    }

    public tableOperations_rename_result setOuch3(AccumuloException ouch3) {
      this.ouch3 = ouch3;
      return this;
    }

    public void unsetOuch3() {
      this.ouch3 = null;
    }

    /** Returns true if field ouch3 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch3() {
      return this.ouch3 != null;
    }

    public void setOuch3IsSet(boolean value) {
      if (!value) {
        this.ouch3 = null;
      }
    }

    public TableExistsException getOuch4() {
      return this.ouch4;
    }

    public tableOperations_rename_result setOuch4(TableExistsException ouch4) {
      this.ouch4 = ouch4;
      return this;
    }

    public void unsetOuch4() {
      this.ouch4 = null;
    }

    /** Returns true if field ouch4 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch4() {
      return this.ouch4 != null;
    }

    public void setOuch4IsSet(boolean value) {
      if (!value) {
        this.ouch4 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloSecurityException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((TableNotFoundException)value);
        }
        break;

      case OUCH3:
        if (value == null) {
          unsetOuch3();
        } else {
          setOuch3((AccumuloException)value);
        }
        break;

      case OUCH4:
        if (value == null) {
          unsetOuch4();
        } else {
          setOuch4((TableExistsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      case OUCH3:
        return getOuch3();

      case OUCH4:
        return getOuch4();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      case OUCH3:
        return isSetOuch3();
      case OUCH4:
        return isSetOuch4();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_rename_result)
        return this.equals((tableOperations_rename_result)that);
      return false;
    }

    public boolean equals(tableOperations_rename_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      boolean this_present_ouch3 = true && this.isSetOuch3();
      boolean that_present_ouch3 = true && that.isSetOuch3();
      if (this_present_ouch3 || that_present_ouch3) {
        if (!(this_present_ouch3 && that_present_ouch3))
          return false;
        if (!this.ouch3.equals(that.ouch3))
          return false;
      }

      boolean this_present_ouch4 = true && this.isSetOuch4();
      boolean that_present_ouch4 = true && that.isSetOuch4();
      if (this_present_ouch4 || that_present_ouch4) {
        if (!(this_present_ouch4 && that_present_ouch4))
          return false;
        if (!this.ouch4.equals(that.ouch4))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_rename_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_rename_result typedOther = (tableOperations_rename_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch3()).compareTo(typedOther.isSetOuch3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch3, typedOther.ouch3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch4()).compareTo(typedOther.isSetOuch4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch4()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch4, typedOther.ouch4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_rename_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch3:");
      if (this.ouch3 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch4:");
      if (this.ouch4 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch4);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_rename_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_rename_resultStandardScheme getScheme() {
        return new tableOperations_rename_resultStandardScheme();
      }
    }

    private static class tableOperations_rename_resultStandardScheme extends StandardScheme<tableOperations_rename_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_rename_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloSecurityException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new TableNotFoundException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUCH3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch3 = new AccumuloException();
                struct.ouch3.read(iprot);
                struct.setOuch3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUCH4
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch4 = new TableExistsException();
                struct.ouch4.read(iprot);
                struct.setOuch4IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_rename_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch3 != null) {
          oprot.writeFieldBegin(OUCH3_FIELD_DESC);
          struct.ouch3.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch4 != null) {
          oprot.writeFieldBegin(OUCH4_FIELD_DESC);
          struct.ouch4.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_rename_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_rename_resultTupleScheme getScheme() {
        return new tableOperations_rename_resultTupleScheme();
      }
    }

    private static class tableOperations_rename_resultTupleScheme extends TupleScheme<tableOperations_rename_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_rename_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        if (struct.isSetOuch3()) {
          optionals.set(2);
        }
        if (struct.isSetOuch4()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
        if (struct.isSetOuch3()) {
          struct.ouch3.write(oprot);
        }
        if (struct.isSetOuch4()) {
          struct.ouch4.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_rename_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloSecurityException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new TableNotFoundException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch3 = new AccumuloException();
          struct.ouch3.read(iprot);
          struct.setOuch3IsSet(true);
        }
        if (incoming.get(3)) {
          struct.ouch4 = new TableExistsException();
          struct.ouch4.read(iprot);
          struct.setOuch4IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_setLocalityGroups_args implements org.apache.thrift.TBase<tableOperations_setLocalityGroups_args, tableOperations_setLocalityGroups_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_setLocalityGroups_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("groups", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_setLocalityGroups_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_setLocalityGroups_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required
    public Map<String,Set<String>> groups; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName"),
      GROUPS((short)3, "groups");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // GROUPS
            return GROUPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUPS, new org.apache.thrift.meta_data.FieldMetaData("groups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_setLocalityGroups_args.class, metaDataMap);
    }

    public tableOperations_setLocalityGroups_args() {
    }

    public tableOperations_setLocalityGroups_args(
      UserPass userpass,
      String tableName,
      Map<String,Set<String>> groups)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
      this.groups = groups;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_setLocalityGroups_args(tableOperations_setLocalityGroups_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetGroups()) {
        Map<String,Set<String>> __this__groups = new HashMap<String,Set<String>>();
        for (Map.Entry<String, Set<String>> other_element : other.groups.entrySet()) {

          String other_element_key = other_element.getKey();
          Set<String> other_element_value = other_element.getValue();

          String __this__groups_copy_key = other_element_key;

          Set<String> __this__groups_copy_value = new HashSet<String>();
          for (String other_element_value_element : other_element_value) {
            __this__groups_copy_value.add(other_element_value_element);
          }

          __this__groups.put(__this__groups_copy_key, __this__groups_copy_value);
        }
        this.groups = __this__groups;
      }
    }

    public tableOperations_setLocalityGroups_args deepCopy() {
      return new tableOperations_setLocalityGroups_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
      this.groups = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_setLocalityGroups_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_setLocalityGroups_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public int getGroupsSize() {
      return (this.groups == null) ? 0 : this.groups.size();
    }

    public void putToGroups(String key, Set<String> val) {
      if (this.groups == null) {
        this.groups = new HashMap<String,Set<String>>();
      }
      this.groups.put(key, val);
    }

    public Map<String,Set<String>> getGroups() {
      return this.groups;
    }

    public tableOperations_setLocalityGroups_args setGroups(Map<String,Set<String>> groups) {
      this.groups = groups;
      return this;
    }

    public void unsetGroups() {
      this.groups = null;
    }

    /** Returns true if field groups is set (has been assigned a value) and false otherwise */
    public boolean isSetGroups() {
      return this.groups != null;
    }

    public void setGroupsIsSet(boolean value) {
      if (!value) {
        this.groups = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      case GROUPS:
        if (value == null) {
          unsetGroups();
        } else {
          setGroups((Map<String,Set<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      case GROUPS:
        return getGroups();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      case GROUPS:
        return isSetGroups();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_setLocalityGroups_args)
        return this.equals((tableOperations_setLocalityGroups_args)that);
      return false;
    }

    public boolean equals(tableOperations_setLocalityGroups_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_groups = true && this.isSetGroups();
      boolean that_present_groups = true && that.isSetGroups();
      if (this_present_groups || that_present_groups) {
        if (!(this_present_groups && that_present_groups))
          return false;
        if (!this.groups.equals(that.groups))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_setLocalityGroups_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_setLocalityGroups_args typedOther = (tableOperations_setLocalityGroups_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroups()).compareTo(typedOther.isSetGroups());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroups()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groups, typedOther.groups);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_setLocalityGroups_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("groups:");
      if (this.groups == null) {
        sb.append("null");
      } else {
        sb.append(this.groups);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_setLocalityGroups_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_setLocalityGroups_argsStandardScheme getScheme() {
        return new tableOperations_setLocalityGroups_argsStandardScheme();
      }
    }

    private static class tableOperations_setLocalityGroups_argsStandardScheme extends StandardScheme<tableOperations_setLocalityGroups_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_setLocalityGroups_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GROUPS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map88 = iprot.readMapBegin();
                  struct.groups = new HashMap<String,Set<String>>(2*_map88.size);
                  for (int _i89 = 0; _i89 < _map88.size; ++_i89)
                  {
                    String _key90; // required
                    Set<String> _val91; // required
                    _key90 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TSet _set92 = iprot.readSetBegin();
                      _val91 = new HashSet<String>(2*_set92.size);
                      for (int _i93 = 0; _i93 < _set92.size; ++_i93)
                      {
                        String _elem94; // required
                        _elem94 = iprot.readString();
                        _val91.add(_elem94);
                      }
                      iprot.readSetEnd();
                    }
                    struct.groups.put(_key90, _val91);
                  }
                  iprot.readMapEnd();
                }
                struct.setGroupsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_setLocalityGroups_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.groups != null) {
          oprot.writeFieldBegin(GROUPS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, struct.groups.size()));
            for (Map.Entry<String, Set<String>> _iter95 : struct.groups.entrySet())
            {
              oprot.writeString(_iter95.getKey());
              {
                oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter95.getValue().size()));
                for (String _iter96 : _iter95.getValue())
                {
                  oprot.writeString(_iter96);
                }
                oprot.writeSetEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_setLocalityGroups_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_setLocalityGroups_argsTupleScheme getScheme() {
        return new tableOperations_setLocalityGroups_argsTupleScheme();
      }
    }

    private static class tableOperations_setLocalityGroups_argsTupleScheme extends TupleScheme<tableOperations_setLocalityGroups_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_setLocalityGroups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        if (struct.isSetGroups()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetGroups()) {
          {
            oprot.writeI32(struct.groups.size());
            for (Map.Entry<String, Set<String>> _iter97 : struct.groups.entrySet())
            {
              oprot.writeString(_iter97.getKey());
              {
                oprot.writeI32(_iter97.getValue().size());
                for (String _iter98 : _iter97.getValue())
                {
                  oprot.writeString(_iter98);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_setLocalityGroups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map99 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, iprot.readI32());
            struct.groups = new HashMap<String,Set<String>>(2*_map99.size);
            for (int _i100 = 0; _i100 < _map99.size; ++_i100)
            {
              String _key101; // required
              Set<String> _val102; // required
              _key101 = iprot.readString();
              {
                org.apache.thrift.protocol.TSet _set103 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val102 = new HashSet<String>(2*_set103.size);
                for (int _i104 = 0; _i104 < _set103.size; ++_i104)
                {
                  String _elem105; // required
                  _elem105 = iprot.readString();
                  _val102.add(_elem105);
                }
              }
              struct.groups.put(_key101, _val102);
            }
          }
          struct.setGroupsIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_setLocalityGroups_result implements org.apache.thrift.TBase<tableOperations_setLocalityGroups_result, tableOperations_setLocalityGroups_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_setLocalityGroups_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField OUCH3_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_setLocalityGroups_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_setLocalityGroups_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required
    public TableNotFoundException ouch3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2"),
      OUCH3((short)3, "ouch3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          case 3: // OUCH3
            return OUCH3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH3, new org.apache.thrift.meta_data.FieldMetaData("ouch3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_setLocalityGroups_result.class, metaDataMap);
    }

    public tableOperations_setLocalityGroups_result() {
    }

    public tableOperations_setLocalityGroups_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2,
      TableNotFoundException ouch3)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
      this.ouch3 = ouch3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_setLocalityGroups_result(tableOperations_setLocalityGroups_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
      if (other.isSetOuch3()) {
        this.ouch3 = new TableNotFoundException(other.ouch3);
      }
    }

    public tableOperations_setLocalityGroups_result deepCopy() {
      return new tableOperations_setLocalityGroups_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
      this.ouch3 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_setLocalityGroups_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_setLocalityGroups_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public TableNotFoundException getOuch3() {
      return this.ouch3;
    }

    public tableOperations_setLocalityGroups_result setOuch3(TableNotFoundException ouch3) {
      this.ouch3 = ouch3;
      return this;
    }

    public void unsetOuch3() {
      this.ouch3 = null;
    }

    /** Returns true if field ouch3 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch3() {
      return this.ouch3 != null;
    }

    public void setOuch3IsSet(boolean value) {
      if (!value) {
        this.ouch3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      case OUCH3:
        if (value == null) {
          unsetOuch3();
        } else {
          setOuch3((TableNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      case OUCH3:
        return getOuch3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      case OUCH3:
        return isSetOuch3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_setLocalityGroups_result)
        return this.equals((tableOperations_setLocalityGroups_result)that);
      return false;
    }

    public boolean equals(tableOperations_setLocalityGroups_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      boolean this_present_ouch3 = true && this.isSetOuch3();
      boolean that_present_ouch3 = true && that.isSetOuch3();
      if (this_present_ouch3 || that_present_ouch3) {
        if (!(this_present_ouch3 && that_present_ouch3))
          return false;
        if (!this.ouch3.equals(that.ouch3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_setLocalityGroups_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_setLocalityGroups_result typedOther = (tableOperations_setLocalityGroups_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch3()).compareTo(typedOther.isSetOuch3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch3, typedOther.ouch3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_setLocalityGroups_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch3:");
      if (this.ouch3 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_setLocalityGroups_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_setLocalityGroups_resultStandardScheme getScheme() {
        return new tableOperations_setLocalityGroups_resultStandardScheme();
      }
    }

    private static class tableOperations_setLocalityGroups_resultStandardScheme extends StandardScheme<tableOperations_setLocalityGroups_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_setLocalityGroups_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUCH3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch3 = new TableNotFoundException();
                struct.ouch3.read(iprot);
                struct.setOuch3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_setLocalityGroups_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch3 != null) {
          oprot.writeFieldBegin(OUCH3_FIELD_DESC);
          struct.ouch3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_setLocalityGroups_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_setLocalityGroups_resultTupleScheme getScheme() {
        return new tableOperations_setLocalityGroups_resultTupleScheme();
      }
    }

    private static class tableOperations_setLocalityGroups_resultTupleScheme extends TupleScheme<tableOperations_setLocalityGroups_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_setLocalityGroups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        if (struct.isSetOuch3()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
        if (struct.isSetOuch3()) {
          struct.ouch3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_setLocalityGroups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch3 = new TableNotFoundException();
          struct.ouch3.read(iprot);
          struct.setOuch3IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_setProperty_args implements org.apache.thrift.TBase<tableOperations_setProperty_args, tableOperations_setProperty_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_setProperty_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_setProperty_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_setProperty_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required
    public String property; // required
    public String value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName"),
      PROPERTY((short)3, "property"),
      VALUE((short)4, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // PROPERTY
            return PROPERTY;
          case 4: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_setProperty_args.class, metaDataMap);
    }

    public tableOperations_setProperty_args() {
    }

    public tableOperations_setProperty_args(
      UserPass userpass,
      String tableName,
      String property,
      String value)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
      this.property = property;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_setProperty_args(tableOperations_setProperty_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetProperty()) {
        this.property = other.property;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public tableOperations_setProperty_args deepCopy() {
      return new tableOperations_setProperty_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
      this.property = null;
      this.value = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_setProperty_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public tableOperations_setProperty_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public String getProperty() {
      return this.property;
    }

    public tableOperations_setProperty_args setProperty(String property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public tableOperations_setProperty_args setValue(String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      case PROPERTY:
        return getProperty();

      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      case PROPERTY:
        return isSetProperty();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_setProperty_args)
        return this.equals((tableOperations_setProperty_args)that);
      return false;
    }

    public boolean equals(tableOperations_setProperty_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_setProperty_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_setProperty_args typedOther = (tableOperations_setProperty_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(typedOther.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, typedOther.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_setProperty_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_setProperty_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_setProperty_argsStandardScheme getScheme() {
        return new tableOperations_setProperty_argsStandardScheme();
      }
    }

    private static class tableOperations_setProperty_argsStandardScheme extends StandardScheme<tableOperations_setProperty_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_setProperty_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.property = iprot.readString();
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_setProperty_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          oprot.writeString(struct.property);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_setProperty_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_setProperty_argsTupleScheme getScheme() {
        return new tableOperations_setProperty_argsTupleScheme();
      }
    }

    private static class tableOperations_setProperty_argsTupleScheme extends TupleScheme<tableOperations_setProperty_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_setProperty_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        if (struct.isSetProperty()) {
          optionals.set(2);
        }
        if (struct.isSetValue()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetProperty()) {
          oprot.writeString(struct.property);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_setProperty_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.property = iprot.readString();
          struct.setPropertyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_setProperty_result implements org.apache.thrift.TBase<tableOperations_setProperty_result, tableOperations_setProperty_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_setProperty_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_setProperty_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_setProperty_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_setProperty_result.class, metaDataMap);
    }

    public tableOperations_setProperty_result() {
    }

    public tableOperations_setProperty_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_setProperty_result(tableOperations_setProperty_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public tableOperations_setProperty_result deepCopy() {
      return new tableOperations_setProperty_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public tableOperations_setProperty_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public tableOperations_setProperty_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_setProperty_result)
        return this.equals((tableOperations_setProperty_result)that);
      return false;
    }

    public boolean equals(tableOperations_setProperty_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_setProperty_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_setProperty_result typedOther = (tableOperations_setProperty_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_setProperty_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_setProperty_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_setProperty_resultStandardScheme getScheme() {
        return new tableOperations_setProperty_resultStandardScheme();
      }
    }

    private static class tableOperations_setProperty_resultStandardScheme extends StandardScheme<tableOperations_setProperty_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_setProperty_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_setProperty_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_setProperty_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_setProperty_resultTupleScheme getScheme() {
        return new tableOperations_setProperty_resultTupleScheme();
      }
    }

    private static class tableOperations_setProperty_resultTupleScheme extends TupleScheme<tableOperations_setProperty_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_setProperty_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_setProperty_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class tableOperations_tableIdMap_args implements org.apache.thrift.TBase<tableOperations_tableIdMap_args, tableOperations_tableIdMap_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_tableIdMap_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_tableIdMap_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_tableIdMap_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_tableIdMap_args.class, metaDataMap);
    }

    public tableOperations_tableIdMap_args() {
    }

    public tableOperations_tableIdMap_args(
      UserPass userpass)
    {
      this();
      this.userpass = userpass;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_tableIdMap_args(tableOperations_tableIdMap_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
    }

    public tableOperations_tableIdMap_args deepCopy() {
      return new tableOperations_tableIdMap_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public tableOperations_tableIdMap_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_tableIdMap_args)
        return this.equals((tableOperations_tableIdMap_args)that);
      return false;
    }

    public boolean equals(tableOperations_tableIdMap_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_tableIdMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_tableIdMap_args typedOther = (tableOperations_tableIdMap_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_tableIdMap_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_tableIdMap_argsStandardSchemeFactory implements SchemeFactory {
      public tableOperations_tableIdMap_argsStandardScheme getScheme() {
        return new tableOperations_tableIdMap_argsStandardScheme();
      }
    }

    private static class tableOperations_tableIdMap_argsStandardScheme extends StandardScheme<tableOperations_tableIdMap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_tableIdMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_tableIdMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_tableIdMap_argsTupleSchemeFactory implements SchemeFactory {
      public tableOperations_tableIdMap_argsTupleScheme getScheme() {
        return new tableOperations_tableIdMap_argsTupleScheme();
      }
    }

    private static class tableOperations_tableIdMap_argsTupleScheme extends TupleScheme<tableOperations_tableIdMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_tableIdMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_tableIdMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
      }
    }

  }

  public static class tableOperations_tableIdMap_result implements org.apache.thrift.TBase<tableOperations_tableIdMap_result, tableOperations_tableIdMap_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tableOperations_tableIdMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tableOperations_tableIdMap_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tableOperations_tableIdMap_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tableOperations_tableIdMap_result.class, metaDataMap);
    }

    public tableOperations_tableIdMap_result() {
    }

    public tableOperations_tableIdMap_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tableOperations_tableIdMap_result(tableOperations_tableIdMap_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public tableOperations_tableIdMap_result deepCopy() {
      return new tableOperations_tableIdMap_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public tableOperations_tableIdMap_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tableOperations_tableIdMap_result)
        return this.equals((tableOperations_tableIdMap_result)that);
      return false;
    }

    public boolean equals(tableOperations_tableIdMap_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tableOperations_tableIdMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tableOperations_tableIdMap_result typedOther = (tableOperations_tableIdMap_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tableOperations_tableIdMap_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tableOperations_tableIdMap_resultStandardSchemeFactory implements SchemeFactory {
      public tableOperations_tableIdMap_resultStandardScheme getScheme() {
        return new tableOperations_tableIdMap_resultStandardScheme();
      }
    }

    private static class tableOperations_tableIdMap_resultStandardScheme extends StandardScheme<tableOperations_tableIdMap_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tableOperations_tableIdMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map106 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map106.size);
                  for (int _i107 = 0; _i107 < _map106.size; ++_i107)
                  {
                    String _key108; // required
                    String _val109; // required
                    _key108 = iprot.readString();
                    _val109 = iprot.readString();
                    struct.success.put(_key108, _val109);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tableOperations_tableIdMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter110 : struct.success.entrySet())
            {
              oprot.writeString(_iter110.getKey());
              oprot.writeString(_iter110.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tableOperations_tableIdMap_resultTupleSchemeFactory implements SchemeFactory {
      public tableOperations_tableIdMap_resultTupleScheme getScheme() {
        return new tableOperations_tableIdMap_resultTupleScheme();
      }
    }

    private static class tableOperations_tableIdMap_resultTupleScheme extends TupleScheme<tableOperations_tableIdMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tableOperations_tableIdMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter111 : struct.success.entrySet())
            {
              oprot.writeString(_iter111.getKey());
              oprot.writeString(_iter111.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tableOperations_tableIdMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map112 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map112.size);
            for (int _i113 = 0; _i113 < _map112.size; ++_i113)
            {
              String _key114; // required
              String _val115; // required
              _key114 = iprot.readString();
              _val115 = iprot.readString();
              struct.success.put(_key114, _val115);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class instanceOperations_getSiteConfiguration_args implements org.apache.thrift.TBase<instanceOperations_getSiteConfiguration_args, instanceOperations_getSiteConfiguration_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("instanceOperations_getSiteConfiguration_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new instanceOperations_getSiteConfiguration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new instanceOperations_getSiteConfiguration_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(instanceOperations_getSiteConfiguration_args.class, metaDataMap);
    }

    public instanceOperations_getSiteConfiguration_args() {
    }

    public instanceOperations_getSiteConfiguration_args(
      UserPass userpass)
    {
      this();
      this.userpass = userpass;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public instanceOperations_getSiteConfiguration_args(instanceOperations_getSiteConfiguration_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
    }

    public instanceOperations_getSiteConfiguration_args deepCopy() {
      return new instanceOperations_getSiteConfiguration_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public instanceOperations_getSiteConfiguration_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof instanceOperations_getSiteConfiguration_args)
        return this.equals((instanceOperations_getSiteConfiguration_args)that);
      return false;
    }

    public boolean equals(instanceOperations_getSiteConfiguration_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(instanceOperations_getSiteConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      instanceOperations_getSiteConfiguration_args typedOther = (instanceOperations_getSiteConfiguration_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("instanceOperations_getSiteConfiguration_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class instanceOperations_getSiteConfiguration_argsStandardSchemeFactory implements SchemeFactory {
      public instanceOperations_getSiteConfiguration_argsStandardScheme getScheme() {
        return new instanceOperations_getSiteConfiguration_argsStandardScheme();
      }
    }

    private static class instanceOperations_getSiteConfiguration_argsStandardScheme extends StandardScheme<instanceOperations_getSiteConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, instanceOperations_getSiteConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, instanceOperations_getSiteConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class instanceOperations_getSiteConfiguration_argsTupleSchemeFactory implements SchemeFactory {
      public instanceOperations_getSiteConfiguration_argsTupleScheme getScheme() {
        return new instanceOperations_getSiteConfiguration_argsTupleScheme();
      }
    }

    private static class instanceOperations_getSiteConfiguration_argsTupleScheme extends TupleScheme<instanceOperations_getSiteConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, instanceOperations_getSiteConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, instanceOperations_getSiteConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
      }
    }

  }

  public static class instanceOperations_getSiteConfiguration_result implements org.apache.thrift.TBase<instanceOperations_getSiteConfiguration_result, instanceOperations_getSiteConfiguration_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("instanceOperations_getSiteConfiguration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new instanceOperations_getSiteConfiguration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new instanceOperations_getSiteConfiguration_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(instanceOperations_getSiteConfiguration_result.class, metaDataMap);
    }

    public instanceOperations_getSiteConfiguration_result() {
    }

    public instanceOperations_getSiteConfiguration_result(
      Map<String,String> success,
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.success = success;
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public instanceOperations_getSiteConfiguration_result(instanceOperations_getSiteConfiguration_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public instanceOperations_getSiteConfiguration_result deepCopy() {
      return new instanceOperations_getSiteConfiguration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public instanceOperations_getSiteConfiguration_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public instanceOperations_getSiteConfiguration_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public instanceOperations_getSiteConfiguration_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof instanceOperations_getSiteConfiguration_result)
        return this.equals((instanceOperations_getSiteConfiguration_result)that);
      return false;
    }

    public boolean equals(instanceOperations_getSiteConfiguration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(instanceOperations_getSiteConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      instanceOperations_getSiteConfiguration_result typedOther = (instanceOperations_getSiteConfiguration_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("instanceOperations_getSiteConfiguration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class instanceOperations_getSiteConfiguration_resultStandardSchemeFactory implements SchemeFactory {
      public instanceOperations_getSiteConfiguration_resultStandardScheme getScheme() {
        return new instanceOperations_getSiteConfiguration_resultStandardScheme();
      }
    }

    private static class instanceOperations_getSiteConfiguration_resultStandardScheme extends StandardScheme<instanceOperations_getSiteConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, instanceOperations_getSiteConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map116 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map116.size);
                  for (int _i117 = 0; _i117 < _map116.size; ++_i117)
                  {
                    String _key118; // required
                    String _val119; // required
                    _key118 = iprot.readString();
                    _val119 = iprot.readString();
                    struct.success.put(_key118, _val119);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, instanceOperations_getSiteConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter120 : struct.success.entrySet())
            {
              oprot.writeString(_iter120.getKey());
              oprot.writeString(_iter120.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class instanceOperations_getSiteConfiguration_resultTupleSchemeFactory implements SchemeFactory {
      public instanceOperations_getSiteConfiguration_resultTupleScheme getScheme() {
        return new instanceOperations_getSiteConfiguration_resultTupleScheme();
      }
    }

    private static class instanceOperations_getSiteConfiguration_resultTupleScheme extends TupleScheme<instanceOperations_getSiteConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, instanceOperations_getSiteConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch1()) {
          optionals.set(1);
        }
        if (struct.isSetOuch2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter121 : struct.success.entrySet())
            {
              oprot.writeString(_iter121.getKey());
              oprot.writeString(_iter121.getValue());
            }
          }
        }
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, instanceOperations_getSiteConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map122 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map122.size);
            for (int _i123 = 0; _i123 < _map122.size; ++_i123)
            {
              String _key124; // required
              String _val125; // required
              _key124 = iprot.readString();
              _val125 = iprot.readString();
              struct.success.put(_key124, _val125);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class instanceOperations_getSystemConfiguration_args implements org.apache.thrift.TBase<instanceOperations_getSystemConfiguration_args, instanceOperations_getSystemConfiguration_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("instanceOperations_getSystemConfiguration_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new instanceOperations_getSystemConfiguration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new instanceOperations_getSystemConfiguration_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(instanceOperations_getSystemConfiguration_args.class, metaDataMap);
    }

    public instanceOperations_getSystemConfiguration_args() {
    }

    public instanceOperations_getSystemConfiguration_args(
      UserPass userpass)
    {
      this();
      this.userpass = userpass;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public instanceOperations_getSystemConfiguration_args(instanceOperations_getSystemConfiguration_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
    }

    public instanceOperations_getSystemConfiguration_args deepCopy() {
      return new instanceOperations_getSystemConfiguration_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public instanceOperations_getSystemConfiguration_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof instanceOperations_getSystemConfiguration_args)
        return this.equals((instanceOperations_getSystemConfiguration_args)that);
      return false;
    }

    public boolean equals(instanceOperations_getSystemConfiguration_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(instanceOperations_getSystemConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      instanceOperations_getSystemConfiguration_args typedOther = (instanceOperations_getSystemConfiguration_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("instanceOperations_getSystemConfiguration_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class instanceOperations_getSystemConfiguration_argsStandardSchemeFactory implements SchemeFactory {
      public instanceOperations_getSystemConfiguration_argsStandardScheme getScheme() {
        return new instanceOperations_getSystemConfiguration_argsStandardScheme();
      }
    }

    private static class instanceOperations_getSystemConfiguration_argsStandardScheme extends StandardScheme<instanceOperations_getSystemConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, instanceOperations_getSystemConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, instanceOperations_getSystemConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class instanceOperations_getSystemConfiguration_argsTupleSchemeFactory implements SchemeFactory {
      public instanceOperations_getSystemConfiguration_argsTupleScheme getScheme() {
        return new instanceOperations_getSystemConfiguration_argsTupleScheme();
      }
    }

    private static class instanceOperations_getSystemConfiguration_argsTupleScheme extends TupleScheme<instanceOperations_getSystemConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, instanceOperations_getSystemConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, instanceOperations_getSystemConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
      }
    }

  }

  public static class instanceOperations_getSystemConfiguration_result implements org.apache.thrift.TBase<instanceOperations_getSystemConfiguration_result, instanceOperations_getSystemConfiguration_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("instanceOperations_getSystemConfiguration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new instanceOperations_getSystemConfiguration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new instanceOperations_getSystemConfiguration_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(instanceOperations_getSystemConfiguration_result.class, metaDataMap);
    }

    public instanceOperations_getSystemConfiguration_result() {
    }

    public instanceOperations_getSystemConfiguration_result(
      Map<String,String> success,
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.success = success;
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public instanceOperations_getSystemConfiguration_result(instanceOperations_getSystemConfiguration_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public instanceOperations_getSystemConfiguration_result deepCopy() {
      return new instanceOperations_getSystemConfiguration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public instanceOperations_getSystemConfiguration_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public instanceOperations_getSystemConfiguration_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public instanceOperations_getSystemConfiguration_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof instanceOperations_getSystemConfiguration_result)
        return this.equals((instanceOperations_getSystemConfiguration_result)that);
      return false;
    }

    public boolean equals(instanceOperations_getSystemConfiguration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(instanceOperations_getSystemConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      instanceOperations_getSystemConfiguration_result typedOther = (instanceOperations_getSystemConfiguration_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("instanceOperations_getSystemConfiguration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class instanceOperations_getSystemConfiguration_resultStandardSchemeFactory implements SchemeFactory {
      public instanceOperations_getSystemConfiguration_resultStandardScheme getScheme() {
        return new instanceOperations_getSystemConfiguration_resultStandardScheme();
      }
    }

    private static class instanceOperations_getSystemConfiguration_resultStandardScheme extends StandardScheme<instanceOperations_getSystemConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, instanceOperations_getSystemConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map126 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map126.size);
                  for (int _i127 = 0; _i127 < _map126.size; ++_i127)
                  {
                    String _key128; // required
                    String _val129; // required
                    _key128 = iprot.readString();
                    _val129 = iprot.readString();
                    struct.success.put(_key128, _val129);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, instanceOperations_getSystemConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter130 : struct.success.entrySet())
            {
              oprot.writeString(_iter130.getKey());
              oprot.writeString(_iter130.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class instanceOperations_getSystemConfiguration_resultTupleSchemeFactory implements SchemeFactory {
      public instanceOperations_getSystemConfiguration_resultTupleScheme getScheme() {
        return new instanceOperations_getSystemConfiguration_resultTupleScheme();
      }
    }

    private static class instanceOperations_getSystemConfiguration_resultTupleScheme extends TupleScheme<instanceOperations_getSystemConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, instanceOperations_getSystemConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch1()) {
          optionals.set(1);
        }
        if (struct.isSetOuch2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter131 : struct.success.entrySet())
            {
              oprot.writeString(_iter131.getKey());
              oprot.writeString(_iter131.getValue());
            }
          }
        }
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, instanceOperations_getSystemConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map132 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map132.size);
            for (int _i133 = 0; _i133 < _map132.size; ++_i133)
            {
              String _key134; // required
              String _val135; // required
              _key134 = iprot.readString();
              _val135 = iprot.readString();
              struct.success.put(_key134, _val135);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class instanceOperations_getTabletServers_args implements org.apache.thrift.TBase<instanceOperations_getTabletServers_args, instanceOperations_getTabletServers_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("instanceOperations_getTabletServers_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new instanceOperations_getTabletServers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new instanceOperations_getTabletServers_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(instanceOperations_getTabletServers_args.class, metaDataMap);
    }

    public instanceOperations_getTabletServers_args() {
    }

    public instanceOperations_getTabletServers_args(
      UserPass userpass)
    {
      this();
      this.userpass = userpass;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public instanceOperations_getTabletServers_args(instanceOperations_getTabletServers_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
    }

    public instanceOperations_getTabletServers_args deepCopy() {
      return new instanceOperations_getTabletServers_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public instanceOperations_getTabletServers_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof instanceOperations_getTabletServers_args)
        return this.equals((instanceOperations_getTabletServers_args)that);
      return false;
    }

    public boolean equals(instanceOperations_getTabletServers_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(instanceOperations_getTabletServers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      instanceOperations_getTabletServers_args typedOther = (instanceOperations_getTabletServers_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("instanceOperations_getTabletServers_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class instanceOperations_getTabletServers_argsStandardSchemeFactory implements SchemeFactory {
      public instanceOperations_getTabletServers_argsStandardScheme getScheme() {
        return new instanceOperations_getTabletServers_argsStandardScheme();
      }
    }

    private static class instanceOperations_getTabletServers_argsStandardScheme extends StandardScheme<instanceOperations_getTabletServers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, instanceOperations_getTabletServers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, instanceOperations_getTabletServers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class instanceOperations_getTabletServers_argsTupleSchemeFactory implements SchemeFactory {
      public instanceOperations_getTabletServers_argsTupleScheme getScheme() {
        return new instanceOperations_getTabletServers_argsTupleScheme();
      }
    }

    private static class instanceOperations_getTabletServers_argsTupleScheme extends TupleScheme<instanceOperations_getTabletServers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, instanceOperations_getTabletServers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, instanceOperations_getTabletServers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
      }
    }

  }

  public static class instanceOperations_getTabletServers_result implements org.apache.thrift.TBase<instanceOperations_getTabletServers_result, instanceOperations_getTabletServers_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("instanceOperations_getTabletServers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new instanceOperations_getTabletServers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new instanceOperations_getTabletServers_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(instanceOperations_getTabletServers_result.class, metaDataMap);
    }

    public instanceOperations_getTabletServers_result() {
    }

    public instanceOperations_getTabletServers_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public instanceOperations_getTabletServers_result(instanceOperations_getTabletServers_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public instanceOperations_getTabletServers_result deepCopy() {
      return new instanceOperations_getTabletServers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public instanceOperations_getTabletServers_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof instanceOperations_getTabletServers_result)
        return this.equals((instanceOperations_getTabletServers_result)that);
      return false;
    }

    public boolean equals(instanceOperations_getTabletServers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(instanceOperations_getTabletServers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      instanceOperations_getTabletServers_result typedOther = (instanceOperations_getTabletServers_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("instanceOperations_getTabletServers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class instanceOperations_getTabletServers_resultStandardSchemeFactory implements SchemeFactory {
      public instanceOperations_getTabletServers_resultStandardScheme getScheme() {
        return new instanceOperations_getTabletServers_resultStandardScheme();
      }
    }

    private static class instanceOperations_getTabletServers_resultStandardScheme extends StandardScheme<instanceOperations_getTabletServers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, instanceOperations_getTabletServers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list136.size);
                  for (int _i137 = 0; _i137 < _list136.size; ++_i137)
                  {
                    String _elem138; // required
                    _elem138 = iprot.readString();
                    struct.success.add(_elem138);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, instanceOperations_getTabletServers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter139 : struct.success)
            {
              oprot.writeString(_iter139);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class instanceOperations_getTabletServers_resultTupleSchemeFactory implements SchemeFactory {
      public instanceOperations_getTabletServers_resultTupleScheme getScheme() {
        return new instanceOperations_getTabletServers_resultTupleScheme();
      }
    }

    private static class instanceOperations_getTabletServers_resultTupleScheme extends TupleScheme<instanceOperations_getTabletServers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, instanceOperations_getTabletServers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter140 : struct.success)
            {
              oprot.writeString(_iter140);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, instanceOperations_getTabletServers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list141.size);
            for (int _i142 = 0; _i142 < _list141.size; ++_i142)
            {
              String _elem143; // required
              _elem143 = iprot.readString();
              struct.success.add(_elem143);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class instanceOperations_removeProperty_args implements org.apache.thrift.TBase<instanceOperations_removeProperty_args, instanceOperations_removeProperty_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("instanceOperations_removeProperty_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new instanceOperations_removeProperty_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new instanceOperations_removeProperty_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String property; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      PROPERTY((short)2, "property");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(instanceOperations_removeProperty_args.class, metaDataMap);
    }

    public instanceOperations_removeProperty_args() {
    }

    public instanceOperations_removeProperty_args(
      UserPass userpass,
      String property)
    {
      this();
      this.userpass = userpass;
      this.property = property;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public instanceOperations_removeProperty_args(instanceOperations_removeProperty_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetProperty()) {
        this.property = other.property;
      }
    }

    public instanceOperations_removeProperty_args deepCopy() {
      return new instanceOperations_removeProperty_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.property = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public instanceOperations_removeProperty_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getProperty() {
      return this.property;
    }

    public instanceOperations_removeProperty_args setProperty(String property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case PROPERTY:
        return getProperty();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case PROPERTY:
        return isSetProperty();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof instanceOperations_removeProperty_args)
        return this.equals((instanceOperations_removeProperty_args)that);
      return false;
    }

    public boolean equals(instanceOperations_removeProperty_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(instanceOperations_removeProperty_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      instanceOperations_removeProperty_args typedOther = (instanceOperations_removeProperty_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(typedOther.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, typedOther.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("instanceOperations_removeProperty_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class instanceOperations_removeProperty_argsStandardSchemeFactory implements SchemeFactory {
      public instanceOperations_removeProperty_argsStandardScheme getScheme() {
        return new instanceOperations_removeProperty_argsStandardScheme();
      }
    }

    private static class instanceOperations_removeProperty_argsStandardScheme extends StandardScheme<instanceOperations_removeProperty_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, instanceOperations_removeProperty_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.property = iprot.readString();
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, instanceOperations_removeProperty_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          oprot.writeString(struct.property);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class instanceOperations_removeProperty_argsTupleSchemeFactory implements SchemeFactory {
      public instanceOperations_removeProperty_argsTupleScheme getScheme() {
        return new instanceOperations_removeProperty_argsTupleScheme();
      }
    }

    private static class instanceOperations_removeProperty_argsTupleScheme extends TupleScheme<instanceOperations_removeProperty_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, instanceOperations_removeProperty_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetProperty()) {
          oprot.writeString(struct.property);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, instanceOperations_removeProperty_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = iprot.readString();
          struct.setPropertyIsSet(true);
        }
      }
    }

  }

  public static class instanceOperations_removeProperty_result implements org.apache.thrift.TBase<instanceOperations_removeProperty_result, instanceOperations_removeProperty_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("instanceOperations_removeProperty_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new instanceOperations_removeProperty_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new instanceOperations_removeProperty_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(instanceOperations_removeProperty_result.class, metaDataMap);
    }

    public instanceOperations_removeProperty_result() {
    }

    public instanceOperations_removeProperty_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public instanceOperations_removeProperty_result(instanceOperations_removeProperty_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public instanceOperations_removeProperty_result deepCopy() {
      return new instanceOperations_removeProperty_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public instanceOperations_removeProperty_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public instanceOperations_removeProperty_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof instanceOperations_removeProperty_result)
        return this.equals((instanceOperations_removeProperty_result)that);
      return false;
    }

    public boolean equals(instanceOperations_removeProperty_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(instanceOperations_removeProperty_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      instanceOperations_removeProperty_result typedOther = (instanceOperations_removeProperty_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("instanceOperations_removeProperty_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class instanceOperations_removeProperty_resultStandardSchemeFactory implements SchemeFactory {
      public instanceOperations_removeProperty_resultStandardScheme getScheme() {
        return new instanceOperations_removeProperty_resultStandardScheme();
      }
    }

    private static class instanceOperations_removeProperty_resultStandardScheme extends StandardScheme<instanceOperations_removeProperty_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, instanceOperations_removeProperty_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, instanceOperations_removeProperty_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class instanceOperations_removeProperty_resultTupleSchemeFactory implements SchemeFactory {
      public instanceOperations_removeProperty_resultTupleScheme getScheme() {
        return new instanceOperations_removeProperty_resultTupleScheme();
      }
    }

    private static class instanceOperations_removeProperty_resultTupleScheme extends TupleScheme<instanceOperations_removeProperty_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, instanceOperations_removeProperty_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, instanceOperations_removeProperty_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class instanceOperations_setProperty_args implements org.apache.thrift.TBase<instanceOperations_setProperty_args, instanceOperations_setProperty_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("instanceOperations_setProperty_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new instanceOperations_setProperty_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new instanceOperations_setProperty_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String property; // required
    public String value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      PROPERTY((short)2, "property"),
      VALUE((short)3, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // PROPERTY
            return PROPERTY;
          case 3: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(instanceOperations_setProperty_args.class, metaDataMap);
    }

    public instanceOperations_setProperty_args() {
    }

    public instanceOperations_setProperty_args(
      UserPass userpass,
      String property,
      String value)
    {
      this();
      this.userpass = userpass;
      this.property = property;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public instanceOperations_setProperty_args(instanceOperations_setProperty_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetProperty()) {
        this.property = other.property;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public instanceOperations_setProperty_args deepCopy() {
      return new instanceOperations_setProperty_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.property = null;
      this.value = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public instanceOperations_setProperty_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getProperty() {
      return this.property;
    }

    public instanceOperations_setProperty_args setProperty(String property) {
      this.property = property;
      return this;
    }

    public void unsetProperty() {
      this.property = null;
    }

    /** Returns true if field property is set (has been assigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }

    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public instanceOperations_setProperty_args setValue(String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          setProperty((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case PROPERTY:
        return getProperty();

      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case PROPERTY:
        return isSetProperty();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof instanceOperations_setProperty_args)
        return this.equals((instanceOperations_setProperty_args)that);
      return false;
    }

    public boolean equals(instanceOperations_setProperty_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(instanceOperations_setProperty_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      instanceOperations_setProperty_args typedOther = (instanceOperations_setProperty_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(typedOther.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, typedOther.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("instanceOperations_setProperty_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class instanceOperations_setProperty_argsStandardSchemeFactory implements SchemeFactory {
      public instanceOperations_setProperty_argsStandardScheme getScheme() {
        return new instanceOperations_setProperty_argsStandardScheme();
      }
    }

    private static class instanceOperations_setProperty_argsStandardScheme extends StandardScheme<instanceOperations_setProperty_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, instanceOperations_setProperty_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.property = iprot.readString();
                struct.setPropertyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, instanceOperations_setProperty_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.property != null) {
          oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
          oprot.writeString(struct.property);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class instanceOperations_setProperty_argsTupleSchemeFactory implements SchemeFactory {
      public instanceOperations_setProperty_argsTupleScheme getScheme() {
        return new instanceOperations_setProperty_argsTupleScheme();
      }
    }

    private static class instanceOperations_setProperty_argsTupleScheme extends TupleScheme<instanceOperations_setProperty_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, instanceOperations_setProperty_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetProperty()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetProperty()) {
          oprot.writeString(struct.property);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, instanceOperations_setProperty_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.property = iprot.readString();
          struct.setPropertyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
      }
    }

  }

  public static class instanceOperations_setProperty_result implements org.apache.thrift.TBase<instanceOperations_setProperty_result, instanceOperations_setProperty_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("instanceOperations_setProperty_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new instanceOperations_setProperty_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new instanceOperations_setProperty_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(instanceOperations_setProperty_result.class, metaDataMap);
    }

    public instanceOperations_setProperty_result() {
    }

    public instanceOperations_setProperty_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public instanceOperations_setProperty_result(instanceOperations_setProperty_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public instanceOperations_setProperty_result deepCopy() {
      return new instanceOperations_setProperty_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public instanceOperations_setProperty_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public instanceOperations_setProperty_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof instanceOperations_setProperty_result)
        return this.equals((instanceOperations_setProperty_result)that);
      return false;
    }

    public boolean equals(instanceOperations_setProperty_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(instanceOperations_setProperty_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      instanceOperations_setProperty_result typedOther = (instanceOperations_setProperty_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("instanceOperations_setProperty_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class instanceOperations_setProperty_resultStandardSchemeFactory implements SchemeFactory {
      public instanceOperations_setProperty_resultStandardScheme getScheme() {
        return new instanceOperations_setProperty_resultStandardScheme();
      }
    }

    private static class instanceOperations_setProperty_resultStandardScheme extends StandardScheme<instanceOperations_setProperty_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, instanceOperations_setProperty_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, instanceOperations_setProperty_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class instanceOperations_setProperty_resultTupleSchemeFactory implements SchemeFactory {
      public instanceOperations_setProperty_resultTupleScheme getScheme() {
        return new instanceOperations_setProperty_resultTupleScheme();
      }
    }

    private static class instanceOperations_setProperty_resultTupleScheme extends TupleScheme<instanceOperations_setProperty_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, instanceOperations_setProperty_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, instanceOperations_setProperty_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class instanceOperations_testClassLoad_args implements org.apache.thrift.TBase<instanceOperations_testClassLoad_args, instanceOperations_testClassLoad_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("instanceOperations_testClassLoad_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("className", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AS_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("asTypeName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new instanceOperations_testClassLoad_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new instanceOperations_testClassLoad_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String className; // required
    public String asTypeName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      CLASS_NAME((short)2, "className"),
      AS_TYPE_NAME((short)3, "asTypeName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // CLASS_NAME
            return CLASS_NAME;
          case 3: // AS_TYPE_NAME
            return AS_TYPE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("className", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AS_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("asTypeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(instanceOperations_testClassLoad_args.class, metaDataMap);
    }

    public instanceOperations_testClassLoad_args() {
    }

    public instanceOperations_testClassLoad_args(
      UserPass userpass,
      String className,
      String asTypeName)
    {
      this();
      this.userpass = userpass;
      this.className = className;
      this.asTypeName = asTypeName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public instanceOperations_testClassLoad_args(instanceOperations_testClassLoad_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetClassName()) {
        this.className = other.className;
      }
      if (other.isSetAsTypeName()) {
        this.asTypeName = other.asTypeName;
      }
    }

    public instanceOperations_testClassLoad_args deepCopy() {
      return new instanceOperations_testClassLoad_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.className = null;
      this.asTypeName = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public instanceOperations_testClassLoad_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getClassName() {
      return this.className;
    }

    public instanceOperations_testClassLoad_args setClassName(String className) {
      this.className = className;
      return this;
    }

    public void unsetClassName() {
      this.className = null;
    }

    /** Returns true if field className is set (has been assigned a value) and false otherwise */
    public boolean isSetClassName() {
      return this.className != null;
    }

    public void setClassNameIsSet(boolean value) {
      if (!value) {
        this.className = null;
      }
    }

    public String getAsTypeName() {
      return this.asTypeName;
    }

    public instanceOperations_testClassLoad_args setAsTypeName(String asTypeName) {
      this.asTypeName = asTypeName;
      return this;
    }

    public void unsetAsTypeName() {
      this.asTypeName = null;
    }

    /** Returns true if field asTypeName is set (has been assigned a value) and false otherwise */
    public boolean isSetAsTypeName() {
      return this.asTypeName != null;
    }

    public void setAsTypeNameIsSet(boolean value) {
      if (!value) {
        this.asTypeName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case CLASS_NAME:
        if (value == null) {
          unsetClassName();
        } else {
          setClassName((String)value);
        }
        break;

      case AS_TYPE_NAME:
        if (value == null) {
          unsetAsTypeName();
        } else {
          setAsTypeName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case CLASS_NAME:
        return getClassName();

      case AS_TYPE_NAME:
        return getAsTypeName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case CLASS_NAME:
        return isSetClassName();
      case AS_TYPE_NAME:
        return isSetAsTypeName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof instanceOperations_testClassLoad_args)
        return this.equals((instanceOperations_testClassLoad_args)that);
      return false;
    }

    public boolean equals(instanceOperations_testClassLoad_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_className = true && this.isSetClassName();
      boolean that_present_className = true && that.isSetClassName();
      if (this_present_className || that_present_className) {
        if (!(this_present_className && that_present_className))
          return false;
        if (!this.className.equals(that.className))
          return false;
      }

      boolean this_present_asTypeName = true && this.isSetAsTypeName();
      boolean that_present_asTypeName = true && that.isSetAsTypeName();
      if (this_present_asTypeName || that_present_asTypeName) {
        if (!(this_present_asTypeName && that_present_asTypeName))
          return false;
        if (!this.asTypeName.equals(that.asTypeName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(instanceOperations_testClassLoad_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      instanceOperations_testClassLoad_args typedOther = (instanceOperations_testClassLoad_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClassName()).compareTo(typedOther.isSetClassName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.className, typedOther.className);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAsTypeName()).compareTo(typedOther.isSetAsTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAsTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asTypeName, typedOther.asTypeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("instanceOperations_testClassLoad_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("className:");
      if (this.className == null) {
        sb.append("null");
      } else {
        sb.append(this.className);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("asTypeName:");
      if (this.asTypeName == null) {
        sb.append("null");
      } else {
        sb.append(this.asTypeName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class instanceOperations_testClassLoad_argsStandardSchemeFactory implements SchemeFactory {
      public instanceOperations_testClassLoad_argsStandardScheme getScheme() {
        return new instanceOperations_testClassLoad_argsStandardScheme();
      }
    }

    private static class instanceOperations_testClassLoad_argsStandardScheme extends StandardScheme<instanceOperations_testClassLoad_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, instanceOperations_testClassLoad_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLASS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.className = iprot.readString();
                struct.setClassNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AS_TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.asTypeName = iprot.readString();
                struct.setAsTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, instanceOperations_testClassLoad_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.className != null) {
          oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);
          oprot.writeString(struct.className);
          oprot.writeFieldEnd();
        }
        if (struct.asTypeName != null) {
          oprot.writeFieldBegin(AS_TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.asTypeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class instanceOperations_testClassLoad_argsTupleSchemeFactory implements SchemeFactory {
      public instanceOperations_testClassLoad_argsTupleScheme getScheme() {
        return new instanceOperations_testClassLoad_argsTupleScheme();
      }
    }

    private static class instanceOperations_testClassLoad_argsTupleScheme extends TupleScheme<instanceOperations_testClassLoad_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, instanceOperations_testClassLoad_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetClassName()) {
          optionals.set(1);
        }
        if (struct.isSetAsTypeName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetClassName()) {
          oprot.writeString(struct.className);
        }
        if (struct.isSetAsTypeName()) {
          oprot.writeString(struct.asTypeName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, instanceOperations_testClassLoad_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.className = iprot.readString();
          struct.setClassNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.asTypeName = iprot.readString();
          struct.setAsTypeNameIsSet(true);
        }
      }
    }

  }

  public static class instanceOperations_testClassLoad_result implements org.apache.thrift.TBase<instanceOperations_testClassLoad_result, instanceOperations_testClassLoad_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("instanceOperations_testClassLoad_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new instanceOperations_testClassLoad_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new instanceOperations_testClassLoad_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(instanceOperations_testClassLoad_result.class, metaDataMap);
    }

    public instanceOperations_testClassLoad_result() {
    }

    public instanceOperations_testClassLoad_result(
      boolean success,
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public instanceOperations_testClassLoad_result(instanceOperations_testClassLoad_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public instanceOperations_testClassLoad_result deepCopy() {
      return new instanceOperations_testClassLoad_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public instanceOperations_testClassLoad_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public instanceOperations_testClassLoad_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public instanceOperations_testClassLoad_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof instanceOperations_testClassLoad_result)
        return this.equals((instanceOperations_testClassLoad_result)that);
      return false;
    }

    public boolean equals(instanceOperations_testClassLoad_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(instanceOperations_testClassLoad_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      instanceOperations_testClassLoad_result typedOther = (instanceOperations_testClassLoad_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("instanceOperations_testClassLoad_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class instanceOperations_testClassLoad_resultStandardSchemeFactory implements SchemeFactory {
      public instanceOperations_testClassLoad_resultStandardScheme getScheme() {
        return new instanceOperations_testClassLoad_resultStandardScheme();
      }
    }

    private static class instanceOperations_testClassLoad_resultStandardScheme extends StandardScheme<instanceOperations_testClassLoad_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, instanceOperations_testClassLoad_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, instanceOperations_testClassLoad_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class instanceOperations_testClassLoad_resultTupleSchemeFactory implements SchemeFactory {
      public instanceOperations_testClassLoad_resultTupleScheme getScheme() {
        return new instanceOperations_testClassLoad_resultTupleScheme();
      }
    }

    private static class instanceOperations_testClassLoad_resultTupleScheme extends TupleScheme<instanceOperations_testClassLoad_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, instanceOperations_testClassLoad_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch1()) {
          optionals.set(1);
        }
        if (struct.isSetOuch2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, instanceOperations_testClassLoad_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class securityOperations_authenticateUser_args implements org.apache.thrift.TBase<securityOperations_authenticateUser_args, securityOperations_authenticateUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_authenticateUser_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_authenticateUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_authenticateUser_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String user; // required
    public ByteBuffer password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      USER((short)2, "user"),
      PASSWORD((short)3, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // USER
            return USER;
          case 3: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_authenticateUser_args.class, metaDataMap);
    }

    public securityOperations_authenticateUser_args() {
    }

    public securityOperations_authenticateUser_args(
      UserPass userpass,
      String user,
      ByteBuffer password)
    {
      this();
      this.userpass = userpass;
      this.user = user;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_authenticateUser_args(securityOperations_authenticateUser_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetPassword()) {
        this.password = org.apache.thrift.TBaseHelper.copyBinary(other.password);
;
      }
    }

    public securityOperations_authenticateUser_args deepCopy() {
      return new securityOperations_authenticateUser_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.user = null;
      this.password = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public securityOperations_authenticateUser_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public securityOperations_authenticateUser_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public byte[] getPassword() {
      setPassword(org.apache.thrift.TBaseHelper.rightSize(password));
      return password == null ? null : password.array();
    }

    public ByteBuffer bufferForPassword() {
      return password;
    }

    public securityOperations_authenticateUser_args setPassword(byte[] password) {
      setPassword(password == null ? (ByteBuffer)null : ByteBuffer.wrap(password));
      return this;
    }

    public securityOperations_authenticateUser_args setPassword(ByteBuffer password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case USER:
        return getUser();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case USER:
        return isSetUser();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_authenticateUser_args)
        return this.equals((securityOperations_authenticateUser_args)that);
      return false;
    }

    public boolean equals(securityOperations_authenticateUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_authenticateUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_authenticateUser_args typedOther = (securityOperations_authenticateUser_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_authenticateUser_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.password, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_authenticateUser_argsStandardSchemeFactory implements SchemeFactory {
      public securityOperations_authenticateUser_argsStandardScheme getScheme() {
        return new securityOperations_authenticateUser_argsStandardScheme();
      }
    }

    private static class securityOperations_authenticateUser_argsStandardScheme extends StandardScheme<securityOperations_authenticateUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_authenticateUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readBinary();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_authenticateUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeBinary(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_authenticateUser_argsTupleSchemeFactory implements SchemeFactory {
      public securityOperations_authenticateUser_argsTupleScheme getScheme() {
        return new securityOperations_authenticateUser_argsTupleScheme();
      }
    }

    private static class securityOperations_authenticateUser_argsTupleScheme extends TupleScheme<securityOperations_authenticateUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_authenticateUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetUser()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetPassword()) {
          oprot.writeBinary(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_authenticateUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readBinary();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class securityOperations_authenticateUser_result implements org.apache.thrift.TBase<securityOperations_authenticateUser_result, securityOperations_authenticateUser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_authenticateUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_authenticateUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_authenticateUser_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_authenticateUser_result.class, metaDataMap);
    }

    public securityOperations_authenticateUser_result() {
    }

    public securityOperations_authenticateUser_result(
      boolean success,
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_authenticateUser_result(securityOperations_authenticateUser_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public securityOperations_authenticateUser_result deepCopy() {
      return new securityOperations_authenticateUser_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public securityOperations_authenticateUser_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public securityOperations_authenticateUser_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public securityOperations_authenticateUser_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_authenticateUser_result)
        return this.equals((securityOperations_authenticateUser_result)that);
      return false;
    }

    public boolean equals(securityOperations_authenticateUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_authenticateUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_authenticateUser_result typedOther = (securityOperations_authenticateUser_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_authenticateUser_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_authenticateUser_resultStandardSchemeFactory implements SchemeFactory {
      public securityOperations_authenticateUser_resultStandardScheme getScheme() {
        return new securityOperations_authenticateUser_resultStandardScheme();
      }
    }

    private static class securityOperations_authenticateUser_resultStandardScheme extends StandardScheme<securityOperations_authenticateUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_authenticateUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_authenticateUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_authenticateUser_resultTupleSchemeFactory implements SchemeFactory {
      public securityOperations_authenticateUser_resultTupleScheme getScheme() {
        return new securityOperations_authenticateUser_resultTupleScheme();
      }
    }

    private static class securityOperations_authenticateUser_resultTupleScheme extends TupleScheme<securityOperations_authenticateUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_authenticateUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch1()) {
          optionals.set(1);
        }
        if (struct.isSetOuch2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_authenticateUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class securityOperations_changeUserAuthorizations_args implements org.apache.thrift.TBase<securityOperations_changeUserAuthorizations_args, securityOperations_changeUserAuthorizations_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_changeUserAuthorizations_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHORIZATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("authorizations", org.apache.thrift.protocol.TType.SET, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_changeUserAuthorizations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_changeUserAuthorizations_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String user; // required
    public Set<String> authorizations; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      USER((short)2, "user"),
      AUTHORIZATIONS((short)3, "authorizations");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // USER
            return USER;
          case 3: // AUTHORIZATIONS
            return AUTHORIZATIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTHORIZATIONS, new org.apache.thrift.meta_data.FieldMetaData("authorizations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_changeUserAuthorizations_args.class, metaDataMap);
    }

    public securityOperations_changeUserAuthorizations_args() {
    }

    public securityOperations_changeUserAuthorizations_args(
      UserPass userpass,
      String user,
      Set<String> authorizations)
    {
      this();
      this.userpass = userpass;
      this.user = user;
      this.authorizations = authorizations;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_changeUserAuthorizations_args(securityOperations_changeUserAuthorizations_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetAuthorizations()) {
        Set<String> __this__authorizations = new HashSet<String>();
        for (String other_element : other.authorizations) {
          __this__authorizations.add(other_element);
        }
        this.authorizations = __this__authorizations;
      }
    }

    public securityOperations_changeUserAuthorizations_args deepCopy() {
      return new securityOperations_changeUserAuthorizations_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.user = null;
      this.authorizations = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public securityOperations_changeUserAuthorizations_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public securityOperations_changeUserAuthorizations_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public int getAuthorizationsSize() {
      return (this.authorizations == null) ? 0 : this.authorizations.size();
    }

    public java.util.Iterator<String> getAuthorizationsIterator() {
      return (this.authorizations == null) ? null : this.authorizations.iterator();
    }

    public void addToAuthorizations(String elem) {
      if (this.authorizations == null) {
        this.authorizations = new HashSet<String>();
      }
      this.authorizations.add(elem);
    }

    public Set<String> getAuthorizations() {
      return this.authorizations;
    }

    public securityOperations_changeUserAuthorizations_args setAuthorizations(Set<String> authorizations) {
      this.authorizations = authorizations;
      return this;
    }

    public void unsetAuthorizations() {
      this.authorizations = null;
    }

    /** Returns true if field authorizations is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorizations() {
      return this.authorizations != null;
    }

    public void setAuthorizationsIsSet(boolean value) {
      if (!value) {
        this.authorizations = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case AUTHORIZATIONS:
        if (value == null) {
          unsetAuthorizations();
        } else {
          setAuthorizations((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case USER:
        return getUser();

      case AUTHORIZATIONS:
        return getAuthorizations();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case USER:
        return isSetUser();
      case AUTHORIZATIONS:
        return isSetAuthorizations();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_changeUserAuthorizations_args)
        return this.equals((securityOperations_changeUserAuthorizations_args)that);
      return false;
    }

    public boolean equals(securityOperations_changeUserAuthorizations_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_authorizations = true && this.isSetAuthorizations();
      boolean that_present_authorizations = true && that.isSetAuthorizations();
      if (this_present_authorizations || that_present_authorizations) {
        if (!(this_present_authorizations && that_present_authorizations))
          return false;
        if (!this.authorizations.equals(that.authorizations))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_changeUserAuthorizations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_changeUserAuthorizations_args typedOther = (securityOperations_changeUserAuthorizations_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorizations()).compareTo(typedOther.isSetAuthorizations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorizations()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorizations, typedOther.authorizations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_changeUserAuthorizations_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorizations:");
      if (this.authorizations == null) {
        sb.append("null");
      } else {
        sb.append(this.authorizations);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_changeUserAuthorizations_argsStandardSchemeFactory implements SchemeFactory {
      public securityOperations_changeUserAuthorizations_argsStandardScheme getScheme() {
        return new securityOperations_changeUserAuthorizations_argsStandardScheme();
      }
    }

    private static class securityOperations_changeUserAuthorizations_argsStandardScheme extends StandardScheme<securityOperations_changeUserAuthorizations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_changeUserAuthorizations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHORIZATIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set144 = iprot.readSetBegin();
                  struct.authorizations = new HashSet<String>(2*_set144.size);
                  for (int _i145 = 0; _i145 < _set144.size; ++_i145)
                  {
                    String _elem146; // required
                    _elem146 = iprot.readString();
                    struct.authorizations.add(_elem146);
                  }
                  iprot.readSetEnd();
                }
                struct.setAuthorizationsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_changeUserAuthorizations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.authorizations != null) {
          oprot.writeFieldBegin(AUTHORIZATIONS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.authorizations.size()));
            for (String _iter147 : struct.authorizations)
            {
              oprot.writeString(_iter147);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_changeUserAuthorizations_argsTupleSchemeFactory implements SchemeFactory {
      public securityOperations_changeUserAuthorizations_argsTupleScheme getScheme() {
        return new securityOperations_changeUserAuthorizations_argsTupleScheme();
      }
    }

    private static class securityOperations_changeUserAuthorizations_argsTupleScheme extends TupleScheme<securityOperations_changeUserAuthorizations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_changeUserAuthorizations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetUser()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorizations()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetAuthorizations()) {
          {
            oprot.writeI32(struct.authorizations.size());
            for (String _iter148 : struct.authorizations)
            {
              oprot.writeString(_iter148);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_changeUserAuthorizations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TSet _set149 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.authorizations = new HashSet<String>(2*_set149.size);
            for (int _i150 = 0; _i150 < _set149.size; ++_i150)
            {
              String _elem151; // required
              _elem151 = iprot.readString();
              struct.authorizations.add(_elem151);
            }
          }
          struct.setAuthorizationsIsSet(true);
        }
      }
    }

  }

  public static class securityOperations_changeUserAuthorizations_result implements org.apache.thrift.TBase<securityOperations_changeUserAuthorizations_result, securityOperations_changeUserAuthorizations_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_changeUserAuthorizations_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_changeUserAuthorizations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_changeUserAuthorizations_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_changeUserAuthorizations_result.class, metaDataMap);
    }

    public securityOperations_changeUserAuthorizations_result() {
    }

    public securityOperations_changeUserAuthorizations_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_changeUserAuthorizations_result(securityOperations_changeUserAuthorizations_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public securityOperations_changeUserAuthorizations_result deepCopy() {
      return new securityOperations_changeUserAuthorizations_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public securityOperations_changeUserAuthorizations_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public securityOperations_changeUserAuthorizations_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_changeUserAuthorizations_result)
        return this.equals((securityOperations_changeUserAuthorizations_result)that);
      return false;
    }

    public boolean equals(securityOperations_changeUserAuthorizations_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_changeUserAuthorizations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_changeUserAuthorizations_result typedOther = (securityOperations_changeUserAuthorizations_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_changeUserAuthorizations_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_changeUserAuthorizations_resultStandardSchemeFactory implements SchemeFactory {
      public securityOperations_changeUserAuthorizations_resultStandardScheme getScheme() {
        return new securityOperations_changeUserAuthorizations_resultStandardScheme();
      }
    }

    private static class securityOperations_changeUserAuthorizations_resultStandardScheme extends StandardScheme<securityOperations_changeUserAuthorizations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_changeUserAuthorizations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_changeUserAuthorizations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_changeUserAuthorizations_resultTupleSchemeFactory implements SchemeFactory {
      public securityOperations_changeUserAuthorizations_resultTupleScheme getScheme() {
        return new securityOperations_changeUserAuthorizations_resultTupleScheme();
      }
    }

    private static class securityOperations_changeUserAuthorizations_resultTupleScheme extends TupleScheme<securityOperations_changeUserAuthorizations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_changeUserAuthorizations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_changeUserAuthorizations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class securityOperations_changeUserPassword_args implements org.apache.thrift.TBase<securityOperations_changeUserPassword_args, securityOperations_changeUserPassword_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_changeUserPassword_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_changeUserPassword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_changeUserPassword_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String user; // required
    public ByteBuffer password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      USER((short)2, "user"),
      PASSWORD((short)3, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // USER
            return USER;
          case 3: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_changeUserPassword_args.class, metaDataMap);
    }

    public securityOperations_changeUserPassword_args() {
    }

    public securityOperations_changeUserPassword_args(
      UserPass userpass,
      String user,
      ByteBuffer password)
    {
      this();
      this.userpass = userpass;
      this.user = user;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_changeUserPassword_args(securityOperations_changeUserPassword_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetPassword()) {
        this.password = org.apache.thrift.TBaseHelper.copyBinary(other.password);
;
      }
    }

    public securityOperations_changeUserPassword_args deepCopy() {
      return new securityOperations_changeUserPassword_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.user = null;
      this.password = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public securityOperations_changeUserPassword_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public securityOperations_changeUserPassword_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public byte[] getPassword() {
      setPassword(org.apache.thrift.TBaseHelper.rightSize(password));
      return password == null ? null : password.array();
    }

    public ByteBuffer bufferForPassword() {
      return password;
    }

    public securityOperations_changeUserPassword_args setPassword(byte[] password) {
      setPassword(password == null ? (ByteBuffer)null : ByteBuffer.wrap(password));
      return this;
    }

    public securityOperations_changeUserPassword_args setPassword(ByteBuffer password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case USER:
        return getUser();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case USER:
        return isSetUser();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_changeUserPassword_args)
        return this.equals((securityOperations_changeUserPassword_args)that);
      return false;
    }

    public boolean equals(securityOperations_changeUserPassword_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_changeUserPassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_changeUserPassword_args typedOther = (securityOperations_changeUserPassword_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_changeUserPassword_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.password, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_changeUserPassword_argsStandardSchemeFactory implements SchemeFactory {
      public securityOperations_changeUserPassword_argsStandardScheme getScheme() {
        return new securityOperations_changeUserPassword_argsStandardScheme();
      }
    }

    private static class securityOperations_changeUserPassword_argsStandardScheme extends StandardScheme<securityOperations_changeUserPassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_changeUserPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readBinary();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_changeUserPassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeBinary(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_changeUserPassword_argsTupleSchemeFactory implements SchemeFactory {
      public securityOperations_changeUserPassword_argsTupleScheme getScheme() {
        return new securityOperations_changeUserPassword_argsTupleScheme();
      }
    }

    private static class securityOperations_changeUserPassword_argsTupleScheme extends TupleScheme<securityOperations_changeUserPassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_changeUserPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetUser()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetPassword()) {
          oprot.writeBinary(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_changeUserPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readBinary();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class securityOperations_changeUserPassword_result implements org.apache.thrift.TBase<securityOperations_changeUserPassword_result, securityOperations_changeUserPassword_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_changeUserPassword_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_changeUserPassword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_changeUserPassword_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_changeUserPassword_result.class, metaDataMap);
    }

    public securityOperations_changeUserPassword_result() {
    }

    public securityOperations_changeUserPassword_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_changeUserPassword_result(securityOperations_changeUserPassword_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public securityOperations_changeUserPassword_result deepCopy() {
      return new securityOperations_changeUserPassword_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public securityOperations_changeUserPassword_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public securityOperations_changeUserPassword_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_changeUserPassword_result)
        return this.equals((securityOperations_changeUserPassword_result)that);
      return false;
    }

    public boolean equals(securityOperations_changeUserPassword_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_changeUserPassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_changeUserPassword_result typedOther = (securityOperations_changeUserPassword_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_changeUserPassword_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_changeUserPassword_resultStandardSchemeFactory implements SchemeFactory {
      public securityOperations_changeUserPassword_resultStandardScheme getScheme() {
        return new securityOperations_changeUserPassword_resultStandardScheme();
      }
    }

    private static class securityOperations_changeUserPassword_resultStandardScheme extends StandardScheme<securityOperations_changeUserPassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_changeUserPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_changeUserPassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_changeUserPassword_resultTupleSchemeFactory implements SchemeFactory {
      public securityOperations_changeUserPassword_resultTupleScheme getScheme() {
        return new securityOperations_changeUserPassword_resultTupleScheme();
      }
    }

    private static class securityOperations_changeUserPassword_resultTupleScheme extends TupleScheme<securityOperations_changeUserPassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_changeUserPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_changeUserPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class securityOperations_createUser_args implements org.apache.thrift.TBase<securityOperations_createUser_args, securityOperations_createUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_createUser_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField AUTHORIZATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("authorizations", org.apache.thrift.protocol.TType.SET, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_createUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_createUser_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String user; // required
    public ByteBuffer password; // required
    public Set<String> authorizations; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      USER((short)2, "user"),
      PASSWORD((short)3, "password"),
      AUTHORIZATIONS((short)4, "authorizations");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // USER
            return USER;
          case 3: // PASSWORD
            return PASSWORD;
          case 4: // AUTHORIZATIONS
            return AUTHORIZATIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.AUTHORIZATIONS, new org.apache.thrift.meta_data.FieldMetaData("authorizations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_createUser_args.class, metaDataMap);
    }

    public securityOperations_createUser_args() {
    }

    public securityOperations_createUser_args(
      UserPass userpass,
      String user,
      ByteBuffer password,
      Set<String> authorizations)
    {
      this();
      this.userpass = userpass;
      this.user = user;
      this.password = password;
      this.authorizations = authorizations;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_createUser_args(securityOperations_createUser_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetPassword()) {
        this.password = org.apache.thrift.TBaseHelper.copyBinary(other.password);
;
      }
      if (other.isSetAuthorizations()) {
        Set<String> __this__authorizations = new HashSet<String>();
        for (String other_element : other.authorizations) {
          __this__authorizations.add(other_element);
        }
        this.authorizations = __this__authorizations;
      }
    }

    public securityOperations_createUser_args deepCopy() {
      return new securityOperations_createUser_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.user = null;
      this.password = null;
      this.authorizations = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public securityOperations_createUser_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public securityOperations_createUser_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public byte[] getPassword() {
      setPassword(org.apache.thrift.TBaseHelper.rightSize(password));
      return password == null ? null : password.array();
    }

    public ByteBuffer bufferForPassword() {
      return password;
    }

    public securityOperations_createUser_args setPassword(byte[] password) {
      setPassword(password == null ? (ByteBuffer)null : ByteBuffer.wrap(password));
      return this;
    }

    public securityOperations_createUser_args setPassword(ByteBuffer password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public int getAuthorizationsSize() {
      return (this.authorizations == null) ? 0 : this.authorizations.size();
    }

    public java.util.Iterator<String> getAuthorizationsIterator() {
      return (this.authorizations == null) ? null : this.authorizations.iterator();
    }

    public void addToAuthorizations(String elem) {
      if (this.authorizations == null) {
        this.authorizations = new HashSet<String>();
      }
      this.authorizations.add(elem);
    }

    public Set<String> getAuthorizations() {
      return this.authorizations;
    }

    public securityOperations_createUser_args setAuthorizations(Set<String> authorizations) {
      this.authorizations = authorizations;
      return this;
    }

    public void unsetAuthorizations() {
      this.authorizations = null;
    }

    /** Returns true if field authorizations is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorizations() {
      return this.authorizations != null;
    }

    public void setAuthorizationsIsSet(boolean value) {
      if (!value) {
        this.authorizations = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((ByteBuffer)value);
        }
        break;

      case AUTHORIZATIONS:
        if (value == null) {
          unsetAuthorizations();
        } else {
          setAuthorizations((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case USER:
        return getUser();

      case PASSWORD:
        return getPassword();

      case AUTHORIZATIONS:
        return getAuthorizations();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case USER:
        return isSetUser();
      case PASSWORD:
        return isSetPassword();
      case AUTHORIZATIONS:
        return isSetAuthorizations();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_createUser_args)
        return this.equals((securityOperations_createUser_args)that);
      return false;
    }

    public boolean equals(securityOperations_createUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_authorizations = true && this.isSetAuthorizations();
      boolean that_present_authorizations = true && that.isSetAuthorizations();
      if (this_present_authorizations || that_present_authorizations) {
        if (!(this_present_authorizations && that_present_authorizations))
          return false;
        if (!this.authorizations.equals(that.authorizations))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_createUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_createUser_args typedOther = (securityOperations_createUser_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorizations()).compareTo(typedOther.isSetAuthorizations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorizations()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorizations, typedOther.authorizations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_createUser_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.password, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorizations:");
      if (this.authorizations == null) {
        sb.append("null");
      } else {
        sb.append(this.authorizations);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_createUser_argsStandardSchemeFactory implements SchemeFactory {
      public securityOperations_createUser_argsStandardScheme getScheme() {
        return new securityOperations_createUser_argsStandardScheme();
      }
    }

    private static class securityOperations_createUser_argsStandardScheme extends StandardScheme<securityOperations_createUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_createUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readBinary();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AUTHORIZATIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set152 = iprot.readSetBegin();
                  struct.authorizations = new HashSet<String>(2*_set152.size);
                  for (int _i153 = 0; _i153 < _set152.size; ++_i153)
                  {
                    String _elem154; // required
                    _elem154 = iprot.readString();
                    struct.authorizations.add(_elem154);
                  }
                  iprot.readSetEnd();
                }
                struct.setAuthorizationsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_createUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeBinary(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.authorizations != null) {
          oprot.writeFieldBegin(AUTHORIZATIONS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.authorizations.size()));
            for (String _iter155 : struct.authorizations)
            {
              oprot.writeString(_iter155);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_createUser_argsTupleSchemeFactory implements SchemeFactory {
      public securityOperations_createUser_argsTupleScheme getScheme() {
        return new securityOperations_createUser_argsTupleScheme();
      }
    }

    private static class securityOperations_createUser_argsTupleScheme extends TupleScheme<securityOperations_createUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_createUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetUser()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        if (struct.isSetAuthorizations()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetPassword()) {
          oprot.writeBinary(struct.password);
        }
        if (struct.isSetAuthorizations()) {
          {
            oprot.writeI32(struct.authorizations.size());
            for (String _iter156 : struct.authorizations)
            {
              oprot.writeString(_iter156);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_createUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readBinary();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TSet _set157 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.authorizations = new HashSet<String>(2*_set157.size);
            for (int _i158 = 0; _i158 < _set157.size; ++_i158)
            {
              String _elem159; // required
              _elem159 = iprot.readString();
              struct.authorizations.add(_elem159);
            }
          }
          struct.setAuthorizationsIsSet(true);
        }
      }
    }

  }

  public static class securityOperations_createUser_result implements org.apache.thrift.TBase<securityOperations_createUser_result, securityOperations_createUser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_createUser_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_createUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_createUser_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_createUser_result.class, metaDataMap);
    }

    public securityOperations_createUser_result() {
    }

    public securityOperations_createUser_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_createUser_result(securityOperations_createUser_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public securityOperations_createUser_result deepCopy() {
      return new securityOperations_createUser_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public securityOperations_createUser_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public securityOperations_createUser_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_createUser_result)
        return this.equals((securityOperations_createUser_result)that);
      return false;
    }

    public boolean equals(securityOperations_createUser_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_createUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_createUser_result typedOther = (securityOperations_createUser_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_createUser_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_createUser_resultStandardSchemeFactory implements SchemeFactory {
      public securityOperations_createUser_resultStandardScheme getScheme() {
        return new securityOperations_createUser_resultStandardScheme();
      }
    }

    private static class securityOperations_createUser_resultStandardScheme extends StandardScheme<securityOperations_createUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_createUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_createUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_createUser_resultTupleSchemeFactory implements SchemeFactory {
      public securityOperations_createUser_resultTupleScheme getScheme() {
        return new securityOperations_createUser_resultTupleScheme();
      }
    }

    private static class securityOperations_createUser_resultTupleScheme extends TupleScheme<securityOperations_createUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_createUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_createUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class securityOperations_dropUser_args implements org.apache.thrift.TBase<securityOperations_dropUser_args, securityOperations_dropUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_dropUser_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_dropUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_dropUser_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String user; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      USER((short)2, "user");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // USER
            return USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_dropUser_args.class, metaDataMap);
    }

    public securityOperations_dropUser_args() {
    }

    public securityOperations_dropUser_args(
      UserPass userpass,
      String user)
    {
      this();
      this.userpass = userpass;
      this.user = user;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_dropUser_args(securityOperations_dropUser_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
    }

    public securityOperations_dropUser_args deepCopy() {
      return new securityOperations_dropUser_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.user = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public securityOperations_dropUser_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public securityOperations_dropUser_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case USER:
        return getUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case USER:
        return isSetUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_dropUser_args)
        return this.equals((securityOperations_dropUser_args)that);
      return false;
    }

    public boolean equals(securityOperations_dropUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_dropUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_dropUser_args typedOther = (securityOperations_dropUser_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_dropUser_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_dropUser_argsStandardSchemeFactory implements SchemeFactory {
      public securityOperations_dropUser_argsStandardScheme getScheme() {
        return new securityOperations_dropUser_argsStandardScheme();
      }
    }

    private static class securityOperations_dropUser_argsStandardScheme extends StandardScheme<securityOperations_dropUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_dropUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_dropUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_dropUser_argsTupleSchemeFactory implements SchemeFactory {
      public securityOperations_dropUser_argsTupleScheme getScheme() {
        return new securityOperations_dropUser_argsTupleScheme();
      }
    }

    private static class securityOperations_dropUser_argsTupleScheme extends TupleScheme<securityOperations_dropUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_dropUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetUser()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_dropUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
      }
    }

  }

  public static class securityOperations_dropUser_result implements org.apache.thrift.TBase<securityOperations_dropUser_result, securityOperations_dropUser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_dropUser_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_dropUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_dropUser_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_dropUser_result.class, metaDataMap);
    }

    public securityOperations_dropUser_result() {
    }

    public securityOperations_dropUser_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_dropUser_result(securityOperations_dropUser_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public securityOperations_dropUser_result deepCopy() {
      return new securityOperations_dropUser_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public securityOperations_dropUser_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public securityOperations_dropUser_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_dropUser_result)
        return this.equals((securityOperations_dropUser_result)that);
      return false;
    }

    public boolean equals(securityOperations_dropUser_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_dropUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_dropUser_result typedOther = (securityOperations_dropUser_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_dropUser_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_dropUser_resultStandardSchemeFactory implements SchemeFactory {
      public securityOperations_dropUser_resultStandardScheme getScheme() {
        return new securityOperations_dropUser_resultStandardScheme();
      }
    }

    private static class securityOperations_dropUser_resultStandardScheme extends StandardScheme<securityOperations_dropUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_dropUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_dropUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_dropUser_resultTupleSchemeFactory implements SchemeFactory {
      public securityOperations_dropUser_resultTupleScheme getScheme() {
        return new securityOperations_dropUser_resultTupleScheme();
      }
    }

    private static class securityOperations_dropUser_resultTupleScheme extends TupleScheme<securityOperations_dropUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_dropUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_dropUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class securityOperations_getUserAuthorizations_args implements org.apache.thrift.TBase<securityOperations_getUserAuthorizations_args, securityOperations_getUserAuthorizations_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_getUserAuthorizations_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_getUserAuthorizations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_getUserAuthorizations_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String user; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      USER((short)2, "user");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // USER
            return USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_getUserAuthorizations_args.class, metaDataMap);
    }

    public securityOperations_getUserAuthorizations_args() {
    }

    public securityOperations_getUserAuthorizations_args(
      UserPass userpass,
      String user)
    {
      this();
      this.userpass = userpass;
      this.user = user;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_getUserAuthorizations_args(securityOperations_getUserAuthorizations_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
    }

    public securityOperations_getUserAuthorizations_args deepCopy() {
      return new securityOperations_getUserAuthorizations_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.user = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public securityOperations_getUserAuthorizations_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public securityOperations_getUserAuthorizations_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case USER:
        return getUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case USER:
        return isSetUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_getUserAuthorizations_args)
        return this.equals((securityOperations_getUserAuthorizations_args)that);
      return false;
    }

    public boolean equals(securityOperations_getUserAuthorizations_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_getUserAuthorizations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_getUserAuthorizations_args typedOther = (securityOperations_getUserAuthorizations_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_getUserAuthorizations_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_getUserAuthorizations_argsStandardSchemeFactory implements SchemeFactory {
      public securityOperations_getUserAuthorizations_argsStandardScheme getScheme() {
        return new securityOperations_getUserAuthorizations_argsStandardScheme();
      }
    }

    private static class securityOperations_getUserAuthorizations_argsStandardScheme extends StandardScheme<securityOperations_getUserAuthorizations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_getUserAuthorizations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_getUserAuthorizations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_getUserAuthorizations_argsTupleSchemeFactory implements SchemeFactory {
      public securityOperations_getUserAuthorizations_argsTupleScheme getScheme() {
        return new securityOperations_getUserAuthorizations_argsTupleScheme();
      }
    }

    private static class securityOperations_getUserAuthorizations_argsTupleScheme extends TupleScheme<securityOperations_getUserAuthorizations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_getUserAuthorizations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetUser()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_getUserAuthorizations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
      }
    }

  }

  public static class securityOperations_getUserAuthorizations_result implements org.apache.thrift.TBase<securityOperations_getUserAuthorizations_result, securityOperations_getUserAuthorizations_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_getUserAuthorizations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_getUserAuthorizations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_getUserAuthorizations_resultTupleSchemeFactory());
    }

    public List<ByteBuffer> success; // required
    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_getUserAuthorizations_result.class, metaDataMap);
    }

    public securityOperations_getUserAuthorizations_result() {
    }

    public securityOperations_getUserAuthorizations_result(
      List<ByteBuffer> success,
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.success = success;
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_getUserAuthorizations_result(securityOperations_getUserAuthorizations_result other) {
      if (other.isSetSuccess()) {
        List<ByteBuffer> __this__success = new ArrayList<ByteBuffer>();
        for (ByteBuffer other_element : other.success) {
          ByteBuffer temp_binary_element = org.apache.thrift.TBaseHelper.copyBinary(other_element);
;
          __this__success.add(temp_binary_element);
        }
        this.success = __this__success;
      }
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public securityOperations_getUserAuthorizations_result deepCopy() {
      return new securityOperations_getUserAuthorizations_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ByteBuffer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ByteBuffer elem) {
      if (this.success == null) {
        this.success = new ArrayList<ByteBuffer>();
      }
      this.success.add(elem);
    }

    public List<ByteBuffer> getSuccess() {
      return this.success;
    }

    public securityOperations_getUserAuthorizations_result setSuccess(List<ByteBuffer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public securityOperations_getUserAuthorizations_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public securityOperations_getUserAuthorizations_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ByteBuffer>)value);
        }
        break;

      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_getUserAuthorizations_result)
        return this.equals((securityOperations_getUserAuthorizations_result)that);
      return false;
    }

    public boolean equals(securityOperations_getUserAuthorizations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_getUserAuthorizations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_getUserAuthorizations_result typedOther = (securityOperations_getUserAuthorizations_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_getUserAuthorizations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_getUserAuthorizations_resultStandardSchemeFactory implements SchemeFactory {
      public securityOperations_getUserAuthorizations_resultStandardScheme getScheme() {
        return new securityOperations_getUserAuthorizations_resultStandardScheme();
      }
    }

    private static class securityOperations_getUserAuthorizations_resultStandardScheme extends StandardScheme<securityOperations_getUserAuthorizations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_getUserAuthorizations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                  struct.success = new ArrayList<ByteBuffer>(_list160.size);
                  for (int _i161 = 0; _i161 < _list160.size; ++_i161)
                  {
                    ByteBuffer _elem162; // required
                    _elem162 = iprot.readBinary();
                    struct.success.add(_elem162);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_getUserAuthorizations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (ByteBuffer _iter163 : struct.success)
            {
              oprot.writeBinary(_iter163);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_getUserAuthorizations_resultTupleSchemeFactory implements SchemeFactory {
      public securityOperations_getUserAuthorizations_resultTupleScheme getScheme() {
        return new securityOperations_getUserAuthorizations_resultTupleScheme();
      }
    }

    private static class securityOperations_getUserAuthorizations_resultTupleScheme extends TupleScheme<securityOperations_getUserAuthorizations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_getUserAuthorizations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch1()) {
          optionals.set(1);
        }
        if (struct.isSetOuch2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ByteBuffer _iter164 : struct.success)
            {
              oprot.writeBinary(_iter164);
            }
          }
        }
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_getUserAuthorizations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<ByteBuffer>(_list165.size);
            for (int _i166 = 0; _i166 < _list165.size; ++_i166)
            {
              ByteBuffer _elem167; // required
              _elem167 = iprot.readBinary();
              struct.success.add(_elem167);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class securityOperations_grantSystemPermission_args implements org.apache.thrift.TBase<securityOperations_grantSystemPermission_args, securityOperations_grantSystemPermission_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_grantSystemPermission_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PERM_FIELD_DESC = new org.apache.thrift.protocol.TField("perm", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_grantSystemPermission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_grantSystemPermission_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String user; // required
    /**
     * 
     * @see PSystemPermission
     */
    public PSystemPermission perm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      USER((short)2, "user"),
      /**
       * 
       * @see PSystemPermission
       */
      PERM((short)3, "perm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // USER
            return USER;
          case 3: // PERM
            return PERM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PERM, new org.apache.thrift.meta_data.FieldMetaData("perm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PSystemPermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_grantSystemPermission_args.class, metaDataMap);
    }

    public securityOperations_grantSystemPermission_args() {
    }

    public securityOperations_grantSystemPermission_args(
      UserPass userpass,
      String user,
      PSystemPermission perm)
    {
      this();
      this.userpass = userpass;
      this.user = user;
      this.perm = perm;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_grantSystemPermission_args(securityOperations_grantSystemPermission_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetPerm()) {
        this.perm = other.perm;
      }
    }

    public securityOperations_grantSystemPermission_args deepCopy() {
      return new securityOperations_grantSystemPermission_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.user = null;
      this.perm = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public securityOperations_grantSystemPermission_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public securityOperations_grantSystemPermission_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    /**
     * 
     * @see PSystemPermission
     */
    public PSystemPermission getPerm() {
      return this.perm;
    }

    /**
     * 
     * @see PSystemPermission
     */
    public securityOperations_grantSystemPermission_args setPerm(PSystemPermission perm) {
      this.perm = perm;
      return this;
    }

    public void unsetPerm() {
      this.perm = null;
    }

    /** Returns true if field perm is set (has been assigned a value) and false otherwise */
    public boolean isSetPerm() {
      return this.perm != null;
    }

    public void setPermIsSet(boolean value) {
      if (!value) {
        this.perm = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case PERM:
        if (value == null) {
          unsetPerm();
        } else {
          setPerm((PSystemPermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case USER:
        return getUser();

      case PERM:
        return getPerm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case USER:
        return isSetUser();
      case PERM:
        return isSetPerm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_grantSystemPermission_args)
        return this.equals((securityOperations_grantSystemPermission_args)that);
      return false;
    }

    public boolean equals(securityOperations_grantSystemPermission_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_perm = true && this.isSetPerm();
      boolean that_present_perm = true && that.isSetPerm();
      if (this_present_perm || that_present_perm) {
        if (!(this_present_perm && that_present_perm))
          return false;
        if (!this.perm.equals(that.perm))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_grantSystemPermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_grantSystemPermission_args typedOther = (securityOperations_grantSystemPermission_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPerm()).compareTo(typedOther.isSetPerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perm, typedOther.perm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_grantSystemPermission_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("perm:");
      if (this.perm == null) {
        sb.append("null");
      } else {
        sb.append(this.perm);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_grantSystemPermission_argsStandardSchemeFactory implements SchemeFactory {
      public securityOperations_grantSystemPermission_argsStandardScheme getScheme() {
        return new securityOperations_grantSystemPermission_argsStandardScheme();
      }
    }

    private static class securityOperations_grantSystemPermission_argsStandardScheme extends StandardScheme<securityOperations_grantSystemPermission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_grantSystemPermission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.perm = PSystemPermission.findByValue(iprot.readI32());
                struct.setPermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_grantSystemPermission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.perm != null) {
          oprot.writeFieldBegin(PERM_FIELD_DESC);
          oprot.writeI32(struct.perm.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_grantSystemPermission_argsTupleSchemeFactory implements SchemeFactory {
      public securityOperations_grantSystemPermission_argsTupleScheme getScheme() {
        return new securityOperations_grantSystemPermission_argsTupleScheme();
      }
    }

    private static class securityOperations_grantSystemPermission_argsTupleScheme extends TupleScheme<securityOperations_grantSystemPermission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_grantSystemPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetUser()) {
          optionals.set(1);
        }
        if (struct.isSetPerm()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetPerm()) {
          oprot.writeI32(struct.perm.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_grantSystemPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(2)) {
          struct.perm = PSystemPermission.findByValue(iprot.readI32());
          struct.setPermIsSet(true);
        }
      }
    }

  }

  public static class securityOperations_grantSystemPermission_result implements org.apache.thrift.TBase<securityOperations_grantSystemPermission_result, securityOperations_grantSystemPermission_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_grantSystemPermission_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_grantSystemPermission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_grantSystemPermission_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_grantSystemPermission_result.class, metaDataMap);
    }

    public securityOperations_grantSystemPermission_result() {
    }

    public securityOperations_grantSystemPermission_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_grantSystemPermission_result(securityOperations_grantSystemPermission_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public securityOperations_grantSystemPermission_result deepCopy() {
      return new securityOperations_grantSystemPermission_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public securityOperations_grantSystemPermission_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public securityOperations_grantSystemPermission_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_grantSystemPermission_result)
        return this.equals((securityOperations_grantSystemPermission_result)that);
      return false;
    }

    public boolean equals(securityOperations_grantSystemPermission_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_grantSystemPermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_grantSystemPermission_result typedOther = (securityOperations_grantSystemPermission_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_grantSystemPermission_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_grantSystemPermission_resultStandardSchemeFactory implements SchemeFactory {
      public securityOperations_grantSystemPermission_resultStandardScheme getScheme() {
        return new securityOperations_grantSystemPermission_resultStandardScheme();
      }
    }

    private static class securityOperations_grantSystemPermission_resultStandardScheme extends StandardScheme<securityOperations_grantSystemPermission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_grantSystemPermission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_grantSystemPermission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_grantSystemPermission_resultTupleSchemeFactory implements SchemeFactory {
      public securityOperations_grantSystemPermission_resultTupleScheme getScheme() {
        return new securityOperations_grantSystemPermission_resultTupleScheme();
      }
    }

    private static class securityOperations_grantSystemPermission_resultTupleScheme extends TupleScheme<securityOperations_grantSystemPermission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_grantSystemPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_grantSystemPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class securityOperations_grantTablePermission_args implements org.apache.thrift.TBase<securityOperations_grantTablePermission_args, securityOperations_grantTablePermission_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_grantTablePermission_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PERM_FIELD_DESC = new org.apache.thrift.protocol.TField("perm", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_grantTablePermission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_grantTablePermission_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String user; // required
    public String table; // required
    /**
     * 
     * @see PTablePermission
     */
    public PTablePermission perm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      USER((short)2, "user"),
      TABLE((short)3, "table"),
      /**
       * 
       * @see PTablePermission
       */
      PERM((short)4, "perm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // USER
            return USER;
          case 3: // TABLE
            return TABLE;
          case 4: // PERM
            return PERM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PERM, new org.apache.thrift.meta_data.FieldMetaData("perm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PTablePermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_grantTablePermission_args.class, metaDataMap);
    }

    public securityOperations_grantTablePermission_args() {
    }

    public securityOperations_grantTablePermission_args(
      UserPass userpass,
      String user,
      String table,
      PTablePermission perm)
    {
      this();
      this.userpass = userpass;
      this.user = user;
      this.table = table;
      this.perm = perm;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_grantTablePermission_args(securityOperations_grantTablePermission_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetPerm()) {
        this.perm = other.perm;
      }
    }

    public securityOperations_grantTablePermission_args deepCopy() {
      return new securityOperations_grantTablePermission_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.user = null;
      this.table = null;
      this.perm = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public securityOperations_grantTablePermission_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public securityOperations_grantTablePermission_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getTable() {
      return this.table;
    }

    public securityOperations_grantTablePermission_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * 
     * @see PTablePermission
     */
    public PTablePermission getPerm() {
      return this.perm;
    }

    /**
     * 
     * @see PTablePermission
     */
    public securityOperations_grantTablePermission_args setPerm(PTablePermission perm) {
      this.perm = perm;
      return this;
    }

    public void unsetPerm() {
      this.perm = null;
    }

    /** Returns true if field perm is set (has been assigned a value) and false otherwise */
    public boolean isSetPerm() {
      return this.perm != null;
    }

    public void setPermIsSet(boolean value) {
      if (!value) {
        this.perm = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case PERM:
        if (value == null) {
          unsetPerm();
        } else {
          setPerm((PTablePermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case USER:
        return getUser();

      case TABLE:
        return getTable();

      case PERM:
        return getPerm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case USER:
        return isSetUser();
      case TABLE:
        return isSetTable();
      case PERM:
        return isSetPerm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_grantTablePermission_args)
        return this.equals((securityOperations_grantTablePermission_args)that);
      return false;
    }

    public boolean equals(securityOperations_grantTablePermission_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_perm = true && this.isSetPerm();
      boolean that_present_perm = true && that.isSetPerm();
      if (this_present_perm || that_present_perm) {
        if (!(this_present_perm && that_present_perm))
          return false;
        if (!this.perm.equals(that.perm))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_grantTablePermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_grantTablePermission_args typedOther = (securityOperations_grantTablePermission_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPerm()).compareTo(typedOther.isSetPerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perm, typedOther.perm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_grantTablePermission_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("perm:");
      if (this.perm == null) {
        sb.append("null");
      } else {
        sb.append(this.perm);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_grantTablePermission_argsStandardSchemeFactory implements SchemeFactory {
      public securityOperations_grantTablePermission_argsStandardScheme getScheme() {
        return new securityOperations_grantTablePermission_argsStandardScheme();
      }
    }

    private static class securityOperations_grantTablePermission_argsStandardScheme extends StandardScheme<securityOperations_grantTablePermission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_grantTablePermission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.perm = PTablePermission.findByValue(iprot.readI32());
                struct.setPermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_grantTablePermission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.perm != null) {
          oprot.writeFieldBegin(PERM_FIELD_DESC);
          oprot.writeI32(struct.perm.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_grantTablePermission_argsTupleSchemeFactory implements SchemeFactory {
      public securityOperations_grantTablePermission_argsTupleScheme getScheme() {
        return new securityOperations_grantTablePermission_argsTupleScheme();
      }
    }

    private static class securityOperations_grantTablePermission_argsTupleScheme extends TupleScheme<securityOperations_grantTablePermission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_grantTablePermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetUser()) {
          optionals.set(1);
        }
        if (struct.isSetTable()) {
          optionals.set(2);
        }
        if (struct.isSetPerm()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetPerm()) {
          oprot.writeI32(struct.perm.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_grantTablePermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(2)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(3)) {
          struct.perm = PTablePermission.findByValue(iprot.readI32());
          struct.setPermIsSet(true);
        }
      }
    }

  }

  public static class securityOperations_grantTablePermission_result implements org.apache.thrift.TBase<securityOperations_grantTablePermission_result, securityOperations_grantTablePermission_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_grantTablePermission_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_grantTablePermission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_grantTablePermission_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_grantTablePermission_result.class, metaDataMap);
    }

    public securityOperations_grantTablePermission_result() {
    }

    public securityOperations_grantTablePermission_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_grantTablePermission_result(securityOperations_grantTablePermission_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public securityOperations_grantTablePermission_result deepCopy() {
      return new securityOperations_grantTablePermission_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public securityOperations_grantTablePermission_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public securityOperations_grantTablePermission_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_grantTablePermission_result)
        return this.equals((securityOperations_grantTablePermission_result)that);
      return false;
    }

    public boolean equals(securityOperations_grantTablePermission_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_grantTablePermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_grantTablePermission_result typedOther = (securityOperations_grantTablePermission_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_grantTablePermission_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_grantTablePermission_resultStandardSchemeFactory implements SchemeFactory {
      public securityOperations_grantTablePermission_resultStandardScheme getScheme() {
        return new securityOperations_grantTablePermission_resultStandardScheme();
      }
    }

    private static class securityOperations_grantTablePermission_resultStandardScheme extends StandardScheme<securityOperations_grantTablePermission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_grantTablePermission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_grantTablePermission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_grantTablePermission_resultTupleSchemeFactory implements SchemeFactory {
      public securityOperations_grantTablePermission_resultTupleScheme getScheme() {
        return new securityOperations_grantTablePermission_resultTupleScheme();
      }
    }

    private static class securityOperations_grantTablePermission_resultTupleScheme extends TupleScheme<securityOperations_grantTablePermission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_grantTablePermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_grantTablePermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class securityOperations_hasSystemPermission_args implements org.apache.thrift.TBase<securityOperations_hasSystemPermission_args, securityOperations_hasSystemPermission_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_hasSystemPermission_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PERM_FIELD_DESC = new org.apache.thrift.protocol.TField("perm", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_hasSystemPermission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_hasSystemPermission_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String user; // required
    /**
     * 
     * @see PSystemPermission
     */
    public PSystemPermission perm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      USER((short)2, "user"),
      /**
       * 
       * @see PSystemPermission
       */
      PERM((short)3, "perm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // USER
            return USER;
          case 3: // PERM
            return PERM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PERM, new org.apache.thrift.meta_data.FieldMetaData("perm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PSystemPermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_hasSystemPermission_args.class, metaDataMap);
    }

    public securityOperations_hasSystemPermission_args() {
    }

    public securityOperations_hasSystemPermission_args(
      UserPass userpass,
      String user,
      PSystemPermission perm)
    {
      this();
      this.userpass = userpass;
      this.user = user;
      this.perm = perm;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_hasSystemPermission_args(securityOperations_hasSystemPermission_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetPerm()) {
        this.perm = other.perm;
      }
    }

    public securityOperations_hasSystemPermission_args deepCopy() {
      return new securityOperations_hasSystemPermission_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.user = null;
      this.perm = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public securityOperations_hasSystemPermission_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public securityOperations_hasSystemPermission_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    /**
     * 
     * @see PSystemPermission
     */
    public PSystemPermission getPerm() {
      return this.perm;
    }

    /**
     * 
     * @see PSystemPermission
     */
    public securityOperations_hasSystemPermission_args setPerm(PSystemPermission perm) {
      this.perm = perm;
      return this;
    }

    public void unsetPerm() {
      this.perm = null;
    }

    /** Returns true if field perm is set (has been assigned a value) and false otherwise */
    public boolean isSetPerm() {
      return this.perm != null;
    }

    public void setPermIsSet(boolean value) {
      if (!value) {
        this.perm = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case PERM:
        if (value == null) {
          unsetPerm();
        } else {
          setPerm((PSystemPermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case USER:
        return getUser();

      case PERM:
        return getPerm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case USER:
        return isSetUser();
      case PERM:
        return isSetPerm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_hasSystemPermission_args)
        return this.equals((securityOperations_hasSystemPermission_args)that);
      return false;
    }

    public boolean equals(securityOperations_hasSystemPermission_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_perm = true && this.isSetPerm();
      boolean that_present_perm = true && that.isSetPerm();
      if (this_present_perm || that_present_perm) {
        if (!(this_present_perm && that_present_perm))
          return false;
        if (!this.perm.equals(that.perm))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_hasSystemPermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_hasSystemPermission_args typedOther = (securityOperations_hasSystemPermission_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPerm()).compareTo(typedOther.isSetPerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perm, typedOther.perm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_hasSystemPermission_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("perm:");
      if (this.perm == null) {
        sb.append("null");
      } else {
        sb.append(this.perm);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_hasSystemPermission_argsStandardSchemeFactory implements SchemeFactory {
      public securityOperations_hasSystemPermission_argsStandardScheme getScheme() {
        return new securityOperations_hasSystemPermission_argsStandardScheme();
      }
    }

    private static class securityOperations_hasSystemPermission_argsStandardScheme extends StandardScheme<securityOperations_hasSystemPermission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_hasSystemPermission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.perm = PSystemPermission.findByValue(iprot.readI32());
                struct.setPermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_hasSystemPermission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.perm != null) {
          oprot.writeFieldBegin(PERM_FIELD_DESC);
          oprot.writeI32(struct.perm.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_hasSystemPermission_argsTupleSchemeFactory implements SchemeFactory {
      public securityOperations_hasSystemPermission_argsTupleScheme getScheme() {
        return new securityOperations_hasSystemPermission_argsTupleScheme();
      }
    }

    private static class securityOperations_hasSystemPermission_argsTupleScheme extends TupleScheme<securityOperations_hasSystemPermission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_hasSystemPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetUser()) {
          optionals.set(1);
        }
        if (struct.isSetPerm()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetPerm()) {
          oprot.writeI32(struct.perm.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_hasSystemPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(2)) {
          struct.perm = PSystemPermission.findByValue(iprot.readI32());
          struct.setPermIsSet(true);
        }
      }
    }

  }

  public static class securityOperations_hasSystemPermission_result implements org.apache.thrift.TBase<securityOperations_hasSystemPermission_result, securityOperations_hasSystemPermission_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_hasSystemPermission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_hasSystemPermission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_hasSystemPermission_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_hasSystemPermission_result.class, metaDataMap);
    }

    public securityOperations_hasSystemPermission_result() {
    }

    public securityOperations_hasSystemPermission_result(
      boolean success,
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_hasSystemPermission_result(securityOperations_hasSystemPermission_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public securityOperations_hasSystemPermission_result deepCopy() {
      return new securityOperations_hasSystemPermission_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public securityOperations_hasSystemPermission_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public securityOperations_hasSystemPermission_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public securityOperations_hasSystemPermission_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_hasSystemPermission_result)
        return this.equals((securityOperations_hasSystemPermission_result)that);
      return false;
    }

    public boolean equals(securityOperations_hasSystemPermission_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_hasSystemPermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_hasSystemPermission_result typedOther = (securityOperations_hasSystemPermission_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_hasSystemPermission_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_hasSystemPermission_resultStandardSchemeFactory implements SchemeFactory {
      public securityOperations_hasSystemPermission_resultStandardScheme getScheme() {
        return new securityOperations_hasSystemPermission_resultStandardScheme();
      }
    }

    private static class securityOperations_hasSystemPermission_resultStandardScheme extends StandardScheme<securityOperations_hasSystemPermission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_hasSystemPermission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_hasSystemPermission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_hasSystemPermission_resultTupleSchemeFactory implements SchemeFactory {
      public securityOperations_hasSystemPermission_resultTupleScheme getScheme() {
        return new securityOperations_hasSystemPermission_resultTupleScheme();
      }
    }

    private static class securityOperations_hasSystemPermission_resultTupleScheme extends TupleScheme<securityOperations_hasSystemPermission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_hasSystemPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch1()) {
          optionals.set(1);
        }
        if (struct.isSetOuch2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_hasSystemPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class securityOperations_hasTablePermission_args implements org.apache.thrift.TBase<securityOperations_hasTablePermission_args, securityOperations_hasTablePermission_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_hasTablePermission_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PERM_FIELD_DESC = new org.apache.thrift.protocol.TField("perm", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_hasTablePermission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_hasTablePermission_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String user; // required
    public String table; // required
    /**
     * 
     * @see PTablePermission
     */
    public PTablePermission perm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      USER((short)2, "user"),
      TABLE((short)3, "table"),
      /**
       * 
       * @see PTablePermission
       */
      PERM((short)4, "perm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // USER
            return USER;
          case 3: // TABLE
            return TABLE;
          case 4: // PERM
            return PERM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PERM, new org.apache.thrift.meta_data.FieldMetaData("perm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PTablePermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_hasTablePermission_args.class, metaDataMap);
    }

    public securityOperations_hasTablePermission_args() {
    }

    public securityOperations_hasTablePermission_args(
      UserPass userpass,
      String user,
      String table,
      PTablePermission perm)
    {
      this();
      this.userpass = userpass;
      this.user = user;
      this.table = table;
      this.perm = perm;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_hasTablePermission_args(securityOperations_hasTablePermission_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetPerm()) {
        this.perm = other.perm;
      }
    }

    public securityOperations_hasTablePermission_args deepCopy() {
      return new securityOperations_hasTablePermission_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.user = null;
      this.table = null;
      this.perm = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public securityOperations_hasTablePermission_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public securityOperations_hasTablePermission_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getTable() {
      return this.table;
    }

    public securityOperations_hasTablePermission_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * 
     * @see PTablePermission
     */
    public PTablePermission getPerm() {
      return this.perm;
    }

    /**
     * 
     * @see PTablePermission
     */
    public securityOperations_hasTablePermission_args setPerm(PTablePermission perm) {
      this.perm = perm;
      return this;
    }

    public void unsetPerm() {
      this.perm = null;
    }

    /** Returns true if field perm is set (has been assigned a value) and false otherwise */
    public boolean isSetPerm() {
      return this.perm != null;
    }

    public void setPermIsSet(boolean value) {
      if (!value) {
        this.perm = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case PERM:
        if (value == null) {
          unsetPerm();
        } else {
          setPerm((PTablePermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case USER:
        return getUser();

      case TABLE:
        return getTable();

      case PERM:
        return getPerm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case USER:
        return isSetUser();
      case TABLE:
        return isSetTable();
      case PERM:
        return isSetPerm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_hasTablePermission_args)
        return this.equals((securityOperations_hasTablePermission_args)that);
      return false;
    }

    public boolean equals(securityOperations_hasTablePermission_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_perm = true && this.isSetPerm();
      boolean that_present_perm = true && that.isSetPerm();
      if (this_present_perm || that_present_perm) {
        if (!(this_present_perm && that_present_perm))
          return false;
        if (!this.perm.equals(that.perm))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_hasTablePermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_hasTablePermission_args typedOther = (securityOperations_hasTablePermission_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPerm()).compareTo(typedOther.isSetPerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perm, typedOther.perm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_hasTablePermission_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("perm:");
      if (this.perm == null) {
        sb.append("null");
      } else {
        sb.append(this.perm);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_hasTablePermission_argsStandardSchemeFactory implements SchemeFactory {
      public securityOperations_hasTablePermission_argsStandardScheme getScheme() {
        return new securityOperations_hasTablePermission_argsStandardScheme();
      }
    }

    private static class securityOperations_hasTablePermission_argsStandardScheme extends StandardScheme<securityOperations_hasTablePermission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_hasTablePermission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.perm = PTablePermission.findByValue(iprot.readI32());
                struct.setPermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_hasTablePermission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.perm != null) {
          oprot.writeFieldBegin(PERM_FIELD_DESC);
          oprot.writeI32(struct.perm.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_hasTablePermission_argsTupleSchemeFactory implements SchemeFactory {
      public securityOperations_hasTablePermission_argsTupleScheme getScheme() {
        return new securityOperations_hasTablePermission_argsTupleScheme();
      }
    }

    private static class securityOperations_hasTablePermission_argsTupleScheme extends TupleScheme<securityOperations_hasTablePermission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_hasTablePermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetUser()) {
          optionals.set(1);
        }
        if (struct.isSetTable()) {
          optionals.set(2);
        }
        if (struct.isSetPerm()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetPerm()) {
          oprot.writeI32(struct.perm.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_hasTablePermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(2)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(3)) {
          struct.perm = PTablePermission.findByValue(iprot.readI32());
          struct.setPermIsSet(true);
        }
      }
    }

  }

  public static class securityOperations_hasTablePermission_result implements org.apache.thrift.TBase<securityOperations_hasTablePermission_result, securityOperations_hasTablePermission_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_hasTablePermission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_hasTablePermission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_hasTablePermission_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_hasTablePermission_result.class, metaDataMap);
    }

    public securityOperations_hasTablePermission_result() {
    }

    public securityOperations_hasTablePermission_result(
      boolean success,
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_hasTablePermission_result(securityOperations_hasTablePermission_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public securityOperations_hasTablePermission_result deepCopy() {
      return new securityOperations_hasTablePermission_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public securityOperations_hasTablePermission_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public securityOperations_hasTablePermission_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public securityOperations_hasTablePermission_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_hasTablePermission_result)
        return this.equals((securityOperations_hasTablePermission_result)that);
      return false;
    }

    public boolean equals(securityOperations_hasTablePermission_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_hasTablePermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_hasTablePermission_result typedOther = (securityOperations_hasTablePermission_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_hasTablePermission_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_hasTablePermission_resultStandardSchemeFactory implements SchemeFactory {
      public securityOperations_hasTablePermission_resultStandardScheme getScheme() {
        return new securityOperations_hasTablePermission_resultStandardScheme();
      }
    }

    private static class securityOperations_hasTablePermission_resultStandardScheme extends StandardScheme<securityOperations_hasTablePermission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_hasTablePermission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_hasTablePermission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_hasTablePermission_resultTupleSchemeFactory implements SchemeFactory {
      public securityOperations_hasTablePermission_resultTupleScheme getScheme() {
        return new securityOperations_hasTablePermission_resultTupleScheme();
      }
    }

    private static class securityOperations_hasTablePermission_resultTupleScheme extends TupleScheme<securityOperations_hasTablePermission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_hasTablePermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch1()) {
          optionals.set(1);
        }
        if (struct.isSetOuch2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_hasTablePermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class securityOperations_listUsers_args implements org.apache.thrift.TBase<securityOperations_listUsers_args, securityOperations_listUsers_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_listUsers_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_listUsers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_listUsers_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_listUsers_args.class, metaDataMap);
    }

    public securityOperations_listUsers_args() {
    }

    public securityOperations_listUsers_args(
      UserPass userpass)
    {
      this();
      this.userpass = userpass;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_listUsers_args(securityOperations_listUsers_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
    }

    public securityOperations_listUsers_args deepCopy() {
      return new securityOperations_listUsers_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public securityOperations_listUsers_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_listUsers_args)
        return this.equals((securityOperations_listUsers_args)that);
      return false;
    }

    public boolean equals(securityOperations_listUsers_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_listUsers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_listUsers_args typedOther = (securityOperations_listUsers_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_listUsers_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_listUsers_argsStandardSchemeFactory implements SchemeFactory {
      public securityOperations_listUsers_argsStandardScheme getScheme() {
        return new securityOperations_listUsers_argsStandardScheme();
      }
    }

    private static class securityOperations_listUsers_argsStandardScheme extends StandardScheme<securityOperations_listUsers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_listUsers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_listUsers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_listUsers_argsTupleSchemeFactory implements SchemeFactory {
      public securityOperations_listUsers_argsTupleScheme getScheme() {
        return new securityOperations_listUsers_argsTupleScheme();
      }
    }

    private static class securityOperations_listUsers_argsTupleScheme extends TupleScheme<securityOperations_listUsers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_listUsers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_listUsers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
      }
    }

  }

  public static class securityOperations_listUsers_result implements org.apache.thrift.TBase<securityOperations_listUsers_result, securityOperations_listUsers_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_listUsers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_listUsers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_listUsers_resultTupleSchemeFactory());
    }

    public Set<String> success; // required
    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_listUsers_result.class, metaDataMap);
    }

    public securityOperations_listUsers_result() {
    }

    public securityOperations_listUsers_result(
      Set<String> success,
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.success = success;
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_listUsers_result(securityOperations_listUsers_result other) {
      if (other.isSetSuccess()) {
        Set<String> __this__success = new HashSet<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public securityOperations_listUsers_result deepCopy() {
      return new securityOperations_listUsers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new HashSet<String>();
      }
      this.success.add(elem);
    }

    public Set<String> getSuccess() {
      return this.success;
    }

    public securityOperations_listUsers_result setSuccess(Set<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public securityOperations_listUsers_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public securityOperations_listUsers_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<String>)value);
        }
        break;

      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_listUsers_result)
        return this.equals((securityOperations_listUsers_result)that);
      return false;
    }

    public boolean equals(securityOperations_listUsers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_listUsers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_listUsers_result typedOther = (securityOperations_listUsers_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_listUsers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_listUsers_resultStandardSchemeFactory implements SchemeFactory {
      public securityOperations_listUsers_resultStandardScheme getScheme() {
        return new securityOperations_listUsers_resultStandardScheme();
      }
    }

    private static class securityOperations_listUsers_resultStandardScheme extends StandardScheme<securityOperations_listUsers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_listUsers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set168 = iprot.readSetBegin();
                  struct.success = new HashSet<String>(2*_set168.size);
                  for (int _i169 = 0; _i169 < _set168.size; ++_i169)
                  {
                    String _elem170; // required
                    _elem170 = iprot.readString();
                    struct.success.add(_elem170);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_listUsers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter171 : struct.success)
            {
              oprot.writeString(_iter171);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_listUsers_resultTupleSchemeFactory implements SchemeFactory {
      public securityOperations_listUsers_resultTupleScheme getScheme() {
        return new securityOperations_listUsers_resultTupleScheme();
      }
    }

    private static class securityOperations_listUsers_resultTupleScheme extends TupleScheme<securityOperations_listUsers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_listUsers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch1()) {
          optionals.set(1);
        }
        if (struct.isSetOuch2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter172 : struct.success)
            {
              oprot.writeString(_iter172);
            }
          }
        }
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_listUsers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set173 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashSet<String>(2*_set173.size);
            for (int _i174 = 0; _i174 < _set173.size; ++_i174)
            {
              String _elem175; // required
              _elem175 = iprot.readString();
              struct.success.add(_elem175);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class securityOperations_revokeSystemPermission_args implements org.apache.thrift.TBase<securityOperations_revokeSystemPermission_args, securityOperations_revokeSystemPermission_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_revokeSystemPermission_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PERM_FIELD_DESC = new org.apache.thrift.protocol.TField("perm", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_revokeSystemPermission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_revokeSystemPermission_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String user; // required
    /**
     * 
     * @see PSystemPermission
     */
    public PSystemPermission perm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      USER((short)2, "user"),
      /**
       * 
       * @see PSystemPermission
       */
      PERM((short)3, "perm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // USER
            return USER;
          case 3: // PERM
            return PERM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PERM, new org.apache.thrift.meta_data.FieldMetaData("perm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PSystemPermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_revokeSystemPermission_args.class, metaDataMap);
    }

    public securityOperations_revokeSystemPermission_args() {
    }

    public securityOperations_revokeSystemPermission_args(
      UserPass userpass,
      String user,
      PSystemPermission perm)
    {
      this();
      this.userpass = userpass;
      this.user = user;
      this.perm = perm;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_revokeSystemPermission_args(securityOperations_revokeSystemPermission_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetPerm()) {
        this.perm = other.perm;
      }
    }

    public securityOperations_revokeSystemPermission_args deepCopy() {
      return new securityOperations_revokeSystemPermission_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.user = null;
      this.perm = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public securityOperations_revokeSystemPermission_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public securityOperations_revokeSystemPermission_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    /**
     * 
     * @see PSystemPermission
     */
    public PSystemPermission getPerm() {
      return this.perm;
    }

    /**
     * 
     * @see PSystemPermission
     */
    public securityOperations_revokeSystemPermission_args setPerm(PSystemPermission perm) {
      this.perm = perm;
      return this;
    }

    public void unsetPerm() {
      this.perm = null;
    }

    /** Returns true if field perm is set (has been assigned a value) and false otherwise */
    public boolean isSetPerm() {
      return this.perm != null;
    }

    public void setPermIsSet(boolean value) {
      if (!value) {
        this.perm = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case PERM:
        if (value == null) {
          unsetPerm();
        } else {
          setPerm((PSystemPermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case USER:
        return getUser();

      case PERM:
        return getPerm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case USER:
        return isSetUser();
      case PERM:
        return isSetPerm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_revokeSystemPermission_args)
        return this.equals((securityOperations_revokeSystemPermission_args)that);
      return false;
    }

    public boolean equals(securityOperations_revokeSystemPermission_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_perm = true && this.isSetPerm();
      boolean that_present_perm = true && that.isSetPerm();
      if (this_present_perm || that_present_perm) {
        if (!(this_present_perm && that_present_perm))
          return false;
        if (!this.perm.equals(that.perm))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_revokeSystemPermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_revokeSystemPermission_args typedOther = (securityOperations_revokeSystemPermission_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPerm()).compareTo(typedOther.isSetPerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perm, typedOther.perm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_revokeSystemPermission_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("perm:");
      if (this.perm == null) {
        sb.append("null");
      } else {
        sb.append(this.perm);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_revokeSystemPermission_argsStandardSchemeFactory implements SchemeFactory {
      public securityOperations_revokeSystemPermission_argsStandardScheme getScheme() {
        return new securityOperations_revokeSystemPermission_argsStandardScheme();
      }
    }

    private static class securityOperations_revokeSystemPermission_argsStandardScheme extends StandardScheme<securityOperations_revokeSystemPermission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_revokeSystemPermission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.perm = PSystemPermission.findByValue(iprot.readI32());
                struct.setPermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_revokeSystemPermission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.perm != null) {
          oprot.writeFieldBegin(PERM_FIELD_DESC);
          oprot.writeI32(struct.perm.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_revokeSystemPermission_argsTupleSchemeFactory implements SchemeFactory {
      public securityOperations_revokeSystemPermission_argsTupleScheme getScheme() {
        return new securityOperations_revokeSystemPermission_argsTupleScheme();
      }
    }

    private static class securityOperations_revokeSystemPermission_argsTupleScheme extends TupleScheme<securityOperations_revokeSystemPermission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_revokeSystemPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetUser()) {
          optionals.set(1);
        }
        if (struct.isSetPerm()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetPerm()) {
          oprot.writeI32(struct.perm.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_revokeSystemPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(2)) {
          struct.perm = PSystemPermission.findByValue(iprot.readI32());
          struct.setPermIsSet(true);
        }
      }
    }

  }

  public static class securityOperations_revokeSystemPermission_result implements org.apache.thrift.TBase<securityOperations_revokeSystemPermission_result, securityOperations_revokeSystemPermission_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_revokeSystemPermission_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_revokeSystemPermission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_revokeSystemPermission_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_revokeSystemPermission_result.class, metaDataMap);
    }

    public securityOperations_revokeSystemPermission_result() {
    }

    public securityOperations_revokeSystemPermission_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_revokeSystemPermission_result(securityOperations_revokeSystemPermission_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public securityOperations_revokeSystemPermission_result deepCopy() {
      return new securityOperations_revokeSystemPermission_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public securityOperations_revokeSystemPermission_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public securityOperations_revokeSystemPermission_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_revokeSystemPermission_result)
        return this.equals((securityOperations_revokeSystemPermission_result)that);
      return false;
    }

    public boolean equals(securityOperations_revokeSystemPermission_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_revokeSystemPermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_revokeSystemPermission_result typedOther = (securityOperations_revokeSystemPermission_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_revokeSystemPermission_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_revokeSystemPermission_resultStandardSchemeFactory implements SchemeFactory {
      public securityOperations_revokeSystemPermission_resultStandardScheme getScheme() {
        return new securityOperations_revokeSystemPermission_resultStandardScheme();
      }
    }

    private static class securityOperations_revokeSystemPermission_resultStandardScheme extends StandardScheme<securityOperations_revokeSystemPermission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_revokeSystemPermission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_revokeSystemPermission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_revokeSystemPermission_resultTupleSchemeFactory implements SchemeFactory {
      public securityOperations_revokeSystemPermission_resultTupleScheme getScheme() {
        return new securityOperations_revokeSystemPermission_resultTupleScheme();
      }
    }

    private static class securityOperations_revokeSystemPermission_resultTupleScheme extends TupleScheme<securityOperations_revokeSystemPermission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_revokeSystemPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_revokeSystemPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class securityOperations_revokeTablePermission_args implements org.apache.thrift.TBase<securityOperations_revokeTablePermission_args, securityOperations_revokeTablePermission_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_revokeTablePermission_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PERM_FIELD_DESC = new org.apache.thrift.protocol.TField("perm", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_revokeTablePermission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_revokeTablePermission_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String user; // required
    public String table; // required
    /**
     * 
     * @see PTablePermission
     */
    public PTablePermission perm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      USER((short)2, "user"),
      TABLE((short)3, "table"),
      /**
       * 
       * @see PTablePermission
       */
      PERM((short)4, "perm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // USER
            return USER;
          case 3: // TABLE
            return TABLE;
          case 4: // PERM
            return PERM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PERM, new org.apache.thrift.meta_data.FieldMetaData("perm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PTablePermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_revokeTablePermission_args.class, metaDataMap);
    }

    public securityOperations_revokeTablePermission_args() {
    }

    public securityOperations_revokeTablePermission_args(
      UserPass userpass,
      String user,
      String table,
      PTablePermission perm)
    {
      this();
      this.userpass = userpass;
      this.user = user;
      this.table = table;
      this.perm = perm;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_revokeTablePermission_args(securityOperations_revokeTablePermission_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetPerm()) {
        this.perm = other.perm;
      }
    }

    public securityOperations_revokeTablePermission_args deepCopy() {
      return new securityOperations_revokeTablePermission_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.user = null;
      this.table = null;
      this.perm = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public securityOperations_revokeTablePermission_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public securityOperations_revokeTablePermission_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getTable() {
      return this.table;
    }

    public securityOperations_revokeTablePermission_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    /**
     * 
     * @see PTablePermission
     */
    public PTablePermission getPerm() {
      return this.perm;
    }

    /**
     * 
     * @see PTablePermission
     */
    public securityOperations_revokeTablePermission_args setPerm(PTablePermission perm) {
      this.perm = perm;
      return this;
    }

    public void unsetPerm() {
      this.perm = null;
    }

    /** Returns true if field perm is set (has been assigned a value) and false otherwise */
    public boolean isSetPerm() {
      return this.perm != null;
    }

    public void setPermIsSet(boolean value) {
      if (!value) {
        this.perm = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case PERM:
        if (value == null) {
          unsetPerm();
        } else {
          setPerm((PTablePermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case USER:
        return getUser();

      case TABLE:
        return getTable();

      case PERM:
        return getPerm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case USER:
        return isSetUser();
      case TABLE:
        return isSetTable();
      case PERM:
        return isSetPerm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_revokeTablePermission_args)
        return this.equals((securityOperations_revokeTablePermission_args)that);
      return false;
    }

    public boolean equals(securityOperations_revokeTablePermission_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_perm = true && this.isSetPerm();
      boolean that_present_perm = true && that.isSetPerm();
      if (this_present_perm || that_present_perm) {
        if (!(this_present_perm && that_present_perm))
          return false;
        if (!this.perm.equals(that.perm))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_revokeTablePermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_revokeTablePermission_args typedOther = (securityOperations_revokeTablePermission_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPerm()).compareTo(typedOther.isSetPerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perm, typedOther.perm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_revokeTablePermission_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("perm:");
      if (this.perm == null) {
        sb.append("null");
      } else {
        sb.append(this.perm);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_revokeTablePermission_argsStandardSchemeFactory implements SchemeFactory {
      public securityOperations_revokeTablePermission_argsStandardScheme getScheme() {
        return new securityOperations_revokeTablePermission_argsStandardScheme();
      }
    }

    private static class securityOperations_revokeTablePermission_argsStandardScheme extends StandardScheme<securityOperations_revokeTablePermission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_revokeTablePermission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.perm = PTablePermission.findByValue(iprot.readI32());
                struct.setPermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_revokeTablePermission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.perm != null) {
          oprot.writeFieldBegin(PERM_FIELD_DESC);
          oprot.writeI32(struct.perm.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_revokeTablePermission_argsTupleSchemeFactory implements SchemeFactory {
      public securityOperations_revokeTablePermission_argsTupleScheme getScheme() {
        return new securityOperations_revokeTablePermission_argsTupleScheme();
      }
    }

    private static class securityOperations_revokeTablePermission_argsTupleScheme extends TupleScheme<securityOperations_revokeTablePermission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_revokeTablePermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetUser()) {
          optionals.set(1);
        }
        if (struct.isSetTable()) {
          optionals.set(2);
        }
        if (struct.isSetPerm()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetPerm()) {
          oprot.writeI32(struct.perm.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_revokeTablePermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(2)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(3)) {
          struct.perm = PTablePermission.findByValue(iprot.readI32());
          struct.setPermIsSet(true);
        }
      }
    }

  }

  public static class securityOperations_revokeTablePermission_result implements org.apache.thrift.TBase<securityOperations_revokeTablePermission_result, securityOperations_revokeTablePermission_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("securityOperations_revokeTablePermission_result");

    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new securityOperations_revokeTablePermission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new securityOperations_revokeTablePermission_resultTupleSchemeFactory());
    }

    public AccumuloException ouch1; // required
    public AccumuloSecurityException ouch2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH1((short)1, "ouch1"),
      OUCH2((short)2, "ouch2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH1
            return OUCH1;
          case 2: // OUCH2
            return OUCH2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData("ouch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData("ouch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(securityOperations_revokeTablePermission_result.class, metaDataMap);
    }

    public securityOperations_revokeTablePermission_result() {
    }

    public securityOperations_revokeTablePermission_result(
      AccumuloException ouch1,
      AccumuloSecurityException ouch2)
    {
      this();
      this.ouch1 = ouch1;
      this.ouch2 = ouch2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public securityOperations_revokeTablePermission_result(securityOperations_revokeTablePermission_result other) {
      if (other.isSetOuch1()) {
        this.ouch1 = new AccumuloException(other.ouch1);
      }
      if (other.isSetOuch2()) {
        this.ouch2 = new AccumuloSecurityException(other.ouch2);
      }
    }

    public securityOperations_revokeTablePermission_result deepCopy() {
      return new securityOperations_revokeTablePermission_result(this);
    }

    @Override
    public void clear() {
      this.ouch1 = null;
      this.ouch2 = null;
    }

    public AccumuloException getOuch1() {
      return this.ouch1;
    }

    public securityOperations_revokeTablePermission_result setOuch1(AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }

    public void unsetOuch1() {
      this.ouch1 = null;
    }

    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch1() {
      return this.ouch1 != null;
    }

    public void setOuch1IsSet(boolean value) {
      if (!value) {
        this.ouch1 = null;
      }
    }

    public AccumuloSecurityException getOuch2() {
      return this.ouch2;
    }

    public securityOperations_revokeTablePermission_result setOuch2(AccumuloSecurityException ouch2) {
      this.ouch2 = ouch2;
      return this;
    }

    public void unsetOuch2() {
      this.ouch2 = null;
    }

    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch2() {
      return this.ouch2 != null;
    }

    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH1:
        if (value == null) {
          unsetOuch1();
        } else {
          setOuch1((AccumuloException)value);
        }
        break;

      case OUCH2:
        if (value == null) {
          unsetOuch2();
        } else {
          setOuch2((AccumuloSecurityException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH1:
        return isSetOuch1();
      case OUCH2:
        return isSetOuch2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof securityOperations_revokeTablePermission_result)
        return this.equals((securityOperations_revokeTablePermission_result)that);
      return false;
    }

    public boolean equals(securityOperations_revokeTablePermission_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch1 = true && this.isSetOuch1();
      boolean that_present_ouch1 = true && that.isSetOuch1();
      if (this_present_ouch1 || that_present_ouch1) {
        if (!(this_present_ouch1 && that_present_ouch1))
          return false;
        if (!this.ouch1.equals(that.ouch1))
          return false;
      }

      boolean this_present_ouch2 = true && this.isSetOuch2();
      boolean that_present_ouch2 = true && that.isSetOuch2();
      if (this_present_ouch2 || that_present_ouch2) {
        if (!(this_present_ouch2 && that_present_ouch2))
          return false;
        if (!this.ouch2.equals(that.ouch2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(securityOperations_revokeTablePermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      securityOperations_revokeTablePermission_result typedOther = (securityOperations_revokeTablePermission_result)other;

      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("securityOperations_revokeTablePermission_result(");
      boolean first = true;

      sb.append("ouch1:");
      if (this.ouch1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch2:");
      if (this.ouch2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class securityOperations_revokeTablePermission_resultStandardSchemeFactory implements SchemeFactory {
      public securityOperations_revokeTablePermission_resultStandardScheme getScheme() {
        return new securityOperations_revokeTablePermission_resultStandardScheme();
      }
    }

    private static class securityOperations_revokeTablePermission_resultStandardScheme extends StandardScheme<securityOperations_revokeTablePermission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, securityOperations_revokeTablePermission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch1 = new AccumuloException();
                struct.ouch1.read(iprot);
                struct.setOuch1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUCH2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch2 = new AccumuloSecurityException();
                struct.ouch2.read(iprot);
                struct.setOuch2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, securityOperations_revokeTablePermission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch1 != null) {
          oprot.writeFieldBegin(OUCH1_FIELD_DESC);
          struct.ouch1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch2 != null) {
          oprot.writeFieldBegin(OUCH2_FIELD_DESC);
          struct.ouch2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class securityOperations_revokeTablePermission_resultTupleSchemeFactory implements SchemeFactory {
      public securityOperations_revokeTablePermission_resultTupleScheme getScheme() {
        return new securityOperations_revokeTablePermission_resultTupleScheme();
      }
    }

    private static class securityOperations_revokeTablePermission_resultTupleScheme extends TupleScheme<securityOperations_revokeTablePermission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, securityOperations_revokeTablePermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch1()) {
          optionals.set(0);
        }
        if (struct.isSetOuch2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOuch1()) {
          struct.ouch1.write(oprot);
        }
        if (struct.isSetOuch2()) {
          struct.ouch2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, securityOperations_revokeTablePermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
      }
    }

  }

  public static class createBatchScanner_args implements org.apache.thrift.TBase<createBatchScanner_args, createBatchScanner_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createBatchScanner_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHORIZATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("authorizations", org.apache.thrift.protocol.TType.SET, (short)3);
    private static final org.apache.thrift.protocol.TField ITERATOR_SETTING_FIELD_DESC = new org.apache.thrift.protocol.TField("iteratorSetting", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("range", org.apache.thrift.protocol.TType.LIST, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createBatchScanner_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createBatchScanner_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required
    public Set<String> authorizations; // required
    public PIteratorSetting iteratorSetting; // required
    public List<PRange> range; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName"),
      AUTHORIZATIONS((short)3, "authorizations"),
      ITERATOR_SETTING((short)4, "iteratorSetting"),
      RANGE((short)5, "range");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // AUTHORIZATIONS
            return AUTHORIZATIONS;
          case 4: // ITERATOR_SETTING
            return ITERATOR_SETTING;
          case 5: // RANGE
            return RANGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTHORIZATIONS, new org.apache.thrift.meta_data.FieldMetaData("authorizations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ITERATOR_SETTING, new org.apache.thrift.meta_data.FieldMetaData("iteratorSetting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PIteratorSetting.class)));
      tmpMap.put(_Fields.RANGE, new org.apache.thrift.meta_data.FieldMetaData("range", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PRange.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createBatchScanner_args.class, metaDataMap);
    }

    public createBatchScanner_args() {
    }

    public createBatchScanner_args(
      UserPass userpass,
      String tableName,
      Set<String> authorizations,
      PIteratorSetting iteratorSetting,
      List<PRange> range)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
      this.authorizations = authorizations;
      this.iteratorSetting = iteratorSetting;
      this.range = range;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createBatchScanner_args(createBatchScanner_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetAuthorizations()) {
        Set<String> __this__authorizations = new HashSet<String>();
        for (String other_element : other.authorizations) {
          __this__authorizations.add(other_element);
        }
        this.authorizations = __this__authorizations;
      }
      if (other.isSetIteratorSetting()) {
        this.iteratorSetting = new PIteratorSetting(other.iteratorSetting);
      }
      if (other.isSetRange()) {
        List<PRange> __this__range = new ArrayList<PRange>();
        for (PRange other_element : other.range) {
          __this__range.add(new PRange(other_element));
        }
        this.range = __this__range;
      }
    }

    public createBatchScanner_args deepCopy() {
      return new createBatchScanner_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
      this.authorizations = null;
      this.iteratorSetting = null;
      this.range = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public createBatchScanner_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public createBatchScanner_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public int getAuthorizationsSize() {
      return (this.authorizations == null) ? 0 : this.authorizations.size();
    }

    public java.util.Iterator<String> getAuthorizationsIterator() {
      return (this.authorizations == null) ? null : this.authorizations.iterator();
    }

    public void addToAuthorizations(String elem) {
      if (this.authorizations == null) {
        this.authorizations = new HashSet<String>();
      }
      this.authorizations.add(elem);
    }

    public Set<String> getAuthorizations() {
      return this.authorizations;
    }

    public createBatchScanner_args setAuthorizations(Set<String> authorizations) {
      this.authorizations = authorizations;
      return this;
    }

    public void unsetAuthorizations() {
      this.authorizations = null;
    }

    /** Returns true if field authorizations is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorizations() {
      return this.authorizations != null;
    }

    public void setAuthorizationsIsSet(boolean value) {
      if (!value) {
        this.authorizations = null;
      }
    }

    public PIteratorSetting getIteratorSetting() {
      return this.iteratorSetting;
    }

    public createBatchScanner_args setIteratorSetting(PIteratorSetting iteratorSetting) {
      this.iteratorSetting = iteratorSetting;
      return this;
    }

    public void unsetIteratorSetting() {
      this.iteratorSetting = null;
    }

    /** Returns true if field iteratorSetting is set (has been assigned a value) and false otherwise */
    public boolean isSetIteratorSetting() {
      return this.iteratorSetting != null;
    }

    public void setIteratorSettingIsSet(boolean value) {
      if (!value) {
        this.iteratorSetting = null;
      }
    }

    public int getRangeSize() {
      return (this.range == null) ? 0 : this.range.size();
    }

    public java.util.Iterator<PRange> getRangeIterator() {
      return (this.range == null) ? null : this.range.iterator();
    }

    public void addToRange(PRange elem) {
      if (this.range == null) {
        this.range = new ArrayList<PRange>();
      }
      this.range.add(elem);
    }

    public List<PRange> getRange() {
      return this.range;
    }

    public createBatchScanner_args setRange(List<PRange> range) {
      this.range = range;
      return this;
    }

    public void unsetRange() {
      this.range = null;
    }

    /** Returns true if field range is set (has been assigned a value) and false otherwise */
    public boolean isSetRange() {
      return this.range != null;
    }

    public void setRangeIsSet(boolean value) {
      if (!value) {
        this.range = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      case AUTHORIZATIONS:
        if (value == null) {
          unsetAuthorizations();
        } else {
          setAuthorizations((Set<String>)value);
        }
        break;

      case ITERATOR_SETTING:
        if (value == null) {
          unsetIteratorSetting();
        } else {
          setIteratorSetting((PIteratorSetting)value);
        }
        break;

      case RANGE:
        if (value == null) {
          unsetRange();
        } else {
          setRange((List<PRange>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      case AUTHORIZATIONS:
        return getAuthorizations();

      case ITERATOR_SETTING:
        return getIteratorSetting();

      case RANGE:
        return getRange();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      case AUTHORIZATIONS:
        return isSetAuthorizations();
      case ITERATOR_SETTING:
        return isSetIteratorSetting();
      case RANGE:
        return isSetRange();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createBatchScanner_args)
        return this.equals((createBatchScanner_args)that);
      return false;
    }

    public boolean equals(createBatchScanner_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_authorizations = true && this.isSetAuthorizations();
      boolean that_present_authorizations = true && that.isSetAuthorizations();
      if (this_present_authorizations || that_present_authorizations) {
        if (!(this_present_authorizations && that_present_authorizations))
          return false;
        if (!this.authorizations.equals(that.authorizations))
          return false;
      }

      boolean this_present_iteratorSetting = true && this.isSetIteratorSetting();
      boolean that_present_iteratorSetting = true && that.isSetIteratorSetting();
      if (this_present_iteratorSetting || that_present_iteratorSetting) {
        if (!(this_present_iteratorSetting && that_present_iteratorSetting))
          return false;
        if (!this.iteratorSetting.equals(that.iteratorSetting))
          return false;
      }

      boolean this_present_range = true && this.isSetRange();
      boolean that_present_range = true && that.isSetRange();
      if (this_present_range || that_present_range) {
        if (!(this_present_range && that_present_range))
          return false;
        if (!this.range.equals(that.range))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createBatchScanner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createBatchScanner_args typedOther = (createBatchScanner_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorizations()).compareTo(typedOther.isSetAuthorizations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorizations()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorizations, typedOther.authorizations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIteratorSetting()).compareTo(typedOther.isSetIteratorSetting());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIteratorSetting()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iteratorSetting, typedOther.iteratorSetting);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRange()).compareTo(typedOther.isSetRange());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRange()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range, typedOther.range);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createBatchScanner_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorizations:");
      if (this.authorizations == null) {
        sb.append("null");
      } else {
        sb.append(this.authorizations);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iteratorSetting:");
      if (this.iteratorSetting == null) {
        sb.append("null");
      } else {
        sb.append(this.iteratorSetting);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("range:");
      if (this.range == null) {
        sb.append("null");
      } else {
        sb.append(this.range);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
      if (iteratorSetting != null) {
        iteratorSetting.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createBatchScanner_argsStandardSchemeFactory implements SchemeFactory {
      public createBatchScanner_argsStandardScheme getScheme() {
        return new createBatchScanner_argsStandardScheme();
      }
    }

    private static class createBatchScanner_argsStandardScheme extends StandardScheme<createBatchScanner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createBatchScanner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHORIZATIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set176 = iprot.readSetBegin();
                  struct.authorizations = new HashSet<String>(2*_set176.size);
                  for (int _i177 = 0; _i177 < _set176.size; ++_i177)
                  {
                    String _elem178; // required
                    _elem178 = iprot.readString();
                    struct.authorizations.add(_elem178);
                  }
                  iprot.readSetEnd();
                }
                struct.setAuthorizationsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ITERATOR_SETTING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.iteratorSetting = new PIteratorSetting();
                struct.iteratorSetting.read(iprot);
                struct.setIteratorSettingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // RANGE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list179 = iprot.readListBegin();
                  struct.range = new ArrayList<PRange>(_list179.size);
                  for (int _i180 = 0; _i180 < _list179.size; ++_i180)
                  {
                    PRange _elem181; // required
                    _elem181 = new PRange();
                    _elem181.read(iprot);
                    struct.range.add(_elem181);
                  }
                  iprot.readListEnd();
                }
                struct.setRangeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createBatchScanner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.authorizations != null) {
          oprot.writeFieldBegin(AUTHORIZATIONS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.authorizations.size()));
            for (String _iter182 : struct.authorizations)
            {
              oprot.writeString(_iter182);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.iteratorSetting != null) {
          oprot.writeFieldBegin(ITERATOR_SETTING_FIELD_DESC);
          struct.iteratorSetting.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.range != null) {
          oprot.writeFieldBegin(RANGE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.range.size()));
            for (PRange _iter183 : struct.range)
            {
              _iter183.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createBatchScanner_argsTupleSchemeFactory implements SchemeFactory {
      public createBatchScanner_argsTupleScheme getScheme() {
        return new createBatchScanner_argsTupleScheme();
      }
    }

    private static class createBatchScanner_argsTupleScheme extends TupleScheme<createBatchScanner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createBatchScanner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorizations()) {
          optionals.set(2);
        }
        if (struct.isSetIteratorSetting()) {
          optionals.set(3);
        }
        if (struct.isSetRange()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetAuthorizations()) {
          {
            oprot.writeI32(struct.authorizations.size());
            for (String _iter184 : struct.authorizations)
            {
              oprot.writeString(_iter184);
            }
          }
        }
        if (struct.isSetIteratorSetting()) {
          struct.iteratorSetting.write(oprot);
        }
        if (struct.isSetRange()) {
          {
            oprot.writeI32(struct.range.size());
            for (PRange _iter185 : struct.range)
            {
              _iter185.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createBatchScanner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TSet _set186 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.authorizations = new HashSet<String>(2*_set186.size);
            for (int _i187 = 0; _i187 < _set186.size; ++_i187)
            {
              String _elem188; // required
              _elem188 = iprot.readString();
              struct.authorizations.add(_elem188);
            }
          }
          struct.setAuthorizationsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.iteratorSetting = new PIteratorSetting();
          struct.iteratorSetting.read(iprot);
          struct.setIteratorSettingIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.range = new ArrayList<PRange>(_list189.size);
            for (int _i190 = 0; _i190 < _list189.size; ++_i190)
            {
              PRange _elem191; // required
              _elem191 = new PRange();
              _elem191.read(iprot);
              struct.range.add(_elem191);
            }
          }
          struct.setRangeIsSet(true);
        }
      }
    }

  }

  public static class createBatchScanner_result implements org.apache.thrift.TBase<createBatchScanner_result, createBatchScanner_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createBatchScanner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createBatchScanner_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createBatchScanner_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createBatchScanner_result.class, metaDataMap);
    }

    public createBatchScanner_result() {
    }

    public createBatchScanner_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createBatchScanner_result(createBatchScanner_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createBatchScanner_result deepCopy() {
      return new createBatchScanner_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createBatchScanner_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createBatchScanner_result)
        return this.equals((createBatchScanner_result)that);
      return false;
    }

    public boolean equals(createBatchScanner_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createBatchScanner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createBatchScanner_result typedOther = (createBatchScanner_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createBatchScanner_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createBatchScanner_resultStandardSchemeFactory implements SchemeFactory {
      public createBatchScanner_resultStandardScheme getScheme() {
        return new createBatchScanner_resultStandardScheme();
      }
    }

    private static class createBatchScanner_resultStandardScheme extends StandardScheme<createBatchScanner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createBatchScanner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createBatchScanner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createBatchScanner_resultTupleSchemeFactory implements SchemeFactory {
      public createBatchScanner_resultTupleScheme getScheme() {
        return new createBatchScanner_resultTupleScheme();
      }
    }

    private static class createBatchScanner_resultTupleScheme extends TupleScheme<createBatchScanner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createBatchScanner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createBatchScanner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createScanner_args implements org.apache.thrift.TBase<createScanner_args, createScanner_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createScanner_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHORIZATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("authorizations", org.apache.thrift.protocol.TType.SET, (short)3);
    private static final org.apache.thrift.protocol.TField ITERATOR_SETTING_FIELD_DESC = new org.apache.thrift.protocol.TField("iteratorSetting", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("range", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createScanner_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createScanner_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required
    public Set<String> authorizations; // required
    public PIteratorSetting iteratorSetting; // required
    public PRange range; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName"),
      AUTHORIZATIONS((short)3, "authorizations"),
      ITERATOR_SETTING((short)4, "iteratorSetting"),
      RANGE((short)5, "range");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // AUTHORIZATIONS
            return AUTHORIZATIONS;
          case 4: // ITERATOR_SETTING
            return ITERATOR_SETTING;
          case 5: // RANGE
            return RANGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTHORIZATIONS, new org.apache.thrift.meta_data.FieldMetaData("authorizations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ITERATOR_SETTING, new org.apache.thrift.meta_data.FieldMetaData("iteratorSetting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PIteratorSetting.class)));
      tmpMap.put(_Fields.RANGE, new org.apache.thrift.meta_data.FieldMetaData("range", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PRange.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createScanner_args.class, metaDataMap);
    }

    public createScanner_args() {
    }

    public createScanner_args(
      UserPass userpass,
      String tableName,
      Set<String> authorizations,
      PIteratorSetting iteratorSetting,
      PRange range)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
      this.authorizations = authorizations;
      this.iteratorSetting = iteratorSetting;
      this.range = range;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createScanner_args(createScanner_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetAuthorizations()) {
        Set<String> __this__authorizations = new HashSet<String>();
        for (String other_element : other.authorizations) {
          __this__authorizations.add(other_element);
        }
        this.authorizations = __this__authorizations;
      }
      if (other.isSetIteratorSetting()) {
        this.iteratorSetting = new PIteratorSetting(other.iteratorSetting);
      }
      if (other.isSetRange()) {
        this.range = new PRange(other.range);
      }
    }

    public createScanner_args deepCopy() {
      return new createScanner_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
      this.authorizations = null;
      this.iteratorSetting = null;
      this.range = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public createScanner_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public createScanner_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public int getAuthorizationsSize() {
      return (this.authorizations == null) ? 0 : this.authorizations.size();
    }

    public java.util.Iterator<String> getAuthorizationsIterator() {
      return (this.authorizations == null) ? null : this.authorizations.iterator();
    }

    public void addToAuthorizations(String elem) {
      if (this.authorizations == null) {
        this.authorizations = new HashSet<String>();
      }
      this.authorizations.add(elem);
    }

    public Set<String> getAuthorizations() {
      return this.authorizations;
    }

    public createScanner_args setAuthorizations(Set<String> authorizations) {
      this.authorizations = authorizations;
      return this;
    }

    public void unsetAuthorizations() {
      this.authorizations = null;
    }

    /** Returns true if field authorizations is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorizations() {
      return this.authorizations != null;
    }

    public void setAuthorizationsIsSet(boolean value) {
      if (!value) {
        this.authorizations = null;
      }
    }

    public PIteratorSetting getIteratorSetting() {
      return this.iteratorSetting;
    }

    public createScanner_args setIteratorSetting(PIteratorSetting iteratorSetting) {
      this.iteratorSetting = iteratorSetting;
      return this;
    }

    public void unsetIteratorSetting() {
      this.iteratorSetting = null;
    }

    /** Returns true if field iteratorSetting is set (has been assigned a value) and false otherwise */
    public boolean isSetIteratorSetting() {
      return this.iteratorSetting != null;
    }

    public void setIteratorSettingIsSet(boolean value) {
      if (!value) {
        this.iteratorSetting = null;
      }
    }

    public PRange getRange() {
      return this.range;
    }

    public createScanner_args setRange(PRange range) {
      this.range = range;
      return this;
    }

    public void unsetRange() {
      this.range = null;
    }

    /** Returns true if field range is set (has been assigned a value) and false otherwise */
    public boolean isSetRange() {
      return this.range != null;
    }

    public void setRangeIsSet(boolean value) {
      if (!value) {
        this.range = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      case AUTHORIZATIONS:
        if (value == null) {
          unsetAuthorizations();
        } else {
          setAuthorizations((Set<String>)value);
        }
        break;

      case ITERATOR_SETTING:
        if (value == null) {
          unsetIteratorSetting();
        } else {
          setIteratorSetting((PIteratorSetting)value);
        }
        break;

      case RANGE:
        if (value == null) {
          unsetRange();
        } else {
          setRange((PRange)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      case AUTHORIZATIONS:
        return getAuthorizations();

      case ITERATOR_SETTING:
        return getIteratorSetting();

      case RANGE:
        return getRange();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      case AUTHORIZATIONS:
        return isSetAuthorizations();
      case ITERATOR_SETTING:
        return isSetIteratorSetting();
      case RANGE:
        return isSetRange();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createScanner_args)
        return this.equals((createScanner_args)that);
      return false;
    }

    public boolean equals(createScanner_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_authorizations = true && this.isSetAuthorizations();
      boolean that_present_authorizations = true && that.isSetAuthorizations();
      if (this_present_authorizations || that_present_authorizations) {
        if (!(this_present_authorizations && that_present_authorizations))
          return false;
        if (!this.authorizations.equals(that.authorizations))
          return false;
      }

      boolean this_present_iteratorSetting = true && this.isSetIteratorSetting();
      boolean that_present_iteratorSetting = true && that.isSetIteratorSetting();
      if (this_present_iteratorSetting || that_present_iteratorSetting) {
        if (!(this_present_iteratorSetting && that_present_iteratorSetting))
          return false;
        if (!this.iteratorSetting.equals(that.iteratorSetting))
          return false;
      }

      boolean this_present_range = true && this.isSetRange();
      boolean that_present_range = true && that.isSetRange();
      if (this_present_range || that_present_range) {
        if (!(this_present_range && that_present_range))
          return false;
        if (!this.range.equals(that.range))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createScanner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createScanner_args typedOther = (createScanner_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorizations()).compareTo(typedOther.isSetAuthorizations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorizations()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorizations, typedOther.authorizations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIteratorSetting()).compareTo(typedOther.isSetIteratorSetting());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIteratorSetting()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iteratorSetting, typedOther.iteratorSetting);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRange()).compareTo(typedOther.isSetRange());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRange()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range, typedOther.range);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createScanner_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorizations:");
      if (this.authorizations == null) {
        sb.append("null");
      } else {
        sb.append(this.authorizations);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iteratorSetting:");
      if (this.iteratorSetting == null) {
        sb.append("null");
      } else {
        sb.append(this.iteratorSetting);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("range:");
      if (this.range == null) {
        sb.append("null");
      } else {
        sb.append(this.range);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
      if (iteratorSetting != null) {
        iteratorSetting.validate();
      }
      if (range != null) {
        range.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createScanner_argsStandardSchemeFactory implements SchemeFactory {
      public createScanner_argsStandardScheme getScheme() {
        return new createScanner_argsStandardScheme();
      }
    }

    private static class createScanner_argsStandardScheme extends StandardScheme<createScanner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createScanner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHORIZATIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set192 = iprot.readSetBegin();
                  struct.authorizations = new HashSet<String>(2*_set192.size);
                  for (int _i193 = 0; _i193 < _set192.size; ++_i193)
                  {
                    String _elem194; // required
                    _elem194 = iprot.readString();
                    struct.authorizations.add(_elem194);
                  }
                  iprot.readSetEnd();
                }
                struct.setAuthorizationsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ITERATOR_SETTING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.iteratorSetting = new PIteratorSetting();
                struct.iteratorSetting.read(iprot);
                struct.setIteratorSettingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // RANGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.range = new PRange();
                struct.range.read(iprot);
                struct.setRangeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createScanner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.authorizations != null) {
          oprot.writeFieldBegin(AUTHORIZATIONS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.authorizations.size()));
            for (String _iter195 : struct.authorizations)
            {
              oprot.writeString(_iter195);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.iteratorSetting != null) {
          oprot.writeFieldBegin(ITERATOR_SETTING_FIELD_DESC);
          struct.iteratorSetting.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.range != null) {
          oprot.writeFieldBegin(RANGE_FIELD_DESC);
          struct.range.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createScanner_argsTupleSchemeFactory implements SchemeFactory {
      public createScanner_argsTupleScheme getScheme() {
        return new createScanner_argsTupleScheme();
      }
    }

    private static class createScanner_argsTupleScheme extends TupleScheme<createScanner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createScanner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorizations()) {
          optionals.set(2);
        }
        if (struct.isSetIteratorSetting()) {
          optionals.set(3);
        }
        if (struct.isSetRange()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetAuthorizations()) {
          {
            oprot.writeI32(struct.authorizations.size());
            for (String _iter196 : struct.authorizations)
            {
              oprot.writeString(_iter196);
            }
          }
        }
        if (struct.isSetIteratorSetting()) {
          struct.iteratorSetting.write(oprot);
        }
        if (struct.isSetRange()) {
          struct.range.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createScanner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TSet _set197 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.authorizations = new HashSet<String>(2*_set197.size);
            for (int _i198 = 0; _i198 < _set197.size; ++_i198)
            {
              String _elem199; // required
              _elem199 = iprot.readString();
              struct.authorizations.add(_elem199);
            }
          }
          struct.setAuthorizationsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.iteratorSetting = new PIteratorSetting();
          struct.iteratorSetting.read(iprot);
          struct.setIteratorSettingIsSet(true);
        }
        if (incoming.get(4)) {
          struct.range = new PRange();
          struct.range.read(iprot);
          struct.setRangeIsSet(true);
        }
      }
    }

  }

  public static class createScanner_result implements org.apache.thrift.TBase<createScanner_result, createScanner_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createScanner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createScanner_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createScanner_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createScanner_result.class, metaDataMap);
    }

    public createScanner_result() {
    }

    public createScanner_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createScanner_result(createScanner_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createScanner_result deepCopy() {
      return new createScanner_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createScanner_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createScanner_result)
        return this.equals((createScanner_result)that);
      return false;
    }

    public boolean equals(createScanner_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createScanner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createScanner_result typedOther = (createScanner_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createScanner_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createScanner_resultStandardSchemeFactory implements SchemeFactory {
      public createScanner_resultStandardScheme getScheme() {
        return new createScanner_resultStandardScheme();
      }
    }

    private static class createScanner_resultStandardScheme extends StandardScheme<createScanner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createScanner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createScanner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createScanner_resultTupleSchemeFactory implements SchemeFactory {
      public createScanner_resultTupleScheme getScheme() {
        return new createScanner_resultTupleScheme();
      }
    }

    private static class createScanner_resultTupleScheme extends TupleScheme<createScanner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createScanner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createScanner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class scanner_hasnext_args implements org.apache.thrift.TBase<scanner_hasnext_args, scanner_hasnext_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_hasnext_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scanner_hasnext_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scanner_hasnext_argsTupleSchemeFactory());
    }

    public String scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_hasnext_args.class, metaDataMap);
    }

    public scanner_hasnext_args() {
    }

    public scanner_hasnext_args(
      String scanner)
    {
      this();
      this.scanner = scanner;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_hasnext_args(scanner_hasnext_args other) {
      if (other.isSetScanner()) {
        this.scanner = other.scanner;
      }
    }

    public scanner_hasnext_args deepCopy() {
      return new scanner_hasnext_args(this);
    }

    @Override
    public void clear() {
      this.scanner = null;
    }

    public String getScanner() {
      return this.scanner;
    }

    public scanner_hasnext_args setScanner(String scanner) {
      this.scanner = scanner;
      return this;
    }

    public void unsetScanner() {
      this.scanner = null;
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return this.scanner != null;
    }

    public void setScannerIsSet(boolean value) {
      if (!value) {
        this.scanner = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return getScanner();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_hasnext_args)
        return this.equals((scanner_hasnext_args)that);
      return false;
    }

    public boolean equals(scanner_hasnext_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true && this.isSetScanner();
      boolean that_present_scanner = true && that.isSetScanner();
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (!this.scanner.equals(that.scanner))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_hasnext_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_hasnext_args typedOther = (scanner_hasnext_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_hasnext_args(");
      boolean first = true;

      sb.append("scanner:");
      if (this.scanner == null) {
        sb.append("null");
      } else {
        sb.append(this.scanner);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scanner_hasnext_argsStandardSchemeFactory implements SchemeFactory {
      public scanner_hasnext_argsStandardScheme getScheme() {
        return new scanner_hasnext_argsStandardScheme();
      }
    }

    private static class scanner_hasnext_argsStandardScheme extends StandardScheme<scanner_hasnext_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scanner_hasnext_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCANNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scanner = iprot.readString();
                struct.setScannerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scanner_hasnext_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scanner != null) {
          oprot.writeFieldBegin(SCANNER_FIELD_DESC);
          oprot.writeString(struct.scanner);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scanner_hasnext_argsTupleSchemeFactory implements SchemeFactory {
      public scanner_hasnext_argsTupleScheme getScheme() {
        return new scanner_hasnext_argsTupleScheme();
      }
    }

    private static class scanner_hasnext_argsTupleScheme extends TupleScheme<scanner_hasnext_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scanner_hasnext_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScanner()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetScanner()) {
          oprot.writeString(struct.scanner);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scanner_hasnext_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.scanner = iprot.readString();
          struct.setScannerIsSet(true);
        }
      }
    }

  }

  public static class scanner_hasnext_result implements org.apache.thrift.TBase<scanner_hasnext_result, scanner_hasnext_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_hasnext_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scanner_hasnext_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scanner_hasnext_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_hasnext_result.class, metaDataMap);
    }

    public scanner_hasnext_result() {
    }

    public scanner_hasnext_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_hasnext_result(scanner_hasnext_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public scanner_hasnext_result deepCopy() {
      return new scanner_hasnext_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public scanner_hasnext_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_hasnext_result)
        return this.equals((scanner_hasnext_result)that);
      return false;
    }

    public boolean equals(scanner_hasnext_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_hasnext_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_hasnext_result typedOther = (scanner_hasnext_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_hasnext_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scanner_hasnext_resultStandardSchemeFactory implements SchemeFactory {
      public scanner_hasnext_resultStandardScheme getScheme() {
        return new scanner_hasnext_resultStandardScheme();
      }
    }

    private static class scanner_hasnext_resultStandardScheme extends StandardScheme<scanner_hasnext_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scanner_hasnext_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scanner_hasnext_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scanner_hasnext_resultTupleSchemeFactory implements SchemeFactory {
      public scanner_hasnext_resultTupleScheme getScheme() {
        return new scanner_hasnext_resultTupleScheme();
      }
    }

    private static class scanner_hasnext_resultTupleScheme extends TupleScheme<scanner_hasnext_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scanner_hasnext_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scanner_hasnext_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class scanner_next_args implements org.apache.thrift.TBase<scanner_next_args, scanner_next_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_next_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scanner_next_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scanner_next_argsTupleSchemeFactory());
    }

    public String scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_next_args.class, metaDataMap);
    }

    public scanner_next_args() {
    }

    public scanner_next_args(
      String scanner)
    {
      this();
      this.scanner = scanner;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_next_args(scanner_next_args other) {
      if (other.isSetScanner()) {
        this.scanner = other.scanner;
      }
    }

    public scanner_next_args deepCopy() {
      return new scanner_next_args(this);
    }

    @Override
    public void clear() {
      this.scanner = null;
    }

    public String getScanner() {
      return this.scanner;
    }

    public scanner_next_args setScanner(String scanner) {
      this.scanner = scanner;
      return this;
    }

    public void unsetScanner() {
      this.scanner = null;
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return this.scanner != null;
    }

    public void setScannerIsSet(boolean value) {
      if (!value) {
        this.scanner = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return getScanner();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_next_args)
        return this.equals((scanner_next_args)that);
      return false;
    }

    public boolean equals(scanner_next_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true && this.isSetScanner();
      boolean that_present_scanner = true && that.isSetScanner();
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (!this.scanner.equals(that.scanner))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_next_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_next_args typedOther = (scanner_next_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_next_args(");
      boolean first = true;

      sb.append("scanner:");
      if (this.scanner == null) {
        sb.append("null");
      } else {
        sb.append(this.scanner);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scanner_next_argsStandardSchemeFactory implements SchemeFactory {
      public scanner_next_argsStandardScheme getScheme() {
        return new scanner_next_argsStandardScheme();
      }
    }

    private static class scanner_next_argsStandardScheme extends StandardScheme<scanner_next_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scanner_next_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCANNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scanner = iprot.readString();
                struct.setScannerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scanner_next_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scanner != null) {
          oprot.writeFieldBegin(SCANNER_FIELD_DESC);
          oprot.writeString(struct.scanner);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scanner_next_argsTupleSchemeFactory implements SchemeFactory {
      public scanner_next_argsTupleScheme getScheme() {
        return new scanner_next_argsTupleScheme();
      }
    }

    private static class scanner_next_argsTupleScheme extends TupleScheme<scanner_next_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scanner_next_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScanner()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetScanner()) {
          oprot.writeString(struct.scanner);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scanner_next_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.scanner = iprot.readString();
          struct.setScannerIsSet(true);
        }
      }
    }

  }

  public static class scanner_next_result implements org.apache.thrift.TBase<scanner_next_result, scanner_next_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_next_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scanner_next_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scanner_next_resultTupleSchemeFactory());
    }

    public KeyValueAndPeek success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyValueAndPeek.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_next_result.class, metaDataMap);
    }

    public scanner_next_result() {
    }

    public scanner_next_result(
      KeyValueAndPeek success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_next_result(scanner_next_result other) {
      if (other.isSetSuccess()) {
        this.success = new KeyValueAndPeek(other.success);
      }
    }

    public scanner_next_result deepCopy() {
      return new scanner_next_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public KeyValueAndPeek getSuccess() {
      return this.success;
    }

    public scanner_next_result setSuccess(KeyValueAndPeek success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((KeyValueAndPeek)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_next_result)
        return this.equals((scanner_next_result)that);
      return false;
    }

    public boolean equals(scanner_next_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_next_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_next_result typedOther = (scanner_next_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_next_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scanner_next_resultStandardSchemeFactory implements SchemeFactory {
      public scanner_next_resultStandardScheme getScheme() {
        return new scanner_next_resultStandardScheme();
      }
    }

    private static class scanner_next_resultStandardScheme extends StandardScheme<scanner_next_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scanner_next_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new KeyValueAndPeek();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scanner_next_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scanner_next_resultTupleSchemeFactory implements SchemeFactory {
      public scanner_next_resultTupleScheme getScheme() {
        return new scanner_next_resultTupleScheme();
      }
    }

    private static class scanner_next_resultTupleScheme extends TupleScheme<scanner_next_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scanner_next_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scanner_next_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new KeyValueAndPeek();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class scanner_next_k_args implements org.apache.thrift.TBase<scanner_next_k_args, scanner_next_k_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_next_k_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField K_FIELD_DESC = new org.apache.thrift.protocol.TField("k", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scanner_next_k_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scanner_next_k_argsTupleSchemeFactory());
    }

    public String scanner; // required
    public int k; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner"),
      K((short)2, "k");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          case 2: // K
            return K;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __K_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.K, new org.apache.thrift.meta_data.FieldMetaData("k", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_next_k_args.class, metaDataMap);
    }

    public scanner_next_k_args() {
    }

    public scanner_next_k_args(
      String scanner,
      int k)
    {
      this();
      this.scanner = scanner;
      this.k = k;
      setKIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_next_k_args(scanner_next_k_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetScanner()) {
        this.scanner = other.scanner;
      }
      this.k = other.k;
    }

    public scanner_next_k_args deepCopy() {
      return new scanner_next_k_args(this);
    }

    @Override
    public void clear() {
      this.scanner = null;
      setKIsSet(false);
      this.k = 0;
    }

    public String getScanner() {
      return this.scanner;
    }

    public scanner_next_k_args setScanner(String scanner) {
      this.scanner = scanner;
      return this;
    }

    public void unsetScanner() {
      this.scanner = null;
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return this.scanner != null;
    }

    public void setScannerIsSet(boolean value) {
      if (!value) {
        this.scanner = null;
      }
    }

    public int getK() {
      return this.k;
    }

    public scanner_next_k_args setK(int k) {
      this.k = k;
      setKIsSet(true);
      return this;
    }

    public void unsetK() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __K_ISSET_ID);
    }

    /** Returns true if field k is set (has been assigned a value) and false otherwise */
    public boolean isSetK() {
      return EncodingUtils.testBit(__isset_bitfield, __K_ISSET_ID);
    }

    public void setKIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __K_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((String)value);
        }
        break;

      case K:
        if (value == null) {
          unsetK();
        } else {
          setK((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return getScanner();

      case K:
        return Integer.valueOf(getK());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      case K:
        return isSetK();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_next_k_args)
        return this.equals((scanner_next_k_args)that);
      return false;
    }

    public boolean equals(scanner_next_k_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true && this.isSetScanner();
      boolean that_present_scanner = true && that.isSetScanner();
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (!this.scanner.equals(that.scanner))
          return false;
      }

      boolean this_present_k = true;
      boolean that_present_k = true;
      if (this_present_k || that_present_k) {
        if (!(this_present_k && that_present_k))
          return false;
        if (this.k != that.k)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_next_k_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_next_k_args typedOther = (scanner_next_k_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetK()).compareTo(typedOther.isSetK());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetK()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.k, typedOther.k);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_next_k_args(");
      boolean first = true;

      sb.append("scanner:");
      if (this.scanner == null) {
        sb.append("null");
      } else {
        sb.append(this.scanner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("k:");
      sb.append(this.k);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scanner_next_k_argsStandardSchemeFactory implements SchemeFactory {
      public scanner_next_k_argsStandardScheme getScheme() {
        return new scanner_next_k_argsStandardScheme();
      }
    }

    private static class scanner_next_k_argsStandardScheme extends StandardScheme<scanner_next_k_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scanner_next_k_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCANNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scanner = iprot.readString();
                struct.setScannerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // K
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.k = iprot.readI32();
                struct.setKIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scanner_next_k_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scanner != null) {
          oprot.writeFieldBegin(SCANNER_FIELD_DESC);
          oprot.writeString(struct.scanner);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(K_FIELD_DESC);
        oprot.writeI32(struct.k);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scanner_next_k_argsTupleSchemeFactory implements SchemeFactory {
      public scanner_next_k_argsTupleScheme getScheme() {
        return new scanner_next_k_argsTupleScheme();
      }
    }

    private static class scanner_next_k_argsTupleScheme extends TupleScheme<scanner_next_k_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scanner_next_k_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScanner()) {
          optionals.set(0);
        }
        if (struct.isSetK()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetScanner()) {
          oprot.writeString(struct.scanner);
        }
        if (struct.isSetK()) {
          oprot.writeI32(struct.k);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scanner_next_k_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.scanner = iprot.readString();
          struct.setScannerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.k = iprot.readI32();
          struct.setKIsSet(true);
        }
      }
    }

  }

  public static class scanner_next_k_result implements org.apache.thrift.TBase<scanner_next_k_result, scanner_next_k_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_next_k_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scanner_next_k_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scanner_next_k_resultTupleSchemeFactory());
    }

    public PScanResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PScanResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_next_k_result.class, metaDataMap);
    }

    public scanner_next_k_result() {
    }

    public scanner_next_k_result(
      PScanResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_next_k_result(scanner_next_k_result other) {
      if (other.isSetSuccess()) {
        this.success = new PScanResult(other.success);
      }
    }

    public scanner_next_k_result deepCopy() {
      return new scanner_next_k_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PScanResult getSuccess() {
      return this.success;
    }

    public scanner_next_k_result setSuccess(PScanResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PScanResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_next_k_result)
        return this.equals((scanner_next_k_result)that);
      return false;
    }

    public boolean equals(scanner_next_k_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_next_k_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_next_k_result typedOther = (scanner_next_k_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_next_k_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scanner_next_k_resultStandardSchemeFactory implements SchemeFactory {
      public scanner_next_k_resultStandardScheme getScheme() {
        return new scanner_next_k_resultStandardScheme();
      }
    }

    private static class scanner_next_k_resultStandardScheme extends StandardScheme<scanner_next_k_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scanner_next_k_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PScanResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scanner_next_k_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scanner_next_k_resultTupleSchemeFactory implements SchemeFactory {
      public scanner_next_k_resultTupleScheme getScheme() {
        return new scanner_next_k_resultTupleScheme();
      }
    }

    private static class scanner_next_k_resultTupleScheme extends TupleScheme<scanner_next_k_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scanner_next_k_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scanner_next_k_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PScanResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class close_scanner_args implements org.apache.thrift.TBase<close_scanner_args, close_scanner_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_scanner_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new close_scanner_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new close_scanner_argsTupleSchemeFactory());
    }

    public String scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_scanner_args.class, metaDataMap);
    }

    public close_scanner_args() {
    }

    public close_scanner_args(
      String scanner)
    {
      this();
      this.scanner = scanner;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_scanner_args(close_scanner_args other) {
      if (other.isSetScanner()) {
        this.scanner = other.scanner;
      }
    }

    public close_scanner_args deepCopy() {
      return new close_scanner_args(this);
    }

    @Override
    public void clear() {
      this.scanner = null;
    }

    public String getScanner() {
      return this.scanner;
    }

    public close_scanner_args setScanner(String scanner) {
      this.scanner = scanner;
      return this;
    }

    public void unsetScanner() {
      this.scanner = null;
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return this.scanner != null;
    }

    public void setScannerIsSet(boolean value) {
      if (!value) {
        this.scanner = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return getScanner();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_scanner_args)
        return this.equals((close_scanner_args)that);
      return false;
    }

    public boolean equals(close_scanner_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true && this.isSetScanner();
      boolean that_present_scanner = true && that.isSetScanner();
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (!this.scanner.equals(that.scanner))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(close_scanner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      close_scanner_args typedOther = (close_scanner_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("close_scanner_args(");
      boolean first = true;

      sb.append("scanner:");
      if (this.scanner == null) {
        sb.append("null");
      } else {
        sb.append(this.scanner);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class close_scanner_argsStandardSchemeFactory implements SchemeFactory {
      public close_scanner_argsStandardScheme getScheme() {
        return new close_scanner_argsStandardScheme();
      }
    }

    private static class close_scanner_argsStandardScheme extends StandardScheme<close_scanner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, close_scanner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCANNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scanner = iprot.readString();
                struct.setScannerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, close_scanner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scanner != null) {
          oprot.writeFieldBegin(SCANNER_FIELD_DESC);
          oprot.writeString(struct.scanner);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class close_scanner_argsTupleSchemeFactory implements SchemeFactory {
      public close_scanner_argsTupleScheme getScheme() {
        return new close_scanner_argsTupleScheme();
      }
    }

    private static class close_scanner_argsTupleScheme extends TupleScheme<close_scanner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, close_scanner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScanner()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetScanner()) {
          oprot.writeString(struct.scanner);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, close_scanner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.scanner = iprot.readString();
          struct.setScannerIsSet(true);
        }
      }
    }

  }

  public static class close_scanner_result implements org.apache.thrift.TBase<close_scanner_result, close_scanner_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_scanner_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new close_scanner_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new close_scanner_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_scanner_result.class, metaDataMap);
    }

    public close_scanner_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_scanner_result(close_scanner_result other) {
    }

    public close_scanner_result deepCopy() {
      return new close_scanner_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_scanner_result)
        return this.equals((close_scanner_result)that);
      return false;
    }

    public boolean equals(close_scanner_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(close_scanner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      close_scanner_result typedOther = (close_scanner_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("close_scanner_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class close_scanner_resultStandardSchemeFactory implements SchemeFactory {
      public close_scanner_resultStandardScheme getScheme() {
        return new close_scanner_resultStandardScheme();
      }
    }

    private static class close_scanner_resultStandardScheme extends StandardScheme<close_scanner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, close_scanner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, close_scanner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class close_scanner_resultTupleSchemeFactory implements SchemeFactory {
      public close_scanner_resultTupleScheme getScheme() {
        return new close_scanner_resultTupleScheme();
      }
    }

    private static class close_scanner_resultTupleScheme extends TupleScheme<close_scanner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, close_scanner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, close_scanner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateAndFlush_args implements org.apache.thrift.TBase<updateAndFlush_args, updateAndFlush_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAndFlush_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.MAP, (short)3);
    private static final org.apache.thrift.protocol.TField DELETED_CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("deletedCells", org.apache.thrift.protocol.TType.MAP, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAndFlush_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAndFlush_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required
    public Map<ByteBuffer,List<PColumnUpdate>> cells; // required
    public Map<ByteBuffer,List<PColumn>> deletedCells; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName"),
      CELLS((short)3, "cells"),
      DELETED_CELLS((short)4, "deletedCells");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // CELLS
            return CELLS;
          case 4: // DELETED_CELLS
            return DELETED_CELLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PColumnUpdate.class)))));
      tmpMap.put(_Fields.DELETED_CELLS, new org.apache.thrift.meta_data.FieldMetaData("deletedCells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PColumn.class)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAndFlush_args.class, metaDataMap);
    }

    public updateAndFlush_args() {
    }

    public updateAndFlush_args(
      UserPass userpass,
      String tableName,
      Map<ByteBuffer,List<PColumnUpdate>> cells,
      Map<ByteBuffer,List<PColumn>> deletedCells)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
      this.cells = cells;
      this.deletedCells = deletedCells;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAndFlush_args(updateAndFlush_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetCells()) {
        Map<ByteBuffer,List<PColumnUpdate>> __this__cells = new HashMap<ByteBuffer,List<PColumnUpdate>>();
        for (Map.Entry<ByteBuffer, List<PColumnUpdate>> other_element : other.cells.entrySet()) {

          ByteBuffer other_element_key = other_element.getKey();
          List<PColumnUpdate> other_element_value = other_element.getValue();

          ByteBuffer __this__cells_copy_key = org.apache.thrift.TBaseHelper.copyBinary(other_element_key);
;

          List<PColumnUpdate> __this__cells_copy_value = new ArrayList<PColumnUpdate>();
          for (PColumnUpdate other_element_value_element : other_element_value) {
            __this__cells_copy_value.add(new PColumnUpdate(other_element_value_element));
          }

          __this__cells.put(__this__cells_copy_key, __this__cells_copy_value);
        }
        this.cells = __this__cells;
      }
      if (other.isSetDeletedCells()) {
        Map<ByteBuffer,List<PColumn>> __this__deletedCells = new HashMap<ByteBuffer,List<PColumn>>();
        for (Map.Entry<ByteBuffer, List<PColumn>> other_element : other.deletedCells.entrySet()) {

          ByteBuffer other_element_key = other_element.getKey();
          List<PColumn> other_element_value = other_element.getValue();

          ByteBuffer __this__deletedCells_copy_key = org.apache.thrift.TBaseHelper.copyBinary(other_element_key);
;

          List<PColumn> __this__deletedCells_copy_value = new ArrayList<PColumn>();
          for (PColumn other_element_value_element : other_element_value) {
            __this__deletedCells_copy_value.add(new PColumn(other_element_value_element));
          }

          __this__deletedCells.put(__this__deletedCells_copy_key, __this__deletedCells_copy_value);
        }
        this.deletedCells = __this__deletedCells;
      }
    }

    public updateAndFlush_args deepCopy() {
      return new updateAndFlush_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
      this.cells = null;
      this.deletedCells = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public updateAndFlush_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public updateAndFlush_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public int getCellsSize() {
      return (this.cells == null) ? 0 : this.cells.size();
    }

    public void putToCells(ByteBuffer key, List<PColumnUpdate> val) {
      if (this.cells == null) {
        this.cells = new HashMap<ByteBuffer,List<PColumnUpdate>>();
      }
      this.cells.put(key, val);
    }

    public Map<ByteBuffer,List<PColumnUpdate>> getCells() {
      return this.cells;
    }

    public updateAndFlush_args setCells(Map<ByteBuffer,List<PColumnUpdate>> cells) {
      this.cells = cells;
      return this;
    }

    public void unsetCells() {
      this.cells = null;
    }

    /** Returns true if field cells is set (has been assigned a value) and false otherwise */
    public boolean isSetCells() {
      return this.cells != null;
    }

    public void setCellsIsSet(boolean value) {
      if (!value) {
        this.cells = null;
      }
    }

    public int getDeletedCellsSize() {
      return (this.deletedCells == null) ? 0 : this.deletedCells.size();
    }

    public void putToDeletedCells(ByteBuffer key, List<PColumn> val) {
      if (this.deletedCells == null) {
        this.deletedCells = new HashMap<ByteBuffer,List<PColumn>>();
      }
      this.deletedCells.put(key, val);
    }

    public Map<ByteBuffer,List<PColumn>> getDeletedCells() {
      return this.deletedCells;
    }

    public updateAndFlush_args setDeletedCells(Map<ByteBuffer,List<PColumn>> deletedCells) {
      this.deletedCells = deletedCells;
      return this;
    }

    public void unsetDeletedCells() {
      this.deletedCells = null;
    }

    /** Returns true if field deletedCells is set (has been assigned a value) and false otherwise */
    public boolean isSetDeletedCells() {
      return this.deletedCells != null;
    }

    public void setDeletedCellsIsSet(boolean value) {
      if (!value) {
        this.deletedCells = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      case CELLS:
        if (value == null) {
          unsetCells();
        } else {
          setCells((Map<ByteBuffer,List<PColumnUpdate>>)value);
        }
        break;

      case DELETED_CELLS:
        if (value == null) {
          unsetDeletedCells();
        } else {
          setDeletedCells((Map<ByteBuffer,List<PColumn>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      case CELLS:
        return getCells();

      case DELETED_CELLS:
        return getDeletedCells();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      case CELLS:
        return isSetCells();
      case DELETED_CELLS:
        return isSetDeletedCells();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAndFlush_args)
        return this.equals((updateAndFlush_args)that);
      return false;
    }

    public boolean equals(updateAndFlush_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_cells = true && this.isSetCells();
      boolean that_present_cells = true && that.isSetCells();
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      boolean this_present_deletedCells = true && this.isSetDeletedCells();
      boolean that_present_deletedCells = true && that.isSetDeletedCells();
      if (this_present_deletedCells || that_present_deletedCells) {
        if (!(this_present_deletedCells && that_present_deletedCells))
          return false;
        if (!this.deletedCells.equals(that.deletedCells))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateAndFlush_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateAndFlush_args typedOther = (updateAndFlush_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCells()).compareTo(typedOther.isSetCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, typedOther.cells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeletedCells()).compareTo(typedOther.isSetDeletedCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeletedCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deletedCells, typedOther.deletedCells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAndFlush_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deletedCells:");
      if (this.deletedCells == null) {
        sb.append("null");
      } else {
        sb.append(this.deletedCells);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAndFlush_argsStandardSchemeFactory implements SchemeFactory {
      public updateAndFlush_argsStandardScheme getScheme() {
        return new updateAndFlush_argsStandardScheme();
      }
    }

    private static class updateAndFlush_argsStandardScheme extends StandardScheme<updateAndFlush_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAndFlush_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CELLS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map200 = iprot.readMapBegin();
                  struct.cells = new HashMap<ByteBuffer,List<PColumnUpdate>>(2*_map200.size);
                  for (int _i201 = 0; _i201 < _map200.size; ++_i201)
                  {
                    ByteBuffer _key202; // required
                    List<PColumnUpdate> _val203; // required
                    _key202 = iprot.readBinary();
                    {
                      org.apache.thrift.protocol.TList _list204 = iprot.readListBegin();
                      _val203 = new ArrayList<PColumnUpdate>(_list204.size);
                      for (int _i205 = 0; _i205 < _list204.size; ++_i205)
                      {
                        PColumnUpdate _elem206; // required
                        _elem206 = new PColumnUpdate();
                        _elem206.read(iprot);
                        _val203.add(_elem206);
                      }
                      iprot.readListEnd();
                    }
                    struct.cells.put(_key202, _val203);
                  }
                  iprot.readMapEnd();
                }
                struct.setCellsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DELETED_CELLS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map207 = iprot.readMapBegin();
                  struct.deletedCells = new HashMap<ByteBuffer,List<PColumn>>(2*_map207.size);
                  for (int _i208 = 0; _i208 < _map207.size; ++_i208)
                  {
                    ByteBuffer _key209; // required
                    List<PColumn> _val210; // required
                    _key209 = iprot.readBinary();
                    {
                      org.apache.thrift.protocol.TList _list211 = iprot.readListBegin();
                      _val210 = new ArrayList<PColumn>(_list211.size);
                      for (int _i212 = 0; _i212 < _list211.size; ++_i212)
                      {
                        PColumn _elem213; // required
                        _elem213 = new PColumn();
                        _elem213.read(iprot);
                        _val210.add(_elem213);
                      }
                      iprot.readListEnd();
                    }
                    struct.deletedCells.put(_key209, _val210);
                  }
                  iprot.readMapEnd();
                }
                struct.setDeletedCellsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAndFlush_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.cells != null) {
          oprot.writeFieldBegin(CELLS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.cells.size()));
            for (Map.Entry<ByteBuffer, List<PColumnUpdate>> _iter214 : struct.cells.entrySet())
            {
              oprot.writeBinary(_iter214.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter214.getValue().size()));
                for (PColumnUpdate _iter215 : _iter214.getValue())
                {
                  _iter215.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.deletedCells != null) {
          oprot.writeFieldBegin(DELETED_CELLS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.deletedCells.size()));
            for (Map.Entry<ByteBuffer, List<PColumn>> _iter216 : struct.deletedCells.entrySet())
            {
              oprot.writeBinary(_iter216.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter216.getValue().size()));
                for (PColumn _iter217 : _iter216.getValue())
                {
                  _iter217.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAndFlush_argsTupleSchemeFactory implements SchemeFactory {
      public updateAndFlush_argsTupleScheme getScheme() {
        return new updateAndFlush_argsTupleScheme();
      }
    }

    private static class updateAndFlush_argsTupleScheme extends TupleScheme<updateAndFlush_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAndFlush_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        if (struct.isSetCells()) {
          optionals.set(2);
        }
        if (struct.isSetDeletedCells()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetCells()) {
          {
            oprot.writeI32(struct.cells.size());
            for (Map.Entry<ByteBuffer, List<PColumnUpdate>> _iter218 : struct.cells.entrySet())
            {
              oprot.writeBinary(_iter218.getKey());
              {
                oprot.writeI32(_iter218.getValue().size());
                for (PColumnUpdate _iter219 : _iter218.getValue())
                {
                  _iter219.write(oprot);
                }
              }
            }
          }
        }
        if (struct.isSetDeletedCells()) {
          {
            oprot.writeI32(struct.deletedCells.size());
            for (Map.Entry<ByteBuffer, List<PColumn>> _iter220 : struct.deletedCells.entrySet())
            {
              oprot.writeBinary(_iter220.getKey());
              {
                oprot.writeI32(_iter220.getValue().size());
                for (PColumn _iter221 : _iter220.getValue())
                {
                  _iter221.write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAndFlush_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map222 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.cells = new HashMap<ByteBuffer,List<PColumnUpdate>>(2*_map222.size);
            for (int _i223 = 0; _i223 < _map222.size; ++_i223)
            {
              ByteBuffer _key224; // required
              List<PColumnUpdate> _val225; // required
              _key224 = iprot.readBinary();
              {
                org.apache.thrift.protocol.TList _list226 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _val225 = new ArrayList<PColumnUpdate>(_list226.size);
                for (int _i227 = 0; _i227 < _list226.size; ++_i227)
                {
                  PColumnUpdate _elem228; // required
                  _elem228 = new PColumnUpdate();
                  _elem228.read(iprot);
                  _val225.add(_elem228);
                }
              }
              struct.cells.put(_key224, _val225);
            }
          }
          struct.setCellsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map229 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.deletedCells = new HashMap<ByteBuffer,List<PColumn>>(2*_map229.size);
            for (int _i230 = 0; _i230 < _map229.size; ++_i230)
            {
              ByteBuffer _key231; // required
              List<PColumn> _val232; // required
              _key231 = iprot.readBinary();
              {
                org.apache.thrift.protocol.TList _list233 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _val232 = new ArrayList<PColumn>(_list233.size);
                for (int _i234 = 0; _i234 < _list233.size; ++_i234)
                {
                  PColumn _elem235; // required
                  _elem235 = new PColumn();
                  _elem235.read(iprot);
                  _val232.add(_elem235);
                }
              }
              struct.deletedCells.put(_key231, _val232);
            }
          }
          struct.setDeletedCellsIsSet(true);
        }
      }
    }

  }

  public static class updateAndFlush_result implements org.apache.thrift.TBase<updateAndFlush_result, updateAndFlush_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAndFlush_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAndFlush_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAndFlush_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAndFlush_result.class, metaDataMap);
    }

    public updateAndFlush_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAndFlush_result(updateAndFlush_result other) {
    }

    public updateAndFlush_result deepCopy() {
      return new updateAndFlush_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAndFlush_result)
        return this.equals((updateAndFlush_result)that);
      return false;
    }

    public boolean equals(updateAndFlush_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateAndFlush_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateAndFlush_result typedOther = (updateAndFlush_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAndFlush_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAndFlush_resultStandardSchemeFactory implements SchemeFactory {
      public updateAndFlush_resultStandardScheme getScheme() {
        return new updateAndFlush_resultStandardScheme();
      }
    }

    private static class updateAndFlush_resultStandardScheme extends StandardScheme<updateAndFlush_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAndFlush_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAndFlush_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAndFlush_resultTupleSchemeFactory implements SchemeFactory {
      public updateAndFlush_resultTupleScheme getScheme() {
        return new updateAndFlush_resultTupleScheme();
      }
    }

    private static class updateAndFlush_resultTupleScheme extends TupleScheme<updateAndFlush_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAndFlush_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAndFlush_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class createWriter_args implements org.apache.thrift.TBase<createWriter_args, createWriter_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createWriter_args");

    private static final org.apache.thrift.protocol.TField USERPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userpass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createWriter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createWriter_argsTupleSchemeFactory());
    }

    public UserPass userpass; // required
    public String tableName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERPASS((short)1, "userpass"),
      TABLE_NAME((short)2, "tableName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERPASS
            return USERPASS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERPASS, new org.apache.thrift.meta_data.FieldMetaData("userpass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPass.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createWriter_args.class, metaDataMap);
    }

    public createWriter_args() {
    }

    public createWriter_args(
      UserPass userpass,
      String tableName)
    {
      this();
      this.userpass = userpass;
      this.tableName = tableName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createWriter_args(createWriter_args other) {
      if (other.isSetUserpass()) {
        this.userpass = new UserPass(other.userpass);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
    }

    public createWriter_args deepCopy() {
      return new createWriter_args(this);
    }

    @Override
    public void clear() {
      this.userpass = null;
      this.tableName = null;
    }

    public UserPass getUserpass() {
      return this.userpass;
    }

    public createWriter_args setUserpass(UserPass userpass) {
      this.userpass = userpass;
      return this;
    }

    public void unsetUserpass() {
      this.userpass = null;
    }

    /** Returns true if field userpass is set (has been assigned a value) and false otherwise */
    public boolean isSetUserpass() {
      return this.userpass != null;
    }

    public void setUserpassIsSet(boolean value) {
      if (!value) {
        this.userpass = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public createWriter_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERPASS:
        if (value == null) {
          unsetUserpass();
        } else {
          setUserpass((UserPass)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERPASS:
        return getUserpass();

      case TABLE_NAME:
        return getTableName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERPASS:
        return isSetUserpass();
      case TABLE_NAME:
        return isSetTableName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createWriter_args)
        return this.equals((createWriter_args)that);
      return false;
    }

    public boolean equals(createWriter_args that) {
      if (that == null)
        return false;

      boolean this_present_userpass = true && this.isSetUserpass();
      boolean that_present_userpass = true && that.isSetUserpass();
      if (this_present_userpass || that_present_userpass) {
        if (!(this_present_userpass && that_present_userpass))
          return false;
        if (!this.userpass.equals(that.userpass))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createWriter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createWriter_args typedOther = (createWriter_args)other;

      lastComparison = Boolean.valueOf(isSetUserpass()).compareTo(typedOther.isSetUserpass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserpass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userpass, typedOther.userpass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createWriter_args(");
      boolean first = true;

      sb.append("userpass:");
      if (this.userpass == null) {
        sb.append("null");
      } else {
        sb.append(this.userpass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userpass != null) {
        userpass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createWriter_argsStandardSchemeFactory implements SchemeFactory {
      public createWriter_argsStandardScheme getScheme() {
        return new createWriter_argsStandardScheme();
      }
    }

    private static class createWriter_argsStandardScheme extends StandardScheme<createWriter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createWriter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERPASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userpass = new UserPass();
                struct.userpass.read(iprot);
                struct.setUserpassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createWriter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userpass != null) {
          oprot.writeFieldBegin(USERPASS_FIELD_DESC);
          struct.userpass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createWriter_argsTupleSchemeFactory implements SchemeFactory {
      public createWriter_argsTupleScheme getScheme() {
        return new createWriter_argsTupleScheme();
      }
    }

    private static class createWriter_argsTupleScheme extends TupleScheme<createWriter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createWriter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserpass()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserpass()) {
          struct.userpass.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createWriter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userpass = new UserPass();
          struct.userpass.read(iprot);
          struct.setUserpassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
      }
    }

  }

  public static class createWriter_result implements org.apache.thrift.TBase<createWriter_result, createWriter_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createWriter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createWriter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createWriter_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createWriter_result.class, metaDataMap);
    }

    public createWriter_result() {
    }

    public createWriter_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createWriter_result(createWriter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createWriter_result deepCopy() {
      return new createWriter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createWriter_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createWriter_result)
        return this.equals((createWriter_result)that);
      return false;
    }

    public boolean equals(createWriter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createWriter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createWriter_result typedOther = (createWriter_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createWriter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createWriter_resultStandardSchemeFactory implements SchemeFactory {
      public createWriter_resultStandardScheme getScheme() {
        return new createWriter_resultStandardScheme();
      }
    }

    private static class createWriter_resultStandardScheme extends StandardScheme<createWriter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createWriter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createWriter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createWriter_resultTupleSchemeFactory implements SchemeFactory {
      public createWriter_resultTupleScheme getScheme() {
        return new createWriter_resultTupleScheme();
      }
    }

    private static class createWriter_resultTupleScheme extends TupleScheme<createWriter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createWriter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createWriter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class writer_update_args implements org.apache.thrift.TBase<writer_update_args, writer_update_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writer_update_args");

    private static final org.apache.thrift.protocol.TField WRITER_FIELD_DESC = new org.apache.thrift.protocol.TField("writer", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField DELETED_CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("deletedCells", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new writer_update_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new writer_update_argsTupleSchemeFactory());
    }

    public String writer; // required
    public Map<ByteBuffer,List<PColumnUpdate>> cells; // required
    public Map<ByteBuffer,List<PColumn>> deletedCells; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WRITER((short)1, "writer"),
      CELLS((short)2, "cells"),
      DELETED_CELLS((short)3, "deletedCells");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WRITER
            return WRITER;
          case 2: // CELLS
            return CELLS;
          case 3: // DELETED_CELLS
            return DELETED_CELLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WRITER, new org.apache.thrift.meta_data.FieldMetaData("writer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PColumnUpdate.class)))));
      tmpMap.put(_Fields.DELETED_CELLS, new org.apache.thrift.meta_data.FieldMetaData("deletedCells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PColumn.class)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writer_update_args.class, metaDataMap);
    }

    public writer_update_args() {
    }

    public writer_update_args(
      String writer,
      Map<ByteBuffer,List<PColumnUpdate>> cells,
      Map<ByteBuffer,List<PColumn>> deletedCells)
    {
      this();
      this.writer = writer;
      this.cells = cells;
      this.deletedCells = deletedCells;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writer_update_args(writer_update_args other) {
      if (other.isSetWriter()) {
        this.writer = other.writer;
      }
      if (other.isSetCells()) {
        Map<ByteBuffer,List<PColumnUpdate>> __this__cells = new HashMap<ByteBuffer,List<PColumnUpdate>>();
        for (Map.Entry<ByteBuffer, List<PColumnUpdate>> other_element : other.cells.entrySet()) {

          ByteBuffer other_element_key = other_element.getKey();
          List<PColumnUpdate> other_element_value = other_element.getValue();

          ByteBuffer __this__cells_copy_key = org.apache.thrift.TBaseHelper.copyBinary(other_element_key);
;

          List<PColumnUpdate> __this__cells_copy_value = new ArrayList<PColumnUpdate>();
          for (PColumnUpdate other_element_value_element : other_element_value) {
            __this__cells_copy_value.add(new PColumnUpdate(other_element_value_element));
          }

          __this__cells.put(__this__cells_copy_key, __this__cells_copy_value);
        }
        this.cells = __this__cells;
      }
      if (other.isSetDeletedCells()) {
        Map<ByteBuffer,List<PColumn>> __this__deletedCells = new HashMap<ByteBuffer,List<PColumn>>();
        for (Map.Entry<ByteBuffer, List<PColumn>> other_element : other.deletedCells.entrySet()) {

          ByteBuffer other_element_key = other_element.getKey();
          List<PColumn> other_element_value = other_element.getValue();

          ByteBuffer __this__deletedCells_copy_key = org.apache.thrift.TBaseHelper.copyBinary(other_element_key);
;

          List<PColumn> __this__deletedCells_copy_value = new ArrayList<PColumn>();
          for (PColumn other_element_value_element : other_element_value) {
            __this__deletedCells_copy_value.add(new PColumn(other_element_value_element));
          }

          __this__deletedCells.put(__this__deletedCells_copy_key, __this__deletedCells_copy_value);
        }
        this.deletedCells = __this__deletedCells;
      }
    }

    public writer_update_args deepCopy() {
      return new writer_update_args(this);
    }

    @Override
    public void clear() {
      this.writer = null;
      this.cells = null;
      this.deletedCells = null;
    }

    public String getWriter() {
      return this.writer;
    }

    public writer_update_args setWriter(String writer) {
      this.writer = writer;
      return this;
    }

    public void unsetWriter() {
      this.writer = null;
    }

    /** Returns true if field writer is set (has been assigned a value) and false otherwise */
    public boolean isSetWriter() {
      return this.writer != null;
    }

    public void setWriterIsSet(boolean value) {
      if (!value) {
        this.writer = null;
      }
    }

    public int getCellsSize() {
      return (this.cells == null) ? 0 : this.cells.size();
    }

    public void putToCells(ByteBuffer key, List<PColumnUpdate> val) {
      if (this.cells == null) {
        this.cells = new HashMap<ByteBuffer,List<PColumnUpdate>>();
      }
      this.cells.put(key, val);
    }

    public Map<ByteBuffer,List<PColumnUpdate>> getCells() {
      return this.cells;
    }

    public writer_update_args setCells(Map<ByteBuffer,List<PColumnUpdate>> cells) {
      this.cells = cells;
      return this;
    }

    public void unsetCells() {
      this.cells = null;
    }

    /** Returns true if field cells is set (has been assigned a value) and false otherwise */
    public boolean isSetCells() {
      return this.cells != null;
    }

    public void setCellsIsSet(boolean value) {
      if (!value) {
        this.cells = null;
      }
    }

    public int getDeletedCellsSize() {
      return (this.deletedCells == null) ? 0 : this.deletedCells.size();
    }

    public void putToDeletedCells(ByteBuffer key, List<PColumn> val) {
      if (this.deletedCells == null) {
        this.deletedCells = new HashMap<ByteBuffer,List<PColumn>>();
      }
      this.deletedCells.put(key, val);
    }

    public Map<ByteBuffer,List<PColumn>> getDeletedCells() {
      return this.deletedCells;
    }

    public writer_update_args setDeletedCells(Map<ByteBuffer,List<PColumn>> deletedCells) {
      this.deletedCells = deletedCells;
      return this;
    }

    public void unsetDeletedCells() {
      this.deletedCells = null;
    }

    /** Returns true if field deletedCells is set (has been assigned a value) and false otherwise */
    public boolean isSetDeletedCells() {
      return this.deletedCells != null;
    }

    public void setDeletedCellsIsSet(boolean value) {
      if (!value) {
        this.deletedCells = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WRITER:
        if (value == null) {
          unsetWriter();
        } else {
          setWriter((String)value);
        }
        break;

      case CELLS:
        if (value == null) {
          unsetCells();
        } else {
          setCells((Map<ByteBuffer,List<PColumnUpdate>>)value);
        }
        break;

      case DELETED_CELLS:
        if (value == null) {
          unsetDeletedCells();
        } else {
          setDeletedCells((Map<ByteBuffer,List<PColumn>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WRITER:
        return getWriter();

      case CELLS:
        return getCells();

      case DELETED_CELLS:
        return getDeletedCells();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WRITER:
        return isSetWriter();
      case CELLS:
        return isSetCells();
      case DELETED_CELLS:
        return isSetDeletedCells();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writer_update_args)
        return this.equals((writer_update_args)that);
      return false;
    }

    public boolean equals(writer_update_args that) {
      if (that == null)
        return false;

      boolean this_present_writer = true && this.isSetWriter();
      boolean that_present_writer = true && that.isSetWriter();
      if (this_present_writer || that_present_writer) {
        if (!(this_present_writer && that_present_writer))
          return false;
        if (!this.writer.equals(that.writer))
          return false;
      }

      boolean this_present_cells = true && this.isSetCells();
      boolean that_present_cells = true && that.isSetCells();
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      boolean this_present_deletedCells = true && this.isSetDeletedCells();
      boolean that_present_deletedCells = true && that.isSetDeletedCells();
      if (this_present_deletedCells || that_present_deletedCells) {
        if (!(this_present_deletedCells && that_present_deletedCells))
          return false;
        if (!this.deletedCells.equals(that.deletedCells))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(writer_update_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      writer_update_args typedOther = (writer_update_args)other;

      lastComparison = Boolean.valueOf(isSetWriter()).compareTo(typedOther.isSetWriter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWriter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writer, typedOther.writer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCells()).compareTo(typedOther.isSetCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, typedOther.cells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeletedCells()).compareTo(typedOther.isSetDeletedCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeletedCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deletedCells, typedOther.deletedCells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writer_update_args(");
      boolean first = true;

      sb.append("writer:");
      if (this.writer == null) {
        sb.append("null");
      } else {
        sb.append(this.writer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deletedCells:");
      if (this.deletedCells == null) {
        sb.append("null");
      } else {
        sb.append(this.deletedCells);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writer_update_argsStandardSchemeFactory implements SchemeFactory {
      public writer_update_argsStandardScheme getScheme() {
        return new writer_update_argsStandardScheme();
      }
    }

    private static class writer_update_argsStandardScheme extends StandardScheme<writer_update_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writer_update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WRITER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.writer = iprot.readString();
                struct.setWriterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CELLS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map236 = iprot.readMapBegin();
                  struct.cells = new HashMap<ByteBuffer,List<PColumnUpdate>>(2*_map236.size);
                  for (int _i237 = 0; _i237 < _map236.size; ++_i237)
                  {
                    ByteBuffer _key238; // required
                    List<PColumnUpdate> _val239; // required
                    _key238 = iprot.readBinary();
                    {
                      org.apache.thrift.protocol.TList _list240 = iprot.readListBegin();
                      _val239 = new ArrayList<PColumnUpdate>(_list240.size);
                      for (int _i241 = 0; _i241 < _list240.size; ++_i241)
                      {
                        PColumnUpdate _elem242; // required
                        _elem242 = new PColumnUpdate();
                        _elem242.read(iprot);
                        _val239.add(_elem242);
                      }
                      iprot.readListEnd();
                    }
                    struct.cells.put(_key238, _val239);
                  }
                  iprot.readMapEnd();
                }
                struct.setCellsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DELETED_CELLS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map243 = iprot.readMapBegin();
                  struct.deletedCells = new HashMap<ByteBuffer,List<PColumn>>(2*_map243.size);
                  for (int _i244 = 0; _i244 < _map243.size; ++_i244)
                  {
                    ByteBuffer _key245; // required
                    List<PColumn> _val246; // required
                    _key245 = iprot.readBinary();
                    {
                      org.apache.thrift.protocol.TList _list247 = iprot.readListBegin();
                      _val246 = new ArrayList<PColumn>(_list247.size);
                      for (int _i248 = 0; _i248 < _list247.size; ++_i248)
                      {
                        PColumn _elem249; // required
                        _elem249 = new PColumn();
                        _elem249.read(iprot);
                        _val246.add(_elem249);
                      }
                      iprot.readListEnd();
                    }
                    struct.deletedCells.put(_key245, _val246);
                  }
                  iprot.readMapEnd();
                }
                struct.setDeletedCellsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writer_update_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.writer != null) {
          oprot.writeFieldBegin(WRITER_FIELD_DESC);
          oprot.writeString(struct.writer);
          oprot.writeFieldEnd();
        }
        if (struct.cells != null) {
          oprot.writeFieldBegin(CELLS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.cells.size()));
            for (Map.Entry<ByteBuffer, List<PColumnUpdate>> _iter250 : struct.cells.entrySet())
            {
              oprot.writeBinary(_iter250.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter250.getValue().size()));
                for (PColumnUpdate _iter251 : _iter250.getValue())
                {
                  _iter251.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.deletedCells != null) {
          oprot.writeFieldBegin(DELETED_CELLS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.deletedCells.size()));
            for (Map.Entry<ByteBuffer, List<PColumn>> _iter252 : struct.deletedCells.entrySet())
            {
              oprot.writeBinary(_iter252.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter252.getValue().size()));
                for (PColumn _iter253 : _iter252.getValue())
                {
                  _iter253.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writer_update_argsTupleSchemeFactory implements SchemeFactory {
      public writer_update_argsTupleScheme getScheme() {
        return new writer_update_argsTupleScheme();
      }
    }

    private static class writer_update_argsTupleScheme extends TupleScheme<writer_update_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writer_update_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWriter()) {
          optionals.set(0);
        }
        if (struct.isSetCells()) {
          optionals.set(1);
        }
        if (struct.isSetDeletedCells()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetWriter()) {
          oprot.writeString(struct.writer);
        }
        if (struct.isSetCells()) {
          {
            oprot.writeI32(struct.cells.size());
            for (Map.Entry<ByteBuffer, List<PColumnUpdate>> _iter254 : struct.cells.entrySet())
            {
              oprot.writeBinary(_iter254.getKey());
              {
                oprot.writeI32(_iter254.getValue().size());
                for (PColumnUpdate _iter255 : _iter254.getValue())
                {
                  _iter255.write(oprot);
                }
              }
            }
          }
        }
        if (struct.isSetDeletedCells()) {
          {
            oprot.writeI32(struct.deletedCells.size());
            for (Map.Entry<ByteBuffer, List<PColumn>> _iter256 : struct.deletedCells.entrySet())
            {
              oprot.writeBinary(_iter256.getKey());
              {
                oprot.writeI32(_iter256.getValue().size());
                for (PColumn _iter257 : _iter256.getValue())
                {
                  _iter257.write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writer_update_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.writer = iprot.readString();
          struct.setWriterIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map258 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.cells = new HashMap<ByteBuffer,List<PColumnUpdate>>(2*_map258.size);
            for (int _i259 = 0; _i259 < _map258.size; ++_i259)
            {
              ByteBuffer _key260; // required
              List<PColumnUpdate> _val261; // required
              _key260 = iprot.readBinary();
              {
                org.apache.thrift.protocol.TList _list262 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _val261 = new ArrayList<PColumnUpdate>(_list262.size);
                for (int _i263 = 0; _i263 < _list262.size; ++_i263)
                {
                  PColumnUpdate _elem264; // required
                  _elem264 = new PColumnUpdate();
                  _elem264.read(iprot);
                  _val261.add(_elem264);
                }
              }
              struct.cells.put(_key260, _val261);
            }
          }
          struct.setCellsIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map265 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.deletedCells = new HashMap<ByteBuffer,List<PColumn>>(2*_map265.size);
            for (int _i266 = 0; _i266 < _map265.size; ++_i266)
            {
              ByteBuffer _key267; // required
              List<PColumn> _val268; // required
              _key267 = iprot.readBinary();
              {
                org.apache.thrift.protocol.TList _list269 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _val268 = new ArrayList<PColumn>(_list269.size);
                for (int _i270 = 0; _i270 < _list269.size; ++_i270)
                {
                  PColumn _elem271; // required
                  _elem271 = new PColumn();
                  _elem271.read(iprot);
                  _val268.add(_elem271);
                }
              }
              struct.deletedCells.put(_key267, _val268);
            }
          }
          struct.setDeletedCellsIsSet(true);
        }
      }
    }

  }

  public static class writer_flush_args implements org.apache.thrift.TBase<writer_flush_args, writer_flush_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writer_flush_args");

    private static final org.apache.thrift.protocol.TField WRITER_FIELD_DESC = new org.apache.thrift.protocol.TField("writer", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new writer_flush_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new writer_flush_argsTupleSchemeFactory());
    }

    public String writer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WRITER((short)1, "writer");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WRITER
            return WRITER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WRITER, new org.apache.thrift.meta_data.FieldMetaData("writer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writer_flush_args.class, metaDataMap);
    }

    public writer_flush_args() {
    }

    public writer_flush_args(
      String writer)
    {
      this();
      this.writer = writer;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writer_flush_args(writer_flush_args other) {
      if (other.isSetWriter()) {
        this.writer = other.writer;
      }
    }

    public writer_flush_args deepCopy() {
      return new writer_flush_args(this);
    }

    @Override
    public void clear() {
      this.writer = null;
    }

    public String getWriter() {
      return this.writer;
    }

    public writer_flush_args setWriter(String writer) {
      this.writer = writer;
      return this;
    }

    public void unsetWriter() {
      this.writer = null;
    }

    /** Returns true if field writer is set (has been assigned a value) and false otherwise */
    public boolean isSetWriter() {
      return this.writer != null;
    }

    public void setWriterIsSet(boolean value) {
      if (!value) {
        this.writer = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WRITER:
        if (value == null) {
          unsetWriter();
        } else {
          setWriter((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WRITER:
        return getWriter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WRITER:
        return isSetWriter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writer_flush_args)
        return this.equals((writer_flush_args)that);
      return false;
    }

    public boolean equals(writer_flush_args that) {
      if (that == null)
        return false;

      boolean this_present_writer = true && this.isSetWriter();
      boolean that_present_writer = true && that.isSetWriter();
      if (this_present_writer || that_present_writer) {
        if (!(this_present_writer && that_present_writer))
          return false;
        if (!this.writer.equals(that.writer))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(writer_flush_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      writer_flush_args typedOther = (writer_flush_args)other;

      lastComparison = Boolean.valueOf(isSetWriter()).compareTo(typedOther.isSetWriter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWriter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writer, typedOther.writer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writer_flush_args(");
      boolean first = true;

      sb.append("writer:");
      if (this.writer == null) {
        sb.append("null");
      } else {
        sb.append(this.writer);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writer_flush_argsStandardSchemeFactory implements SchemeFactory {
      public writer_flush_argsStandardScheme getScheme() {
        return new writer_flush_argsStandardScheme();
      }
    }

    private static class writer_flush_argsStandardScheme extends StandardScheme<writer_flush_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writer_flush_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WRITER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.writer = iprot.readString();
                struct.setWriterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writer_flush_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.writer != null) {
          oprot.writeFieldBegin(WRITER_FIELD_DESC);
          oprot.writeString(struct.writer);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writer_flush_argsTupleSchemeFactory implements SchemeFactory {
      public writer_flush_argsTupleScheme getScheme() {
        return new writer_flush_argsTupleScheme();
      }
    }

    private static class writer_flush_argsTupleScheme extends TupleScheme<writer_flush_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writer_flush_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWriter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWriter()) {
          oprot.writeString(struct.writer);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writer_flush_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.writer = iprot.readString();
          struct.setWriterIsSet(true);
        }
      }
    }

  }

  public static class writer_flush_result implements org.apache.thrift.TBase<writer_flush_result, writer_flush_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writer_flush_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new writer_flush_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new writer_flush_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writer_flush_result.class, metaDataMap);
    }

    public writer_flush_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writer_flush_result(writer_flush_result other) {
    }

    public writer_flush_result deepCopy() {
      return new writer_flush_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writer_flush_result)
        return this.equals((writer_flush_result)that);
      return false;
    }

    public boolean equals(writer_flush_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(writer_flush_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      writer_flush_result typedOther = (writer_flush_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writer_flush_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writer_flush_resultStandardSchemeFactory implements SchemeFactory {
      public writer_flush_resultStandardScheme getScheme() {
        return new writer_flush_resultStandardScheme();
      }
    }

    private static class writer_flush_resultStandardScheme extends StandardScheme<writer_flush_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writer_flush_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writer_flush_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writer_flush_resultTupleSchemeFactory implements SchemeFactory {
      public writer_flush_resultTupleScheme getScheme() {
        return new writer_flush_resultTupleScheme();
      }
    }

    private static class writer_flush_resultTupleScheme extends TupleScheme<writer_flush_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writer_flush_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writer_flush_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class writer_close_args implements org.apache.thrift.TBase<writer_close_args, writer_close_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writer_close_args");

    private static final org.apache.thrift.protocol.TField WRITER_FIELD_DESC = new org.apache.thrift.protocol.TField("writer", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new writer_close_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new writer_close_argsTupleSchemeFactory());
    }

    public String writer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WRITER((short)1, "writer");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WRITER
            return WRITER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WRITER, new org.apache.thrift.meta_data.FieldMetaData("writer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writer_close_args.class, metaDataMap);
    }

    public writer_close_args() {
    }

    public writer_close_args(
      String writer)
    {
      this();
      this.writer = writer;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writer_close_args(writer_close_args other) {
      if (other.isSetWriter()) {
        this.writer = other.writer;
      }
    }

    public writer_close_args deepCopy() {
      return new writer_close_args(this);
    }

    @Override
    public void clear() {
      this.writer = null;
    }

    public String getWriter() {
      return this.writer;
    }

    public writer_close_args setWriter(String writer) {
      this.writer = writer;
      return this;
    }

    public void unsetWriter() {
      this.writer = null;
    }

    /** Returns true if field writer is set (has been assigned a value) and false otherwise */
    public boolean isSetWriter() {
      return this.writer != null;
    }

    public void setWriterIsSet(boolean value) {
      if (!value) {
        this.writer = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WRITER:
        if (value == null) {
          unsetWriter();
        } else {
          setWriter((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WRITER:
        return getWriter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WRITER:
        return isSetWriter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writer_close_args)
        return this.equals((writer_close_args)that);
      return false;
    }

    public boolean equals(writer_close_args that) {
      if (that == null)
        return false;

      boolean this_present_writer = true && this.isSetWriter();
      boolean that_present_writer = true && that.isSetWriter();
      if (this_present_writer || that_present_writer) {
        if (!(this_present_writer && that_present_writer))
          return false;
        if (!this.writer.equals(that.writer))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(writer_close_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      writer_close_args typedOther = (writer_close_args)other;

      lastComparison = Boolean.valueOf(isSetWriter()).compareTo(typedOther.isSetWriter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWriter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writer, typedOther.writer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writer_close_args(");
      boolean first = true;

      sb.append("writer:");
      if (this.writer == null) {
        sb.append("null");
      } else {
        sb.append(this.writer);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writer_close_argsStandardSchemeFactory implements SchemeFactory {
      public writer_close_argsStandardScheme getScheme() {
        return new writer_close_argsStandardScheme();
      }
    }

    private static class writer_close_argsStandardScheme extends StandardScheme<writer_close_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writer_close_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WRITER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.writer = iprot.readString();
                struct.setWriterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writer_close_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.writer != null) {
          oprot.writeFieldBegin(WRITER_FIELD_DESC);
          oprot.writeString(struct.writer);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writer_close_argsTupleSchemeFactory implements SchemeFactory {
      public writer_close_argsTupleScheme getScheme() {
        return new writer_close_argsTupleScheme();
      }
    }

    private static class writer_close_argsTupleScheme extends TupleScheme<writer_close_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writer_close_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWriter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWriter()) {
          oprot.writeString(struct.writer);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writer_close_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.writer = iprot.readString();
          struct.setWriterIsSet(true);
        }
      }
    }

  }

  public static class writer_close_result implements org.apache.thrift.TBase<writer_close_result, writer_close_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writer_close_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new writer_close_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new writer_close_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writer_close_result.class, metaDataMap);
    }

    public writer_close_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writer_close_result(writer_close_result other) {
    }

    public writer_close_result deepCopy() {
      return new writer_close_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writer_close_result)
        return this.equals((writer_close_result)that);
      return false;
    }

    public boolean equals(writer_close_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(writer_close_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      writer_close_result typedOther = (writer_close_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writer_close_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writer_close_resultStandardSchemeFactory implements SchemeFactory {
      public writer_close_resultStandardScheme getScheme() {
        return new writer_close_resultStandardScheme();
      }
    }

    private static class writer_close_resultStandardScheme extends StandardScheme<writer_close_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writer_close_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writer_close_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writer_close_resultTupleSchemeFactory implements SchemeFactory {
      public writer_close_resultTupleScheme getScheme() {
        return new writer_close_resultTupleScheme();
      }
    }

    private static class writer_close_resultTupleScheme extends TupleScheme<writer_close_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writer_close_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writer_close_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
